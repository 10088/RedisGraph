!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AGGREGATE_OK	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGGREGATE_OK;$/;"	v
AGGREGATION_NODE	arithmetic/arithmetic_expression.c	/^#define AGGREGATION_NODE(/;"	d	file:
AGG_AVG	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_AVG(SIValue *argv, int argc) {$/;"	f
AGG_COLLECT	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_COLLECT(SIValue *argv, int argc) {$/;"	f
AGG_COUNT	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_COUNT(SIValue *argv, int argc) {$/;"	f
AGG_MAX	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_MAX(SIValue *argv, int argc) {$/;"	f
AGG_MIN	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_MIN(SIValue *argv, int argc) {$/;"	f
AGG_PERC	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_PERC(SIValue *argv, int argc) {$/;"	f
AGG_STDEV	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_STDEV(SIValue *argv, int argc) {$/;"	f
AGG_SUM	arithmetic/aggregate_funcs/agg_funcs.c	/^AggregateResult AGG_SUM(SIValue *argv, int argc) {$/;"	f
AL_EXP_ADD	arithmetic/algebraic_expression.h	/^	AL_EXP_ADD = 1,                 \/\/ Matrix addition.$/;"	e	enum:__anon116
AL_EXP_ALL	arithmetic/algebraic_expression.h	/^#define AL_EXP_ALL /;"	d
AL_EXP_MUL	arithmetic/algebraic_expression.h	/^	AL_EXP_MUL = (1 << 1),          \/\/ Matrix multiplication.$/;"	e	enum:__anon116
AL_EXP_OP	arithmetic/algebraic_expression.h	/^} AL_EXP_OP;$/;"	t	typeref:enum:__anon116
AL_EXP_POW	arithmetic/algebraic_expression.h	/^	AL_EXP_POW = (1 << 2),          \/\/ Matrix raised to a power.$/;"	e	enum:__anon116
AL_EXP_TRANSPOSE	arithmetic/algebraic_expression.h	/^	AL_EXP_TRANSPOSE = (1 << 3),    \/\/ Matrix transpose.$/;"	e	enum:__anon116
AL_OPERAND	arithmetic/algebraic_expression.h	/^	AL_OPERAND = 1,$/;"	e	enum:__anon117
AL_OPERATION	arithmetic/algebraic_expression.h	/^	AL_OPERATION  = (1 << 1),$/;"	e	enum:__anon117
ARR_CAP_NOSHRINK	util/arr.h	/^#define ARR_CAP_NOSHRINK /;"	d
AR_ABS	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_ABS(SIValue *argv, int argc) {$/;"	f
AR_ADD	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_ADD(SIValue *argv, int argc) {$/;"	f
AR_ALL	arithmetic/comprehension_funcs/comprehension_funcs.c	/^SIValue AR_ALL(SIValue *argv, int argc) {$/;"	f
AR_AND	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_AND(SIValue *argv, int argc) {$/;"	f
AR_ANY	arithmetic/comprehension_funcs/comprehension_funcs.c	/^SIValue AR_ANY(SIValue *argv, int argc) {$/;"	f
AR_CASEWHEN	arithmetic/conditional_funcs/conditional_funcs.c	/^SIValue AR_CASEWHEN(SIValue *argv, int argc) {$/;"	f
AR_CEIL	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_CEIL(SIValue *argv, int argc) {$/;"	f
AR_COALESCE	arithmetic/conditional_funcs/conditional_funcs.c	/^SIValue AR_COALESCE(SIValue *argv, int argc) {$/;"	f
AR_CONTAINS	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_CONTAINS(SIValue *argv, int argc) {$/;"	f
AR_CloneFuncDesc	arithmetic/func_desc.c	/^AR_FuncDesc *AR_CloneFuncDesc(const AR_FuncDesc *orig) {$/;"	f
AR_DISTANCE	arithmetic/point_funcs/point_funcs.c	/^SIValue AR_DISTANCE(SIValue *argv, int argc) {$/;"	f
AR_DIV	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_DIV(SIValue *argv, int argc) {$/;"	f
AR_ENDNODE	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_ENDNODE(SIValue *argv, int argc) {$/;"	f
AR_ENDSWITH	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_ENDSWITH(SIValue *argv, int argc) {$/;"	f
AR_EQ	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_EQ(SIValue *argv, int argc) {$/;"	f
AR_EXISTS	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_EXISTS(SIValue *argv, int argc) {$/;"	f
AR_EXP_Aggregate	arithmetic/arithmetic_expression.c	/^void AR_EXP_Aggregate(AR_ExpNode *root, const Record r) {$/;"	f
AR_EXP_BORROW_RECORD	arithmetic/arithmetic_expression.h	/^	AR_EXP_BORROW_RECORD   \/\/ A directive to store the current record.$/;"	e	enum:__anon109
AR_EXP_BuildResolvedName	arithmetic/arithmetic_expression.c	/^char *AR_EXP_BuildResolvedName(AR_ExpNode *root) {$/;"	f
AR_EXP_CONSTANT	arithmetic/arithmetic_expression.h	/^	AR_EXP_CONSTANT,       \/\/ A constant, e.g. 3$/;"	e	enum:__anon109
AR_EXP_Clone	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_Clone(AR_ExpNode *exp) {$/;"	f
AR_EXP_CollectAttributes	arithmetic/arithmetic_expression.c	/^void AR_EXP_CollectAttributes(AR_ExpNode *root, rax *attributes) {$/;"	f
AR_EXP_CollectEntities	arithmetic/arithmetic_expression.c	/^void AR_EXP_CollectEntities(AR_ExpNode *root, rax *aliases) {$/;"	f
AR_EXP_ContainsAggregation	arithmetic/arithmetic_expression.c	/^bool AR_EXP_ContainsAggregation(AR_ExpNode *root) {$/;"	f
AR_EXP_ContainsFunc	arithmetic/arithmetic_expression.c	/^bool AR_EXP_ContainsFunc(const AR_ExpNode *root, const char *func) {$/;"	f
AR_EXP_Evaluate	arithmetic/arithmetic_expression.c	/^SIValue AR_EXP_Evaluate(AR_ExpNode *root, const Record r) {$/;"	f
AR_EXP_Finalize	arithmetic/arithmetic_expression.c	/^SIValue AR_EXP_Finalize(AR_ExpNode *root, const Record r) {$/;"	f
AR_EXP_Free	arithmetic/arithmetic_expression.c	/^inline void AR_EXP_Free(AR_ExpNode *root) {$/;"	f
AR_EXP_FromASTNode	arithmetic/arithmetic_expression_construct.c	/^AR_ExpNode *AR_EXP_FromASTNode(const cypher_astnode_t *expr) {$/;"	f
AR_EXP_IsAttribute	arithmetic/arithmetic_expression.c	/^bool AR_EXP_IsAttribute(const AR_ExpNode *exp, char **attr) {$/;"	f
AR_EXP_IsConstant	arithmetic/arithmetic_expression.c	/^inline bool AR_EXP_IsConstant(const AR_ExpNode *exp) {$/;"	f
AR_EXP_IsOperation	arithmetic/arithmetic_expression.c	/^inline bool AR_EXP_IsOperation(const AR_ExpNode *exp) {$/;"	f
AR_EXP_IsParameter	arithmetic/arithmetic_expression.c	/^inline bool AR_EXP_IsParameter(const AR_ExpNode *exp) {$/;"	f
AR_EXP_IsVariadic	arithmetic/arithmetic_expression.c	/^inline bool AR_EXP_IsVariadic(const AR_ExpNode *exp) {$/;"	f
AR_EXP_NewAttributeAccessNode	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_NewAttributeAccessNode(AR_ExpNode *entity,$/;"	f
AR_EXP_NewConstOperandNode	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_NewConstOperandNode(SIValue constant) {$/;"	f
AR_EXP_NewOpNode	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_NewOpNode(const char *func_name, uint child_count) {$/;"	f
AR_EXP_NewOpNodeFromAST	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *AR_EXP_NewOpNodeFromAST(AST_Operator op, uint child_count) {$/;"	f	file:
AR_EXP_NewParameterOperandNode	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_NewParameterOperandNode(const char *param_name) {$/;"	f
AR_EXP_NewRecordNode	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_NewRecordNode() {$/;"	f
AR_EXP_NewVariableOperandNode	arithmetic/arithmetic_expression.c	/^AR_ExpNode *AR_EXP_NewVariableOperandNode(const char *alias) {$/;"	f
AR_EXP_OP	arithmetic/arithmetic_expression.h	/^	AR_EXP_OP,$/;"	e	enum:__anon108
AR_EXP_OPERAND	arithmetic/arithmetic_expression.h	/^	AR_EXP_OPERAND$/;"	e	enum:__anon108
AR_EXP_OP_UNKNOWN	arithmetic/arithmetic_expression.h	/^	AR_EXP_OP_UNKNOWN,     \/\/ Should not occur.$/;"	e	enum:__anon109
AR_EXP_PARAM	arithmetic/arithmetic_expression.h	/^	AR_EXP_PARAM,          \/\/ A parameter, e.g. $p.$/;"	e	enum:__anon109
AR_EXP_ReduceToScalar	arithmetic/arithmetic_expression.c	/^bool AR_EXP_ReduceToScalar(AR_ExpNode *root, bool reduce_params, SIValue *val) {$/;"	f
AR_EXP_ResolveVariables	arithmetic/arithmetic_expression.c	/^void AR_EXP_ResolveVariables(AR_ExpNode *root, const Record r) {$/;"	f
AR_EXP_Result	arithmetic/arithmetic_expression.h	/^} AR_EXP_Result;$/;"	t	typeref:enum:__anon110
AR_EXP_ReturnsBoolean	arithmetic/arithmetic_expression.c	/^bool AR_EXP_ReturnsBoolean(const AR_ExpNode *exp) {$/;"	f
AR_EXP_ToString	arithmetic/arithmetic_expression.c	/^void AR_EXP_ToString(const AR_ExpNode *root, char **str) {$/;"	f
AR_EXP_UNKNOWN	arithmetic/arithmetic_expression.h	/^	AR_EXP_UNKNOWN,$/;"	e	enum:__anon108
AR_EXP_VARIADIC	arithmetic/arithmetic_expression.h	/^	AR_EXP_VARIADIC,       \/\/ A variable, e.g. n$/;"	e	enum:__anon109
AR_ExpNode	arithmetic/arithmetic_expression.h	/^typedef struct AR_ExpNode {$/;"	s
AR_ExpNode	arithmetic/arithmetic_expression.h	/^} AR_ExpNode;$/;"	t	typeref:struct:AR_ExpNode
AR_ExpNodeType	arithmetic/arithmetic_expression.h	/^} AR_ExpNodeType;$/;"	t	typeref:enum:__anon108
AR_FLOOR	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_FLOOR(SIValue *argv, int argc) {$/;"	f
AR_Finalize	arithmetic/func_desc.c	/^void AR_Finalize(AR_FuncDesc *func_desc) {$/;"	f
AR_Func	arithmetic/func_desc.h	/^typedef SIValue(*AR_Func)(SIValue *argv, int argc);$/;"	t
AR_FuncDesc	arithmetic/func_desc.h	/^} AR_FuncDesc;$/;"	t	typeref:struct:__anon123
AR_FuncDescNew	arithmetic/func_desc.c	/^AR_FuncDesc *AR_FuncDescNew(const char *name, AR_Func func, uint min_argc, uint max_argc,$/;"	f
AR_FuncExists	arithmetic/func_desc.c	/^bool AR_FuncExists(const char *func_name) {$/;"	f
AR_FuncIsAggregate	arithmetic/func_desc.c	/^bool AR_FuncIsAggregate(const char *func_name) {$/;"	f
AR_Func_Clone	arithmetic/func_desc.h	/^typedef void *(*AR_Func_Clone)(void *orig);$/;"	t
AR_Func_Finalize	arithmetic/func_desc.h	/^typedef void (*AR_Func_Finalize)(void *ctx);$/;"	t
AR_Func_Free	arithmetic/func_desc.h	/^typedef void (*AR_Func_Free)(void *ctx);$/;"	t
AR_GE	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_GE(SIValue *argv, int argc) {$/;"	f
AR_GT	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_GT(SIValue *argv, int argc) {$/;"	f
AR_GetFunc	arithmetic/func_desc.c	/^AR_FuncDesc *AR_GetFunc(const char *func_name) {$/;"	f
AR_HEAD	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_HEAD(SIValue *argv, int argc) {$/;"	f
AR_ID	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_ID(SIValue *argv, int argc) {$/;"	f
AR_IN	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_IN(SIValue *argv, int argc) {$/;"	f
AR_INCOMEDEGREE	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_INCOMEDEGREE(SIValue *argv, int argc) {$/;"	f
AR_IS_NOT_NULL	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_IS_NOT_NULL(SIValue *argv, int argc) {$/;"	f
AR_IS_NULL	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_IS_NULL(SIValue *argv, int argc) {$/;"	f
AR_LABELS	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_LABELS(SIValue *argv, int argc) {$/;"	f
AR_LE	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_LE(SIValue *argv, int argc) {$/;"	f
AR_LEFT	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_LEFT(SIValue *argv, int argc) {$/;"	f
AR_LIST_COMPREHENSION	arithmetic/comprehension_funcs/comprehension_funcs.c	/^SIValue AR_LIST_COMPREHENSION(SIValue *argv, int argc) {$/;"	f
AR_LT	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_LT(SIValue *argv, int argc) {$/;"	f
AR_LTRIM	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_LTRIM(SIValue *argv, int argc) {$/;"	f
AR_MODULO	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_MODULO(SIValue *argv, int argc) {$/;"	f
AR_MUL	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_MUL(SIValue *argv, int argc) {$/;"	f
AR_NE	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_NE(SIValue *argv, int argc) {$/;"	f
AR_NOT	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_NOT(SIValue *argv, int argc) {$/;"	f
AR_OR	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_OR(SIValue *argv, int argc) {$/;"	f
AR_OUTGOINGDEGREE	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_OUTGOINGDEGREE(SIValue *argv, int argc) {$/;"	f
AR_OpNode	arithmetic/arithmetic_expression.h	/^} AR_OpNode;$/;"	t	typeref:struct:__anon111
AR_OperandNode	arithmetic/arithmetic_expression.h	/^} AR_OperandNode;$/;"	t	typeref:struct:__anon112
AR_OperandNodeType	arithmetic/arithmetic_expression.h	/^} AR_OperandNodeType;$/;"	t	typeref:enum:__anon109
AR_PATH_FILTER	arithmetic/placeholder_funcs/placeholder_funcs.c	/^SIValue AR_PATH_FILTER(SIValue *argv, int argc) {$/;"	f
AR_PATH_LENGTH	arithmetic/path_funcs/path_funcs.c	/^SIValue AR_PATH_LENGTH(SIValue *argv, int argc) {$/;"	f
AR_PATH_NODES	arithmetic/path_funcs/path_funcs.c	/^SIValue AR_PATH_NODES(SIValue *argv, int argc) {$/;"	f
AR_PATH_RELATIONSHIPS	arithmetic/path_funcs/path_funcs.c	/^SIValue AR_PATH_RELATIONSHIPS(SIValue *argv, int argc) {$/;"	f
AR_PROPERTY	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_PROPERTY(SIValue *argv, int argc) {$/;"	f
AR_RAND	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_RAND(SIValue *argv, int argc) {$/;"	f
AR_RANDOMUUID	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_RANDOMUUID(SIValue *argv, int argc) {$/;"	f
AR_RANGE	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_RANGE(SIValue *argv, int argc) {$/;"	f
AR_REVERSE	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_REVERSE(SIValue *argv, int argc) {$/;"	f
AR_RIGHT	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_RIGHT(SIValue *argv, int argc) {$/;"	f
AR_ROUND	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_ROUND(SIValue *argv, int argc) {$/;"	f
AR_RTRIM	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_RTRIM(SIValue *argv, int argc) {$/;"	f
AR_RegFunc	arithmetic/func_desc.c	/^void AR_RegFunc(AR_FuncDesc *func) {$/;"	f
AR_RegisterFuncs	arithmetic/funcs.c	/^void AR_RegisterFuncs() {$/;"	f
AR_SHORTEST_PATH	arithmetic/path_funcs/path_funcs.c	/^SIValue AR_SHORTEST_PATH(SIValue *argv, int argc) {$/;"	f
AR_SIGN	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_SIGN(SIValue *argv, int argc) {$/;"	f
AR_SIZE	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_SIZE(SIValue *argv, int argc) {$/;"	f
AR_SLICE	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_SLICE(SIValue *argv, int argc) {$/;"	f
AR_SQRT	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_SQRT(SIValue *argv, int argc) {$/;"	f
AR_STARTNODE	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_STARTNODE(SIValue *argv, int argc) {$/;"	f
AR_STARTSWITH	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_STARTSWITH(SIValue *argv, int argc) {$/;"	f
AR_SUB	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_SUB(SIValue *argv, int argc) {$/;"	f
AR_SUBSCRIPT	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_SUBSCRIPT(SIValue *argv, int argc) {$/;"	f
AR_SUBSTRING	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_SUBSTRING(SIValue *argv, int argc) {$/;"	f
AR_SetFinalizeRoutine	arithmetic/func_desc.c	/^void AR_SetFinalizeRoutine(AR_FuncDesc *func_desc, AR_Func_Finalize finalize) {$/;"	f
AR_SetPrivateData	arithmetic/func_desc.c	/^AR_FuncDesc *AR_SetPrivateData(const AR_FuncDesc *orig, void *privdata) {$/;"	f
AR_SetPrivateDataRoutines	arithmetic/func_desc.c	/^inline void AR_SetPrivateDataRoutines(AR_FuncDesc *func_desc, AR_Func_Free bfree,$/;"	f
AR_TAIL	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_TAIL(SIValue *argv, int argc) {$/;"	f
AR_TIMESTAMP	arithmetic/time_funcs/time_funcs.c	/^SIValue AR_TIMESTAMP(SIValue *argv, int argc) {$/;"	f
AR_TOINTEGER	arithmetic/numeric_funcs/numeric_funcs.c	/^SIValue AR_TOINTEGER(SIValue *argv, int argc) {$/;"	f
AR_TOJSON	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_TOJSON(SIValue *argv, int argc) {$/;"	f
AR_TOLIST	arithmetic/list_funcs/list_funcs.c	/^SIValue AR_TOLIST(SIValue *argv, int argc) {$/;"	f
AR_TOLOWER	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_TOLOWER(SIValue *argv, int argc) {$/;"	f
AR_TOMAP	arithmetic/map_funcs/map_funcs.c	/^SIValue AR_TOMAP(SIValue *argv, int argc) {$/;"	f
AR_TOPATH	arithmetic/path_funcs/path_funcs.c	/^SIValue AR_TOPATH(SIValue *argv, int argc) {$/;"	f
AR_TOPOINT	arithmetic/point_funcs/point_funcs.c	/^SIValue AR_TOPOINT(SIValue *argv, int argc) {$/;"	f
AR_TOSTRING	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_TOSTRING(SIValue *argv, int argc) {$/;"	f
AR_TOUPPER	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_TOUPPER(SIValue *argv, int argc) {$/;"	f
AR_TRIM	arithmetic/string_funcs/string_funcs.c	/^SIValue AR_TRIM(SIValue *argv, int argc) {$/;"	f
AR_TYPE	arithmetic/entity_funcs/entity_funcs.c	/^SIValue AR_TYPE(SIValue *argv, int argc) {$/;"	f
AR_XOR	arithmetic/boolean_funcs/boolean_funcs.c	/^SIValue AR_XOR(SIValue *argv, int argc) {$/;"	f
ASSERT	RG.h	/^	#define ASSERT(/;"	d
ASSERT	RG.h	/^#undef ASSERT$/;"	d
AST	ast/ast.h	/^} AST;$/;"	t	typeref:struct:__anon140
AST_AliasIsReferenced	ast/ast.c	/^inline bool AST_AliasIsReferenced(AST *ast, const char *alias) {$/;"	f
AST_AnnotateEntities	ast/enrichment/annotate_entities.c	/^void AST_AnnotateEntities(AST *ast) {$/;"	f
AST_AnnotateNamedPaths	ast/enrichment/annotate_projected_named_paths.c	/^void AST_AnnotateNamedPaths(AST *ast) {$/;"	f
AST_AnnotateProjectAll	ast/enrichment/annotate_project_all.c	/^void AST_AnnotateProjectAll(AST *ast) {$/;"	f
AST_AnnotationCtxCollection	ast/ast_annotations_ctx_collection.h	/^} AST_AnnotationCtxCollection;$/;"	t	typeref:struct:__anon131
AST_AnnotationCtxCollection_Free	ast/ast_annotations_ctx_collection.c	/^void AST_AnnotationCtxCollection_Free(AST_AnnotationCtxCollection *anotCtxCollection) {$/;"	f
AST_AnnotationCtxCollection_GetNameCtx	ast/ast_annotations_ctx_collection.c	/^inline AnnotationCtx *AST_AnnotationCtxCollection_GetNameCtx(const AST_AnnotationCtxCollection$/;"	f
AST_AnnotationCtxCollection_GetNamedPathsCtx	ast/ast_annotations_ctx_collection.c	/^inline AnnotationCtx *AST_AnnotationCtxCollection_GetNamedPathsCtx(const AST_AnnotationCtxCollection$/;"	f
AST_AnnotationCtxCollection_GetProjectAllCtx	ast/ast_annotations_ctx_collection.c	/^inline AnnotationCtx *AST_AnnotationCtxCollection_GetProjectAllCtx(const AST_AnnotationCtxCollection$/;"	f
AST_AnnotationCtxCollection_New	ast/ast_annotations_ctx_collection.c	/^AST_AnnotationCtxCollection *AST_AnnotationCtxCollection_New() {$/;"	f
AST_AnnotationCtxCollection_SetNameCtx	ast/ast_annotations_ctx_collection.c	/^inline void AST_AnnotationCtxCollection_SetNameCtx(AST_AnnotationCtxCollection *anot_ctx_collection,$/;"	f
AST_AnnotationCtxCollection_SetNamedPathsCtx	ast/ast_annotations_ctx_collection.c	/^inline void AST_AnnotationCtxCollection_SetNamedPathsCtx(AST_AnnotationCtxCollection$/;"	f
AST_AnnotationCtxCollection_SetProjectAllCtx	ast/ast_annotations_ctx_collection.c	/^inline void AST_AnnotationCtxCollection_SetProjectAllCtx(AST_AnnotationCtxCollection$/;"	f
AST_AttachName	ast/enrichment/annotate_entities.c	/^void AST_AttachName(AST *ast, const cypher_astnode_t *node, const char *name) {$/;"	f
AST_Build	ast/ast.c	/^AST *AST_Build(cypher_parse_result_t *parse_result) {$/;"	f
AST_BuildCallColumnNames	ast/ast.c	/^const char **AST_BuildCallColumnNames(const cypher_astnode_t *call_clause) {$/;"	f
AST_BuildFilterTree	ast/ast_build_filter_tree.c	/^FT_FilterNode *AST_BuildFilterTree(AST *ast) {$/;"	f
AST_BuildFilterTreeFromClauses	ast/ast_build_filter_tree.c	/^FT_FilterNode *AST_BuildFilterTreeFromClauses(const AST *ast,$/;"	f
AST_BuildReferenceMap	ast/ast_build_reference_map.c	/^void AST_BuildReferenceMap(AST *ast, const cypher_astnode_t *project_clause) {$/;"	f
AST_BuildReturnColumnNames	ast/ast.c	/^const char **AST_BuildReturnColumnNames(const cypher_astnode_t *return_clause) {$/;"	f
AST_ClauseContainsAggregation	ast/ast.c	/^bool AST_ClauseContainsAggregation(const cypher_astnode_t *clause) {$/;"	f
AST_CollectAliases	ast/ast.c	/^void AST_CollectAliases(const char ***aliases, const cypher_astnode_t *entity) {$/;"	f
AST_ContainsClause	ast/ast.c	/^inline bool AST_ContainsClause(const AST *ast, cypher_astnode_type_t clause) {$/;"	f
AST_ContainsErrors	ast/ast_validations.c	/^bool AST_ContainsErrors(const cypher_parse_result_t *result) {$/;"	f
AST_ConvertFilters	ast/ast_build_filter_tree.c	/^void AST_ConvertFilters(FT_FilterNode **root, const cypher_astnode_t *entity) {$/;"	f
AST_ConvertOperatorNode	ast/ast_shared.c	/^AST_Operator AST_ConvertOperatorNode(const cypher_operator_t *op) {$/;"	f
AST_CreateContext	ast/ast_build_op_contexts.h	/^} AST_CreateContext;$/;"	t	typeref:struct:__anon130
AST_DecRefCount	ast/ast.c	/^static int AST_DecRefCount(AST *ast) {$/;"	f	file:
AST_Enrich	ast/ast_enrich.c	/^void AST_Enrich(AST *ast) {$/;"	f
AST_Free	ast/ast.c	/^void AST_Free(AST *ast) {$/;"	f
AST_GetAnnotationCtxCollection	ast/ast.c	/^inline AST_AnnotationCtxCollection *AST_GetAnnotationCtxCollection(AST *ast) {$/;"	f
AST_GetClause	ast/ast.c	/^const cypher_astnode_t *AST_GetClause(const AST *ast,$/;"	f
AST_GetClauseByIdx	ast/ast.c	/^const cypher_astnode_t *AST_GetClauseByIdx(const AST *ast, uint i) {$/;"	f
AST_GetClauseCount	ast/ast.c	/^uint AST_GetClauseCount(const AST *ast, cypher_astnode_type_t clause_type) {$/;"	f
AST_GetClauseIndices	ast/ast.c	/^uint *AST_GetClauseIndices(const AST *ast, cypher_astnode_type_t clause_type) {$/;"	f
AST_GetClauses	ast/ast.c	/^const cypher_astnode_t **AST_GetClauses(const AST *ast, cypher_astnode_type_t type) {$/;"	f
AST_GetEntityName	ast/ast.c	/^const char *AST_GetEntityName(const AST *ast, const cypher_astnode_t *entity) {$/;"	f
AST_GetProjectAll	ast/ast.c	/^const char **AST_GetProjectAll(const cypher_astnode_t *projection_clause) {$/;"	f
AST_GetTypedNodes	ast/ast.c	/^const cypher_astnode_t **AST_GetTypedNodes(const cypher_astnode_t *root,$/;"	f
AST_INVALID	ast/ast.h	/^	AST_INVALID$/;"	e	enum:__anon139
AST_IdentifierIsAlias	ast/ast.c	/^bool AST_IdentifierIsAlias(const cypher_astnode_t *root, const char *identifier) {$/;"	f
AST_IncreaseRefCount	ast/ast.c	/^static void AST_IncreaseRefCount(AST *ast) {$/;"	f	file:
AST_MergeContext	ast/ast_build_op_contexts.h	/^} AST_MergeContext;$/;"	t	typeref:struct:__anon129
AST_MockFree	ast/ast_mock.c	/^void AST_MockFree(AST *ast, bool free_pattern) {$/;"	f
AST_MockMatchClause	ast/ast_mock.c	/^AST *AST_MockMatchClause(AST *master_ast, cypher_astnode_t *node, bool node_is_path) {$/;"	f
AST_NewSegment	ast/ast.c	/^AST *AST_NewSegment(AST *master_ast, uint start_offset, uint end_offset) {$/;"	f
AST_Operator	ast/ast_shared.h	/^} AST_Operator;$/;"	t	typeref:enum:__anon132
AST_ParseIntegerNode	ast/ast.c	/^inline long AST_ParseIntegerNode(const cypher_astnode_t *int_node) {$/;"	f
AST_PrepareCreateOp	ast/ast_build_op_contexts.c	/^AST_CreateContext AST_PrepareCreateOp(QueryGraph *qg, rax *bound_vars) {$/;"	f
AST_PrepareDeleteOp	ast/ast_build_op_contexts.c	/^AR_ExpNode **AST_PrepareDeleteOp(const cypher_astnode_t *delete_clause) {$/;"	f
AST_PrepareMergeOp	ast/ast_build_op_contexts.c	/^AST_MergeContext AST_PrepareMergeOp(const cypher_astnode_t *merge_clause, GraphContext *gc,$/;"	f
AST_PreparePathCreation	ast/ast_build_op_contexts.c	/^void AST_PreparePathCreation(const cypher_astnode_t *path, const QueryGraph *qg, rax *bound_vars,$/;"	f
AST_PrepareSortOp	ast/ast_build_op_contexts.c	/^void AST_PrepareSortOp(const cypher_astnode_t *order_clause, int **sort_directions) {$/;"	f
AST_PrepareUnwindOp	ast/ast_build_op_contexts.c	/^AST_UnwindContext AST_PrepareUnwindOp(const cypher_astnode_t *unwind_clause) {$/;"	f
AST_PrepareUpdateOp	ast/ast_build_op_contexts.c	/^rax *AST_PrepareUpdateOp(GraphContext *gc, const cypher_astnode_t *set_clause) {$/;"	f
AST_ReadOnly	ast/ast.c	/^bool AST_ReadOnly(const cypher_astnode_t *root) {$/;"	f
AST_ReferredFunctions	ast/ast.c	/^void AST_ReferredFunctions(const cypher_astnode_t *root, rax *referred_funcs) {$/;"	f
AST_SetParamsParseResult	ast/ast.c	/^void AST_SetParamsParseResult(AST *ast, cypher_parse_result_t *params_parse_result) {$/;"	f
AST_ShallowCopy	ast/ast.c	/^AST *AST_ShallowCopy(AST *orig) {$/;"	f
AST_TreeContainsType	ast/ast.c	/^bool AST_TreeContainsType(const cypher_astnode_t *root, cypher_astnode_type_t search_type) {$/;"	f
AST_UnwindContext	ast/ast_build_op_contexts.h	/^} AST_UnwindContext;$/;"	t	typeref:struct:__anon128
AST_VALID	ast/ast.h	/^	AST_VALID,$/;"	e	enum:__anon139
AST_Validate_Query	ast/ast_validations.c	/^AST_Validation AST_Validate_Query(const cypher_parse_result_t *result) {$/;"	f
AST_Validate_QueryParams	ast/ast_validations.c	/^AST_Validation AST_Validate_QueryParams(const cypher_parse_result_t *result) {$/;"	f
AST_Validation	ast/ast.h	/^} AST_Validation;$/;"	t	typeref:enum:__anon139
ASYNC_DELETE	configuration/config.c	/^#define ASYNC_DELETE /;"	d	file:
ATTRIBUTE_ALL	graph/entities/graph_entity.h	/^#define ATTRIBUTE_ALL /;"	d
ATTRIBUTE_NOTFOUND	graph/entities/graph_entity.h	/^#define ATTRIBUTE_NOTFOUND /;"	d
AggregateClone	execution_plan/ops/op_aggregate.c	/^static OpBase *AggregateClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
AggregateConsume	execution_plan/ops/op_aggregate.c	/^static Record AggregateConsume(OpBase *opBase) {$/;"	f	file:
AggregateCtx	arithmetic/aggregate_funcs/agg_funcs.h	/^} AggregateCtx;$/;"	t	typeref:struct:__anon124
AggregateFree	execution_plan/ops/op_aggregate.c	/^static void AggregateFree(OpBase *opBase) {$/;"	f	file:
AggregateReset	execution_plan/ops/op_aggregate.c	/^static OpResult AggregateReset(OpBase *opBase) {$/;"	f	file:
AggregateResult	arithmetic/aggregate_funcs/agg_funcs.c	/^typedef SIValue AggregateResult;$/;"	t	file:
Aggregate_Clone	arithmetic/aggregate_funcs/agg_funcs.c	/^void *Aggregate_Clone(void *orig) {$/;"	f
Aggregate_Free	arithmetic/aggregate_funcs/agg_funcs.c	/^void Aggregate_Free(void *ctx_ptr) {$/;"	f
Aggregate_GetResult	arithmetic/aggregate_funcs/agg_funcs.c	/^SIValue Aggregate_GetResult(AggregateCtx *ctx) {$/;"	f
Aggregate_PerformsDistinct	arithmetic/aggregate_funcs/agg_funcs.c	/^bool Aggregate_PerformsDistinct(AggregateCtx *ctx) {$/;"	f
Aggregate_SetResult	arithmetic/aggregate_funcs/agg_funcs.c	/^static inline void Aggregate_SetResult(AggregateCtx *ctx, SIValue result) {$/;"	f	file:
AlgebraicExpression	arithmetic/algebraic_expression.h	/^struct AlgebraicExpression {$/;"	s
AlgebraicExpression	arithmetic/algebraic_expression.h	/^typedef struct AlgebraicExpression AlgebraicExpression;$/;"	t	typeref:struct:AlgebraicExpression
AlgebraicExpressionType	arithmetic/algebraic_expression.h	/^} AlgebraicExpressionType;$/;"	t	typeref:enum:__anon117
AlgebraicExpression_AddChild	arithmetic/algebraic_expression/algebraic_expression.c	/^void AlgebraicExpression_AddChild$/;"	f
AlgebraicExpression_AddToTheLeft	arithmetic/algebraic_expression/algebraic_expression.c	/^void AlgebraicExpression_AddToTheLeft$/;"	f
AlgebraicExpression_AddToTheRight	arithmetic/algebraic_expression/algebraic_expression.c	/^void AlgebraicExpression_AddToTheRight$/;"	f
AlgebraicExpression_ChildCount	arithmetic/algebraic_expression/algebraic_expression.c	/^uint AlgebraicExpression_ChildCount$/;"	f
AlgebraicExpression_Clone	arithmetic/algebraic_expression/algebraic_expression.c	/^AlgebraicExpression *AlgebraicExpression_Clone$/;"	f
AlgebraicExpression_ContainsOp	arithmetic/algebraic_expression/algebraic_expression.c	/^bool AlgebraicExpression_ContainsOp$/;"	f
AlgebraicExpression_Destination	arithmetic/algebraic_expression/algebraic_expression.c	/^const char *AlgebraicExpression_Destination$/;"	f
AlgebraicExpression_DiagonalOperand	arithmetic/algebraic_expression/algebraic_expression.c	/^bool AlgebraicExpression_DiagonalOperand$/;"	f
AlgebraicExpression_Edge	arithmetic/algebraic_expression/algebraic_expression.c	/^const char *AlgebraicExpression_Edge$/;"	f
AlgebraicExpression_Eval	arithmetic/algebraic_expression/algebraic_expression_eval.c	/^void AlgebraicExpression_Eval(const AlgebraicExpression *exp, GrB_Matrix res) {$/;"	f
AlgebraicExpression_Free	arithmetic/algebraic_expression/algebraic_expression.c	/^void AlgebraicExpression_Free$/;"	f
AlgebraicExpression_FromQueryGraph	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^AlgebraicExpression **AlgebraicExpression_FromQueryGraph$/;"	f
AlgebraicExpression_FromString	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^AlgebraicExpression *AlgebraicExpression_FromString$/;"	f
AlgebraicExpression_LocateOperand	arithmetic/algebraic_expression/algebraic_expression.c	/^bool AlgebraicExpression_LocateOperand$/;"	f
AlgebraicExpression_MultiplyToTheLeft	arithmetic/algebraic_expression/algebraic_expression.c	/^void AlgebraicExpression_MultiplyToTheLeft$/;"	f
AlgebraicExpression_MultiplyToTheRight	arithmetic/algebraic_expression/algebraic_expression.c	/^void AlgebraicExpression_MultiplyToTheRight$/;"	f
AlgebraicExpression_NewOperand	arithmetic/algebraic_expression/algebraic_expression.c	/^AlgebraicExpression *AlgebraicExpression_NewOperand$/;"	f
AlgebraicExpression_NewOperation	arithmetic/algebraic_expression/algebraic_expression.c	/^AlgebraicExpression *AlgebraicExpression_NewOperation$/;"	f
AlgebraicExpression_OperandCount	arithmetic/algebraic_expression/algebraic_expression.c	/^uint AlgebraicExpression_OperandCount$/;"	f
AlgebraicExpression_OperationCount	arithmetic/algebraic_expression/algebraic_expression.c	/^uint AlgebraicExpression_OperationCount$/;"	f
AlgebraicExpression_Optimize	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^void AlgebraicExpression_Optimize$/;"	f
AlgebraicExpression_Print	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^void AlgebraicExpression_Print$/;"	f
AlgebraicExpression_PrintTree	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^void AlgebraicExpression_PrintTree$/;"	f
AlgebraicExpression_PushDownTranspose	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^void AlgebraicExpression_PushDownTranspose(AlgebraicExpression *root) {$/;"	f
AlgebraicExpression_RemoveDest	arithmetic/algebraic_expression/algebraic_expression.c	/^AlgebraicExpression *AlgebraicExpression_RemoveDest$/;"	f
AlgebraicExpression_RemoveSource	arithmetic/algebraic_expression/algebraic_expression.c	/^AlgebraicExpression *AlgebraicExpression_RemoveSource$/;"	f
AlgebraicExpression_Source	arithmetic/algebraic_expression/algebraic_expression.c	/^const char *AlgebraicExpression_Source$/;"	f
AlgebraicExpression_ToString	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^char *AlgebraicExpression_ToString$/;"	f
AlgebraicExpression_Transpose	arithmetic/algebraic_expression/algebraic_expression_transpose.c	/^void AlgebraicExpression_Transpose$/;"	f
AlgebraicExpression_Transposed	arithmetic/algebraic_expression/algebraic_expression.c	/^bool AlgebraicExpression_Transposed$/;"	f
AllNodeScan	execution_plan/ops/op_all_node_scan.h	/^} AllNodeScan;$/;"	t	typeref:struct:__anon50
AllNodeScanClone	execution_plan/ops/op_all_node_scan.c	/^static inline OpBase *AllNodeScanClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
AllNodeScanConsume	execution_plan/ops/op_all_node_scan.c	/^static Record AllNodeScanConsume(OpBase *opBase) {$/;"	f	file:
AllNodeScanConsumeFromChild	execution_plan/ops/op_all_node_scan.c	/^static Record AllNodeScanConsumeFromChild(OpBase *opBase) {$/;"	f	file:
AllNodeScanFree	execution_plan/ops/op_all_node_scan.c	/^static void AllNodeScanFree(OpBase *ctx) {$/;"	f	file:
AllNodeScanInit	execution_plan/ops/op_all_node_scan.c	/^static OpResult AllNodeScanInit(OpBase *opBase) {$/;"	f	file:
AllNodeScanReset	execution_plan/ops/op_all_node_scan.c	/^static OpResult AllNodeScanReset(OpBase *op) {$/;"	f	file:
AllNodeScanToString	execution_plan/ops/op_all_node_scan.c	/^static inline int AllNodeScanToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
AllPathsCtx	algorithms/all_paths.h	/^} AllPathsCtx;$/;"	t	typeref:struct:__anon93
AllPathsCtx_Free	algorithms/all_paths.c	/^void AllPathsCtx_Free(AllPathsCtx *ctx) {$/;"	f
AllPathsCtx_New	algorithms/all_paths.c	/^AllPathsCtx *AllPathsCtx_New(Node *src, Node *dst, Graph *g, int *relationIDs, int relationCount,$/;"	f
AllPathsCtx_NextPath	algorithms/all_paths.c	/^Path *AllPathsCtx_NextPath(AllPathsCtx *ctx) {$/;"	f
Alloc_Reset	util/rmalloc.c	/^void Alloc_Reset() {$/;"	f
AndMultiplexer_Consume	execution_plan/ops/op_apply_multiplexer.c	/^static Record AndMultiplexer_Consume(OpBase *opBase) {$/;"	f	file:
AnnotationCtx	ast/ast_annotations_ctx_collection.h	/^typedef cypher_ast_annotation_context_t AnnotationCtx;$/;"	t
AntiSemiApplyConsume	execution_plan/ops/op_semi_apply.c	/^static Record AntiSemiApplyConsume(OpBase *opBase) {$/;"	f	file:
Apply	execution_plan/ops/op_apply.h	/^} Apply;$/;"	t	typeref:struct:__anon52
ApplyClone	execution_plan/ops/op_apply.c	/^static OpBase *ApplyClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ApplyConsume	execution_plan/ops/op_apply.c	/^static Record ApplyConsume(OpBase *opBase) {$/;"	f	file:
ApplyFree	execution_plan/ops/op_apply.c	/^static void ApplyFree(OpBase *opBase) {$/;"	f	file:
ApplyInit	execution_plan/ops/op_apply.c	/^static OpResult ApplyInit(OpBase *opBase) {$/;"	f	file:
ApplyReset	execution_plan/ops/op_apply.c	/^static OpResult ApplyReset(OpBase *opBase) {$/;"	f	file:
Argument	execution_plan/ops/op_argument.h	/^} Argument;$/;"	t	typeref:struct:__anon65
ArgumentClone	execution_plan/ops/op_argument.c	/^static inline OpBase *ArgumentClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ArgumentConsume	execution_plan/ops/op_argument.c	/^static Record ArgumentConsume(OpBase *opBase) {$/;"	f	file:
ArgumentFree	execution_plan/ops/op_argument.c	/^static void ArgumentFree(OpBase *opBase) {$/;"	f	file:
ArgumentReset	execution_plan/ops/op_argument.c	/^static OpResult ArgumentReset(OpBase *opBase) {$/;"	f	file:
Argument_AddRecord	execution_plan/ops/op_argument.c	/^void Argument_AddRecord(Argument *arg, Record r) {$/;"	f
ArithmeticOp_ReverseOp	arithmetic/arithmetic_op.c	/^AST_Operator ArithmeticOp_ReverseOp(AST_Operator op) {$/;"	f
Attribute_ID	graph/entities/graph_entity.h	/^typedef unsigned short Attribute_ID;$/;"	t
AvgFinalize	arithmetic/aggregate_funcs/agg_funcs.c	/^void AvgFinalize(void *ctx_ptr) {$/;"	f
BATCH_SIZE	execution_plan/ops/op_conditional_traverse.c	/^#define BATCH_SIZE /;"	d	file:
BATCH_SIZE	execution_plan/ops/op_expand_into.c	/^#define BATCH_SIZE /;"	d	file:
BFS	algorithms/bfs.c	/^QGNode **BFS(QGNode *s, int *level) {$/;"	f
BFSCtx	procedures/proc_bfs.c	/^} BFSCtx;$/;"	t	typeref:struct:__anon11	file:
BFS_LOWEST_LEVEL	algorithms/bfs.h	/^#define BFS_LOWEST_LEVEL /;"	d
BI_ARRAY	bulk_insert/bulk_insert.c	/^	BI_ARRAY = 5,$/;"	e	enum:__anon151	file:
BI_BOOL	bulk_insert/bulk_insert.c	/^	BI_BOOL = 1,$/;"	e	enum:__anon151	file:
BI_DOUBLE	bulk_insert/bulk_insert.c	/^	BI_DOUBLE = 2,$/;"	e	enum:__anon151	file:
BI_LONG	bulk_insert/bulk_insert.c	/^	BI_LONG = 4,$/;"	e	enum:__anon151	file:
BI_NULL	bulk_insert/bulk_insert.c	/^	BI_NULL = 0,$/;"	e	enum:__anon151	file:
BI_STRING	bulk_insert/bulk_insert.c	/^	BI_STRING = 3,$/;"	e	enum:__anon151	file:
BLACKLIST_OP_COUNT	execution_plan/ops/op.h	/^#define BLACKLIST_OP_COUNT /;"	d
BULKINSERT_H	bulk_insert/bulk_insert.h	/^#define BULKINSERT_H$/;"	d
BULK_FAIL	bulk_insert/bulk_insert.h	/^#define BULK_FAIL /;"	d
BULK_OK	bulk_insert/bulk_insert.h	/^#define BULK_OK /;"	d
BenchmarkDictType	util/dict.c	/^dictType BenchmarkDictType = {$/;"	v
Block	util/block.h	/^typedef struct Block {$/;"	s
Block	util/block.h	/^} Block;$/;"	t	typeref:struct:Block
Block_Free	util/block.c	/^void Block_Free(Block *block) {$/;"	f
Block_New	util/block.c	/^Block *Block_New(uint itemSize, uint capacity) {$/;"	f
BuildQueryGraph	graph/query_graph.c	/^QueryGraph *BuildQueryGraph(const AST *ast) {$/;"	f
BulkCtx	commands/cmd_bulk_insert.c	/^} BulkCtx;$/;"	t	typeref:struct:__anon143	file:
BulkInsert	bulk_insert/bulk_insert.c	/^int BulkInsert(RedisModuleCtx *ctx, GraphContext *gc, RedisModuleString **argv,$/;"	f
BulkInsertContext	commands/cmd_bulk_insert.h	/^} BulkInsertContext;$/;"	t	typeref:struct:__anon145
CACHE_SIZE	configuration/config.c	/^#define CACHE_SIZE /;"	d	file:
CACHE_SIZE_DEFAULT	configuration/config.c	/^#define CACHE_SIZE_DEFAULT /;"	d	file:
CCCOLOR	Makefile	/^CCCOLOR="\\033[34m"$/;"	m
CC_DEPS	Makefile	/^CC_DEPS = $(patsubst %.c, %.d, $(CC_SOURCES) )$/;"	m
CC_OBJECTS	Makefile	/^CC_OBJECTS = $(patsubst %.c, %.o, $(CC_SOURCES) )$/;"	m
CC_SOURCES	Makefile	/^CC_SOURCES = $(wildcard $(SOURCEDIR)\/*.c)$/;"	m
CFLAGS	Makefile	/^CFLAGS = \\$/;"	m
CHILDREN	arithmetic/algebraic_expression/utils.h	/^#define CHILDREN(/;"	d
CHILD_AT	arithmetic/algebraic_expression/utils.h	/^#define CHILD_AT(/;"	d
CLEAR_MSB	graph/graph.h	/^#define CLEAR_MSB(/;"	d
CMD_BULK_INSERT	commands/commands.h	/^	CMD_BULK_INSERT    = 7,$/;"	e	enum:__anon144
CMD_CONFIG	commands/commands.h	/^	CMD_CONFIG         = 4,$/;"	e	enum:__anon144
CMD_DELETE	commands/commands.h	/^	CMD_DELETE         = 3,$/;"	e	enum:__anon144
CMD_EXPLAIN	commands/commands.h	/^	CMD_EXPLAIN        = 5,$/;"	e	enum:__anon144
CMD_LIST	commands/commands.h	/^	CMD_LIST           = 9$/;"	e	enum:__anon144
CMD_PROFILE	commands/commands.h	/^	CMD_PROFILE        = 6,$/;"	e	enum:__anon144
CMD_QUERY	commands/commands.h	/^	CMD_QUERY          = 1,$/;"	e	enum:__anon144
CMD_RO_QUERY	commands/commands.h	/^	CMD_RO_QUERY       = 2,$/;"	e	enum:__anon144
CMD_SLOWLOG	commands/commands.h	/^	CMD_SLOWLOG        = 8,$/;"	e	enum:__anon144
CMD_UNKNOWN	commands/commands.h	/^	CMD_UNKNOWN        = 0,$/;"	e	enum:__anon144
COLUMN_NODE	resultset/formatters/resultset_formatter.h	/^	COLUMN_NODE = 2,      \/\/ Unused, retained for client compatibility.$/;"	e	enum:__anon16
COLUMN_RELATION	resultset/formatters/resultset_formatter.h	/^	COLUMN_RELATION = 3,  \/\/ Unused, retained for client compatibility.$/;"	e	enum:__anon16
COLUMN_SCALAR	resultset/formatters/resultset_formatter.h	/^	COLUMN_SCALAR = 1,$/;"	e	enum:__anon16
COLUMN_UNKNOWN	resultset/formatters/resultset_formatter.h	/^	COLUMN_UNKNOWN = 0,$/;"	e	enum:__anon16
COMPARED_NULL	value.h	/^#define COMPARED_NULL /;"	d
CONFIG_TIMEOUT_NO_TIMEOUT	configuration/config.h	/^#define CONFIG_TIMEOUT_NO_TIMEOUT /;"	d
CONTAINS_NULL	arithmetic/boolean_funcs/boolean_funcs.c	/^#define CONTAINS_NULL /;"	d	file:
CRON	util/cron.c	/^} CRON;$/;"	t	typeref:struct:__anon28	file:
CRON_FreeTask	util/cron.c	/^static void CRON_FreeTask(CRON_TASK *t) {$/;"	f	file:
CRON_InsertTask	util/cron.c	/^static void CRON_InsertTask(CRON_TASK *t) {$/;"	f	file:
CRON_JobCmp	util/cron.c	/^static int CRON_JobCmp(const void *a, const void *b, const void *udata) {$/;"	f	file:
CRON_Peek	util/cron.c	/^static CRON_TASK *CRON_Peek() {$/;"	f	file:
CRON_PerformTask	util/cron.c	/^static void CRON_PerformTask(CRON_TASK *t) {$/;"	f	file:
CRON_RemoveTask	util/cron.c	/^static CRON_TASK *CRON_RemoveTask(void) {$/;"	f	file:
CRON_TASK	util/cron.c	/^} CRON_TASK;$/;"	t	typeref:struct:__anon27	file:
CRON_TaskDue	util/cron.c	/^static bool CRON_TaskDue(const CRON_TASK *t) {$/;"	f	file:
CRON_WakeUp	util/cron.c	/^static void CRON_WakeUp(void) {$/;"	f	file:
Cache	util/cache/cache.h	/^typedef struct Cache {$/;"	s
Cache	util/cache/cache.h	/^} Cache;$/;"	t	typeref:struct:Cache
CacheArray_CleanEntry	util/cache/cache_array.c	/^void CacheArray_CleanEntry(CacheEntry *entry, CacheEntryFreeFunc free_entry) {$/;"	f
CacheArray_FindMinLRU	util/cache/cache_array.c	/^CacheEntry *CacheArray_FindMinLRU(CacheEntry *cache_arr, uint cap) {$/;"	f
CacheArray_PopulateEntry	util/cache/cache_array.c	/^CacheEntry *CacheArray_PopulateEntry(long long counter, CacheEntry *entry, char *key,$/;"	f
CacheEntry	util/cache/cache_array.h	/^} CacheEntry;$/;"	t	typeref:struct:CacheEntry_t
CacheEntryCopyFunc	util/cache/cache_array.h	/^typedef void *(*CacheEntryCopyFunc)(void *);$/;"	t
CacheEntryFreeFunc	util/cache/cache_array.h	/^typedef void (*CacheEntryFreeFunc)(void *);$/;"	t
CacheEntry_t	util/cache/cache_array.h	/^typedef struct CacheEntry_t {$/;"	s
CacheGroup	grouping/group_cache.h	/^typedef rax CacheGroup;$/;"	t
CacheGroupAdd	grouping/group_cache.c	/^void CacheGroupAdd(CacheGroup *groups, char *key, Group *group) {$/;"	f
CacheGroupGet	grouping/group_cache.c	/^Group *CacheGroupGet(CacheGroup *groups, char *key) {$/;"	f
CacheGroupIter	grouping/group_cache.c	/^CacheGroupIterator *CacheGroupIter(CacheGroup *groups) {$/;"	f
CacheGroupIterNext	grouping/group_cache.c	/^int CacheGroupIterNext(CacheGroupIterator *iter, char **key, Group **group) {$/;"	f
CacheGroupIterator	grouping/group_cache.h	/^typedef raxIterator CacheGroupIterator;$/;"	t
CacheGroupIterator_Free	grouping/group_cache.c	/^void CacheGroupIterator_Free(CacheGroupIterator *iter) {$/;"	f
CacheGroupNew	grouping/group_cache.c	/^CacheGroup *CacheGroupNew() {$/;"	f
CacheItemFreeFunc	util/cache/cache_list.h	/^typedef void (*CacheItemFreeFunc)(void *);$/;"	t
CacheList	util/cache/cache_list.h	/^} CacheList;$/;"	t	typeref:struct:__anon20
CacheListNode	util/cache/cache_list.h	/^} CacheListNode;$/;"	t	typeref:struct:CacheListNode_t
CacheListNode_t	util/cache/cache_list.h	/^typedef struct CacheListNode_t {$/;"	s
CacheList_Free	util/cache/cache_list.c	/^void CacheList_Free(CacheList *list) {$/;"	f
CacheList_GetUnused	util/cache/cache_list.c	/^CacheListNode *CacheList_GetUnused(CacheList *list) {$/;"	f
CacheList_IsFull	util/cache/cache_list.c	/^inline bool CacheList_IsFull(const CacheList *list) {$/;"	f
CacheList_New	util/cache/cache_list.c	/^CacheList *CacheList_New(uint size, CacheItemFreeFunc freeCB) {$/;"	f
CacheList_PopulateNode	util/cache/cache_list.c	/^CacheListNode *CacheList_PopulateNode(CacheList *list, CacheListNode *node, char *key,$/;"	f
CacheList_Promote	util/cache/cache_list.c	/^void CacheList_Promote(CacheList *list, CacheListNode *node) {$/;"	f
CacheList_RemoveTail	util/cache/cache_list.c	/^CacheListNode *CacheList_RemoveTail(CacheList *list) {$/;"	f
Cache_Free	util/cache/cache.c	/^void Cache_Free(Cache *cache) {$/;"	f
Cache_GetValue	util/cache/cache.c	/^void *Cache_GetValue(Cache *cache, const char *key) {$/;"	f
Cache_New	util/cache/cache.c	/^Cache *Cache_New(uint cap, CacheEntryFreeFunc freeFunc, CacheEntryCopyFunc copyFunc) {$/;"	f
Cache_SetGetValue	util/cache/cache.c	/^void *Cache_SetGetValue(Cache *cache, const char *key, void *value) {$/;"	f
Cache_SetValue	util/cache/cache.c	/^void Cache_SetValue(Cache *cache, const char *key, void *value) {$/;"	f
CartesianProduct	execution_plan/ops/op_cartesian_product.h	/^} CartesianProduct;$/;"	t	typeref:struct:__anon72
CartesianProductClone	execution_plan/ops/op_cartesian_product.c	/^static OpBase *CartesianProductClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
CartesianProductConsume	execution_plan/ops/op_cartesian_product.c	/^static Record CartesianProductConsume(OpBase *opBase) {$/;"	f	file:
CartesianProductFree	execution_plan/ops/op_cartesian_product.c	/^static void CartesianProductFree(OpBase *opBase) {$/;"	f	file:
CartesianProductInit	execution_plan/ops/op_cartesian_product.c	/^static OpResult CartesianProductInit(OpBase *opBase) {$/;"	f	file:
CartesianProductReset	execution_plan/ops/op_cartesian_product.c	/^static OpResult CartesianProductReset(OpBase *opBase) {$/;"	f	file:
ColumnType	resultset/formatters/resultset_formatter.h	/^} ColumnType;$/;"	t	typeref:enum:__anon16
CommandCtx	commands/cmd_context.h	/^} CommandCtx;$/;"	t	typeref:struct:__anon148
CommandCtx_Free	commands/cmd_context.c	/^void CommandCtx_Free(CommandCtx *command_ctx) {$/;"	f
CommandCtx_GetBlockingClient	commands/cmd_context.c	/^RedisModuleBlockedClient *CommandCtx_GetBlockingClient(const CommandCtx *command_ctx) {$/;"	f
CommandCtx_GetCommandName	commands/cmd_context.c	/^const char *CommandCtx_GetCommandName(const CommandCtx *command_ctx) {$/;"	f
CommandCtx_GetGraphContext	commands/cmd_context.c	/^GraphContext *CommandCtx_GetGraphContext(const CommandCtx *command_ctx) {$/;"	f
CommandCtx_GetQuery	commands/cmd_context.c	/^const char *CommandCtx_GetQuery(const CommandCtx *command_ctx) {$/;"	f
CommandCtx_GetRedisCtx	commands/cmd_context.c	/^RedisModuleCtx *CommandCtx_GetRedisCtx(CommandCtx *command_ctx) {$/;"	f
CommandCtx_New	commands/cmd_context.c	/^CommandCtx *CommandCtx_New$/;"	f
CommandCtx_ThreadSafeContextLock	commands/cmd_context.c	/^void CommandCtx_ThreadSafeContextLock(const CommandCtx *command_ctx) {$/;"	f
CommandCtx_ThreadSafeContextUnlock	commands/cmd_context.c	/^void CommandCtx_ThreadSafeContextUnlock(const CommandCtx *command_ctx) {$/;"	f
CommandCtx_TrackCtx	commands/cmd_context.c	/^void CommandCtx_TrackCtx(CommandCtx *ctx) {$/;"	f
CommandCtx_UntrackCtx	commands/cmd_context.c	/^void CommandCtx_UntrackCtx(CommandCtx *ctx) {$/;"	f
CommandDispatch	commands/cmd_dispatcher.c	/^int CommandDispatch(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Command_Handler	commands/cmd_dispatcher.c	/^typedef void(*Command_Handler)(void *args);$/;"	t	file:
CommitNewEntities	execution_plan/ops/shared/create_functions.c	/^void CommitNewEntities(OpBase *op, PendingCreations *pending) {$/;"	f
CommitUpdates	execution_plan/ops/shared/update_functions.c	/^void CommitUpdates(GraphContext *gc, ResultSetStatistics *stats,$/;"	f
CondTraverseClone	execution_plan/ops/op_conditional_traverse.c	/^static inline OpBase *CondTraverseClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
CondTraverseConsume	execution_plan/ops/op_conditional_traverse.c	/^static Record CondTraverseConsume(OpBase *opBase) {$/;"	f	file:
CondTraverseFree	execution_plan/ops/op_conditional_traverse.c	/^static void CondTraverseFree(OpBase *ctx) {$/;"	f	file:
CondTraverseInit	execution_plan/ops/op_conditional_traverse.c	/^static OpResult CondTraverseInit(OpBase *opBase) {$/;"	f	file:
CondTraverseReset	execution_plan/ops/op_conditional_traverse.c	/^static OpResult CondTraverseReset(OpBase *ctx) {$/;"	f	file:
CondTraverseToString	execution_plan/ops/op_conditional_traverse.c	/^static int CondTraverseToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
CondVarLenTraverse	execution_plan/ops/op_cond_var_len_traverse.h	/^} CondVarLenTraverse;$/;"	t	typeref:struct:__anon47
CondVarLenTraverseClone	execution_plan/ops/op_cond_var_len_traverse.c	/^static OpBase *CondVarLenTraverseClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
CondVarLenTraverseConsume	execution_plan/ops/op_cond_var_len_traverse.c	/^static Record CondVarLenTraverseConsume(OpBase *opBase) {$/;"	f	file:
CondVarLenTraverseFree	execution_plan/ops/op_cond_var_len_traverse.c	/^static void CondVarLenTraverseFree(OpBase *ctx) {$/;"	f	file:
CondVarLenTraverseOp_ExpandInto	execution_plan/ops/op_cond_var_len_traverse.c	/^void CondVarLenTraverseOp_ExpandInto(CondVarLenTraverse *op) {$/;"	f
CondVarLenTraverseOp_SetFilter	execution_plan/ops/op_cond_var_len_traverse.c	/^inline void CondVarLenTraverseOp_SetFilter(CondVarLenTraverse *op,$/;"	f
CondVarLenTraverseReset	execution_plan/ops/op_cond_var_len_traverse.c	/^static OpResult CondVarLenTraverseReset(OpBase *ctx) {$/;"	f	file:
CondVarLenTraverseToString	execution_plan/ops/op_cond_var_len_traverse.c	/^static inline int CondVarLenTraverseToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
Config_ASYNC_DELETE	configuration/config.h	/^	Config_ASYNC_DELETE             = 2,  \/\/ delete graph asynchronously$/;"	e	enum:__anon12
Config_CACHE_SIZE	configuration/config.h	/^	Config_CACHE_SIZE               = 1,  \/\/ number of entries in cache$/;"	e	enum:__anon12
Config_Contains_field	configuration/config.c	/^bool Config_Contains_field(const char *field_str, Config_Option_Field *field)$/;"	f
Config_END_MARKER	configuration/config.h	/^	Config_END_MARKER               = 11$/;"	e	enum:__anon12
Config_Field_name	configuration/config.c	/^const char *Config_Field_name(Config_Option_Field field) {$/;"	f
Config_Init	configuration/config.c	/^int Config_Init(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Config_MAINTAIN_TRANSPOSE	configuration/config.h	/^	Config_MAINTAIN_TRANSPOSE       = 6,  \/\/ maintain transpose matrices$/;"	e	enum:__anon12
Config_MAX_QUEUED_QUERIES	configuration/config.h	/^	Config_MAX_QUEUED_QUERIES       = 8,  \/\/ max number of queued queries$/;"	e	enum:__anon12
Config_NODE_CREATION_BUFFER	configuration/config.h	/^	Config_NODE_CREATION_BUFFER     = 10, \/\/ whether we should reserve space for future node creations$/;"	e	enum:__anon12
Config_OMP_thread_count_get	configuration/config.c	/^uint Config_OMP_thread_count_get(void) {$/;"	f
Config_OMP_thread_count_set	configuration/config.c	/^void Config_OMP_thread_count_set(uint nthreads) {$/;"	f
Config_OPENMP_NTHREAD	configuration/config.h	/^	Config_OPENMP_NTHREAD           = 3,  \/\/ max number of OpenMP threads to use$/;"	e	enum:__anon12
Config_Option_Field	configuration/config.h	/^} Config_Option_Field;$/;"	t	typeref:enum:__anon12
Config_Option_get	configuration/config.c	/^bool Config_Option_get(Config_Option_Field field, ...) {$/;"	f
Config_Option_set	configuration/config.c	/^bool Config_Option_set(Config_Option_Field field, const char *val) {$/;"	f
Config_QUERY_MEM_CAPACITY	configuration/config.h	/^	Config_QUERY_MEM_CAPACITY       = 9,  \/\/ max mem(bytes) that query\/thread can utilize at any given time$/;"	e	enum:__anon12
Config_RESULTSET_MAX_SIZE	configuration/config.h	/^	Config_RESULTSET_MAX_SIZE       = 5,  \/\/ max number of records in result-set$/;"	e	enum:__anon12
Config_Subscribe_Changes	configuration/config.c	/^void Config_Subscribe_Changes(Config_on_change cb) {$/;"	f
Config_THREAD_POOL_SIZE	configuration/config.h	/^	Config_THREAD_POOL_SIZE         = 4,  \/\/ number of threads in thread pool$/;"	e	enum:__anon12
Config_TIMEOUT	configuration/config.h	/^	Config_TIMEOUT                  = 0,  \/\/ timeout value for queries$/;"	e	enum:__anon12
Config_VKEY_MAX_ENTITY_COUNT	configuration/config.h	/^	Config_VKEY_MAX_ENTITY_COUNT    = 7,  \/\/ max number of elements in vkey$/;"	e	enum:__anon12
Config_async_delete_get	configuration/config.c	/^bool Config_async_delete_get(void) {$/;"	f
Config_async_delete_set	configuration/config.c	/^void Config_async_delete_set(bool async_delete) {$/;"	f
Config_cache_size_get	configuration/config.c	/^uint64_t Config_cache_size_get(void) {$/;"	f
Config_cache_size_set	configuration/config.c	/^void Config_cache_size_set(uint64_t cache_size) {$/;"	f
Config_maintain_transpose_get	configuration/config.c	/^bool Config_maintain_transpose_get(void) {$/;"	f
Config_maintain_transpose_set	configuration/config.c	/^void Config_maintain_transpose_set(bool maintain) {$/;"	f
Config_max_queued_queries_get	configuration/config.c	/^uint Config_max_queued_queries_get(void) {$/;"	f
Config_max_queued_queries_set	configuration/config.c	/^void Config_max_queued_queries_set(uint64_t max_queued_queries) {$/;"	f
Config_node_creation_buffer_get	configuration/config.c	/^bool Config_node_creation_buffer_get(void) {$/;"	f
Config_node_creation_buffer_set	configuration/config.c	/^void Config_node_creation_buffer_set(bool buffer) {$/;"	f
Config_on_change	configuration/config.h	/^typedef void (*Config_on_change)(Config_Option_Field type);$/;"	t
Config_query_mem_capacity_get	configuration/config.c	/^uint64_t Config_query_mem_capacity_get(void)$/;"	f
Config_query_mem_capacity_set	configuration/config.c	/^void Config_query_mem_capacity_set(int64_t capacity)$/;"	f
Config_resultset_max_size_get	configuration/config.c	/^uint64_t Config_resultset_max_size_get(void) {$/;"	f
Config_resultset_max_size_set	configuration/config.c	/^void Config_resultset_max_size_set(int64_t max_size) {$/;"	f
Config_thread_pool_size_get	configuration/config.c	/^uint Config_thread_pool_size_get(void) {$/;"	f
Config_thread_pool_size_set	configuration/config.c	/^void Config_thread_pool_size_set(uint nthreads) {$/;"	f
Config_timeout_get	configuration/config.c	/^uint Config_timeout_get(void) {$/;"	f
Config_timeout_set	configuration/config.c	/^void Config_timeout_set(uint64_t timeout) {$/;"	f
Config_virtual_key_entity_count_get	configuration/config.c	/^uint64_t Config_virtual_key_entity_count_get(void) {$/;"	f
Config_virtual_key_entity_count_set	configuration/config.c	/^void Config_virtual_key_entity_count_set(uint64_t entity_count) {$/;"	f
ConvertPropertyMap	execution_plan/ops/shared/create_functions.c	/^PendingProperties *ConvertPropertyMap(Record r, PropertyMap *map, bool fail_on_null) {$/;"	f
CreateClone	execution_plan/ops/op_create.c	/^static OpBase *CreateClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
CreateConsume	execution_plan/ops/op_create.c	/^static Record CreateConsume(OpBase *opBase) {$/;"	f	file:
CreateFree	execution_plan/ops/op_create.c	/^static void CreateFree(OpBase *ctx) {$/;"	f	file:
CronTaskCB	util/cron.h	/^typedef void (*CronTaskCB)(void *pdata);$/;"	t
Cron_AddTask	util/cron.c	/^void Cron_AddTask(uint when, CronTaskCB cb, void *pdata) {$/;"	f
Cron_Run	util/cron.c	/^static void *Cron_Run(void *arg) {$/;"	f	file:
Cron_Start	util/cron.c	/^void Cron_Start(void) {$/;"	f
Cron_Stop	util/cron.c	/^void Cron_Stop(void) {$/;"	f
CypherWhitelist_Build	ast/cypher_whitelist.c	/^void CypherWhitelist_Build() {$/;"	f
CypherWhitelist_ValidateQuery	ast/cypher_whitelist.c	/^AST_Validation CypherWhitelist_ValidateQuery(const cypher_astnode_t *root) {$/;"	f
DAMPING	algorithms/pagerank.c	/^#define DAMPING /;"	d	file:
DATABLOCK_BLOCK_CAP	util/datablock/datablock.h	/^#define DATABLOCK_BLOCK_CAP /;"	d
DEBUGFLAGS	Makefile	/^	DEBUGFLAGS = -fno-omit-frame-pointer -g -ggdb -O0$/;"	m
DEBUGFLAGS	Makefile	/^DEBUGFLAGS = -g -ggdb -O3$/;"	m
DEFAULT_CAPACITY	util/heap.c	/^#define DEFAULT_CAPACITY /;"	d	file:
DFS	algorithms/dfs.c	/^QGEdge **DFS(QGNode *s, int level, bool close_cycle) {$/;"	f
DICT_ERR	util/dict.h	/^#define DICT_ERR /;"	d
DICT_HT_INITIAL_SIZE	util/dict.h	/^#define DICT_HT_INITIAL_SIZE /;"	d
DICT_NOTUSED	util/dict.h	/^#define DICT_NOTUSED(/;"	d
DICT_OK	util/dict.h	/^#define DICT_OK /;"	d
DICT_STATS_VECTLEN	util/dict.c	/^#define DICT_STATS_VECTLEN /;"	d	file:
DIR_ASC	ast/ast_build_op_contexts.h	/^#define DIR_ASC /;"	d
DIR_DESC	ast/ast_build_op_contexts.h	/^#define DIR_DESC /;"	d
DISABLED	graph/graph.h	/^	DISABLED,$/;"	e	enum:__anon83
DISJOINT	value.h	/^#define DISJOINT /;"	d
DRS_FORCE_NO_GITVERSION	Makefile	/^	cmake -DRS_FORCE_NO_GITVERSION=ON -DRS_BUILD_STATIC=ON ..; \\$/;"	m
DataBlock	util/datablock/datablock.h	/^} DataBlock;$/;"	t	typeref:struct:__anon23
DataBlockItemHeader	util/datablock/datablock.h	/^} DataBlockItemHeader;$/;"	t	typeref:struct:__anon24
DataBlockIterator	util/datablock/datablock_iterator.h	/^} DataBlockIterator;$/;"	t	typeref:struct:__anon25
DataBlockIterator_Clone	util/datablock/datablock_iterator.c	/^DataBlockIterator *DataBlockIterator_Clone(const DataBlockIterator *it) {$/;"	f
DataBlockIterator_Free	util/datablock/datablock_iterator.c	/^void DataBlockIterator_Free(DataBlockIterator *iter) {$/;"	f
DataBlockIterator_New	util/datablock/datablock_iterator.c	/^DataBlockIterator *DataBlockIterator_New(Block *block, uint64_t start_pos, uint64_t end_pos, uint step) {$/;"	f
DataBlockIterator_Next	util/datablock/datablock_iterator.c	/^void *DataBlockIterator_Next(DataBlockIterator *iter, uint64_t *id) {$/;"	f
DataBlockIterator_Position	util/datablock/datablock_iterator.h	/^#define DataBlockIterator_Position(/;"	d
DataBlockIterator_Reset	util/datablock/datablock_iterator.c	/^void DataBlockIterator_Reset(DataBlockIterator *iter) {$/;"	f
DataBlock_Accommodate	util/datablock/datablock.c	/^void DataBlock_Accommodate(DataBlock *dataBlock, int64_t k) {$/;"	f
DataBlock_AllocateItem	util/datablock/datablock.c	/^void *DataBlock_AllocateItem(DataBlock *dataBlock, uint64_t *idx) {$/;"	f
DataBlock_AllocateItemOutOfOrder	util/datablock/oo_datablock.c	/^inline void *DataBlock_AllocateItemOutOfOrder(DataBlock *dataBlock, uint64_t idx) {$/;"	f
DataBlock_DeleteItem	util/datablock/datablock.c	/^void DataBlock_DeleteItem(DataBlock *dataBlock, uint64_t idx) {$/;"	f
DataBlock_DeletedItemsCount	util/datablock/datablock.c	/^uint DataBlock_DeletedItemsCount(const DataBlock *dataBlock) {$/;"	f
DataBlock_Free	util/datablock/datablock.c	/^void DataBlock_Free(DataBlock *dataBlock) {$/;"	f
DataBlock_GetItem	util/datablock/datablock.c	/^void *DataBlock_GetItem(const DataBlock *dataBlock, uint64_t idx) {$/;"	f
DataBlock_GetItemHeader	util/datablock/datablock.c	/^static inline DataBlockItemHeader *DataBlock_GetItemHeader(const DataBlock *dataBlock,$/;"	f	file:
DataBlock_GetItemHeader	util/datablock/oo_datablock.c	/^static inline DataBlockItemHeader *DataBlock_GetItemHeader(const DataBlock *dataBlock,$/;"	f	file:
DataBlock_ItemCount	util/datablock/datablock.c	/^uint64_t DataBlock_ItemCount(const DataBlock *dataBlock) {$/;"	f
DataBlock_ItemIsDeleted	util/datablock/datablock.c	/^inline bool DataBlock_ItemIsDeleted(void *item) {$/;"	f
DataBlock_MarkAsDeletedOutOfOrder	util/datablock/oo_datablock.c	/^inline void DataBlock_MarkAsDeletedOutOfOrder(DataBlock *dataBlock, uint64_t idx) {$/;"	f
DataBlock_New	util/datablock/datablock.c	/^DataBlock *DataBlock_New(uint64_t itemCap, uint itemSize, fpDestructor fp) {$/;"	f
DataBlock_Scan	util/datablock/datablock.c	/^DataBlockIterator *DataBlock_Scan(const DataBlock *dataBlock) {$/;"	f
Decode_Previous	serializers/decoders/decode_previous.c	/^GraphContext *Decode_Previous(RedisModuleIO *rdb, int encver) {$/;"	f
DegreeToRadians	arithmetic/point_funcs/point_funcs.c	/^#define DegreeToRadians(/;"	d	file:
DeleteClone	execution_plan/ops/op_delete.c	/^static OpBase *DeleteClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
DeleteConsume	execution_plan/ops/op_delete.c	/^static Record DeleteConsume(OpBase *opBase) {$/;"	f	file:
DeleteFree	execution_plan/ops/op_delete.c	/^static void DeleteFree(OpBase *ctx) {$/;"	f	file:
DeleteInit	execution_plan/ops/op_delete.c	/^static OpResult DeleteInit(OpBase *opBase) {$/;"	f	file:
DistinctClone	execution_plan/ops/op_distinct.c	/^static inline OpBase *DistinctClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
DistinctConsume	execution_plan/ops/op_distinct.c	/^static Record DistinctConsume(OpBase *opBase) {$/;"	f	file:
DistinctFree	execution_plan/ops/op_distinct.c	/^static void DistinctFree(OpBase *ctx) {$/;"	f	file:
DistinctInit	execution_plan/ops/op_distinct.c	/^static OpResult DistinctInit(OpBase *opBase) {$/;"	f	file:
EAGER_OPERATIONS	execution_plan/ops/op.h	/^static const OPType EAGER_OPERATIONS[] = {OPType_AGGREGATE, OPType_CREATE, OPType_UPDATE, OPType_DELETE, OPType_MERGE};$/;"	v
EAGER_OP_COUNT	execution_plan/ops/op.h	/^#define EAGER_OP_COUNT /;"	d
EARTH_RADIUS	arithmetic/point_funcs/point_funcs.c	/^#define EARTH_RADIUS /;"	d	file:
EDGE_LENGTH_INF	graph/entities/edge.h	/^#define EDGE_LENGTH_INF /;"	d
ENCODE_STATE_DELETED_EDGES	serializers/encode_context.h	/^	ENCODE_STATE_DELETED_EDGES, \/\/ encoding deleted edges$/;"	e	enum:__anon105
ENCODE_STATE_DELETED_NODES	serializers/encode_context.h	/^	ENCODE_STATE_DELETED_NODES, \/\/ encoding deleted nodes$/;"	e	enum:__anon105
ENCODE_STATE_EDGES	serializers/encode_context.h	/^	ENCODE_STATE_EDGES,         \/\/ encoding edges$/;"	e	enum:__anon105
ENCODE_STATE_FINAL	serializers/encode_context.h	/^	ENCODE_STATE_FINAL          \/\/ encoding final state$/;"	e	enum:__anon105
ENCODE_STATE_GRAPH_SCHEMA	serializers/encode_context.h	/^	ENCODE_STATE_GRAPH_SCHEMA,  \/\/ encoding graph schemas$/;"	e	enum:__anon105
ENCODE_STATE_INIT	serializers/encode_context.h	/^	ENCODE_STATE_INIT,          \/\/ encoding initial state$/;"	e	enum:__anon105
ENCODE_STATE_NODES	serializers/encode_context.h	/^	ENCODE_STATE_NODES,         \/\/ encoding nodes$/;"	e	enum:__anon105
ENDCOLOR	Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
ENTITY_EDGE	graph/query_graph.h	/^	ENTITY_EDGE,$/;"	e	enum:__anon81
ENTITY_GET_ID	graph/entities/graph_entity.h	/^#define ENTITY_GET_ID(/;"	d
ENTITY_ID	graph/entities/graph_entity.h	/^	ENTITY_ID = 1,                       \/\/ print id only$/;"	e	enum:__anon86
ENTITY_ID_ISLT	graph/entities/graph_entity.h	/^#define ENTITY_ID_ISLT(/;"	d
ENTITY_LABELS_OR_RELATIONS	graph/entities/graph_entity.h	/^	ENTITY_LABELS_OR_RELATIONS = 1 << 1, \/\/ print label or relationship type$/;"	e	enum:__anon86
ENTITY_NODE	graph/query_graph.h	/^	ENTITY_NODE,$/;"	e	enum:__anon81
ENTITY_PROPERTIES	graph/entities/graph_entity.h	/^	ENTITY_PROPERTIES = 1 << 2           \/\/ print properties$/;"	e	enum:__anon86
ENTITY_PROPS	graph/entities/graph_entity.h	/^#define ENTITY_PROPS(/;"	d
ENTITY_PROP_COUNT	graph/entities/graph_entity.h	/^#define ENTITY_PROP_COUNT(/;"	d
ENTITY_UNKNOWN	graph/query_graph.h	/^	ENTITY_UNKNOWN,$/;"	e	enum:__anon81
EVAL_ERR	arithmetic/arithmetic_expression.h	/^	EVAL_ERR = (1 << 0),$/;"	e	enum:__anon110
EVAL_FOUND_PARAM	arithmetic/arithmetic_expression.h	/^	EVAL_FOUND_PARAM = (1 << 1),$/;"	e	enum:__anon110
EVAL_OK	arithmetic/arithmetic_expression.h	/^	EVAL_OK = 0,$/;"	e	enum:__anon110
EXECUTION_TYPE_INDEX_CREATE	commands/execution_ctx.h	/^	EXECUTION_TYPE_INDEX_CREATE,    \/\/ Create index execution.$/;"	e	enum:__anon149
EXECUTION_TYPE_INDEX_DROP	commands/execution_ctx.h	/^	EXECUTION_TYPE_INDEX_DROP       \/\/ Drop index execution.$/;"	e	enum:__anon149
EXECUTION_TYPE_INVALID	commands/execution_ctx.h	/^	EXECUTION_TYPE_INVALID,         \/\/ Execution is not valid due to invalid query.$/;"	e	enum:__anon149
EXECUTION_TYPE_QUERY	commands/execution_ctx.h	/^	EXECUTION_TYPE_QUERY,           \/\/ Normal query execution.$/;"	e	enum:__anon149
EXEC_THREAD_MAIN	commands/cmd_context.h	/^	EXEC_THREAD_MAIN,    \/\/ redis main thread$/;"	e	enum:__anon147
EXEC_THREAD_READER	commands/cmd_context.h	/^	EXEC_THREAD_READER,  \/\/ read only thread$/;"	e	enum:__anon147
EXEC_THREAD_WRITER	commands/cmd_context.h	/^	EXEC_THREAD_WRITER,  \/\/ write only thread$/;"	e	enum:__anon147
Edge	graph/entities/edge.h	/^struct Edge {$/;"	s
Edge	graph/entities/edge.h	/^typedef struct Edge Edge;$/;"	t	typeref:struct:Edge
EdgeCreateCtx	ast/ast_shared.h	/^} EdgeCreateCtx;$/;"	t	typeref:struct:__anon137
EdgeCreateCtx_Clone	ast/ast_shared.c	/^EdgeCreateCtx EdgeCreateCtx_Clone(EdgeCreateCtx ctx) {$/;"	f
EdgeID	graph/entities/graph_entity.h	/^typedef GrB_Index EdgeID;$/;"	t
EdgeTraverseCtx	execution_plan/ops/shared/traverse_functions.h	/^} EdgeTraverseCtx;$/;"	t	typeref:struct:__anon58
Edge_Free	graph/entities/edge.c	/^void Edge_Free(Edge *edge) {$/;"	f
Edge_GetDestNode	graph/entities/edge.c	/^Node *Edge_GetDestNode(Edge *e) {$/;"	f
Edge_GetDestNodeID	graph/entities/edge.c	/^NodeID Edge_GetDestNodeID(const Edge *edge) {$/;"	f
Edge_GetMatrix	graph/entities/edge.c	/^GrB_Matrix Edge_GetMatrix(Edge *e) {$/;"	f
Edge_GetRelationID	graph/entities/edge.c	/^int Edge_GetRelationID(const Edge *edge) {$/;"	f
Edge_GetSrcNode	graph/entities/edge.c	/^Node *Edge_GetSrcNode(Edge *e) {$/;"	f
Edge_GetSrcNodeID	graph/entities/edge.c	/^NodeID Edge_GetSrcNodeID(const Edge *edge) {$/;"	f
Edge_SetDestNode	graph/entities/edge.c	/^void Edge_SetDestNode(Edge *e, Node *dest) {$/;"	f
Edge_SetRelationID	graph/entities/edge.c	/^void Edge_SetRelationID(Edge *e, int relationID) {$/;"	f
Edge_SetSrcNode	graph/entities/edge.c	/^void Edge_SetSrcNode(Edge *e, Node *src) {$/;"	f
Edge_ToString	graph/entities/edge.c	/^void Edge_ToString(const Edge *e, char **buffer, size_t *bufferLen, size_t *bytesWritten,$/;"	f
EmitHeader	resultset/formatters/resultset_formatter.h	/^	EmitHeaderFunc EmitHeader;$/;"	m	struct:__anon18
EmitHeaderFunc	resultset/formatters/resultset_formatter.h	/^typedef void (*EmitHeaderFunc)(RedisModuleCtx *ctx, const char **columns,$/;"	t
EmitRow	resultset/formatters/resultset_formatter.h	/^	EmitRowFunc    EmitRow;$/;"	m	struct:__anon18
EmitRowFunc	resultset/formatters/resultset_formatter.h	/^typedef void (*EmitRowFunc)(RedisModuleCtx *ctx, GraphContext *gc,$/;"	t
EncodeState	serializers/encode_context.h	/^} EncodeState;$/;"	t	typeref:enum:__anon105
Entity	graph/entities/graph_entity.h	/^} Entity;$/;"	t	typeref:struct:__anon88
EntityID	graph/entities/graph_entity.h	/^typedef GrB_Index EntityID;$/;"	t
EntityProperty	graph/entities/graph_entity.h	/^} EntityProperty;$/;"	t	typeref:struct:__anon87
EntityType	graph/query_graph.h	/^} EntityType;$/;"	t	typeref:enum:__anon81
EntityUpdateEvalCtx	ast/ast_shared.h	/^} EntityUpdateEvalCtx;$/;"	t	typeref:struct:__anon136
Entry	execution_plan/record.h	/^} Entry;$/;"	t	typeref:struct:__anon34
ErrorCtx	errors.h	/^} ErrorCtx;$/;"	t	typeref:struct:__anon95
ErrorCtx_Clear	errors.c	/^void ErrorCtx_Clear(void) {$/;"	f
ErrorCtx_EmitException	errors.c	/^void ErrorCtx_EmitException(void) {$/;"	f
ErrorCtx_EncounteredError	errors.c	/^inline bool ErrorCtx_EncounteredError(void) {$/;"	f
ErrorCtx_Get	errors.c	/^ErrorCtx *ErrorCtx_Get(void) {$/;"	f
ErrorCtx_Init	errors.c	/^bool ErrorCtx_Init(void) {$/;"	f
ErrorCtx_RaiseRuntimeException	errors.c	/^void ErrorCtx_RaiseRuntimeException(const char *err_fmt, ...) {$/;"	f
ErrorCtx_SetError	errors.c	/^void ErrorCtx_SetError(const char *err_fmt, ...) {$/;"	f
Error_InvalidFilterPlacement	errors.c	/^void Error_InvalidFilterPlacement(rax *entitiesRax) {$/;"	f
Error_InvalidPropertyValue	errors.c	/^inline void Error_InvalidPropertyValue(void) {$/;"	f
Error_SITypeMismatch	errors.c	/^void Error_SITypeMismatch(SIValue received, SIType expected) {$/;"	f
Error_UnsupportedASTNodeType	errors.c	/^void Error_UnsupportedASTNodeType(const cypher_astnode_t *node) {$/;"	f
Error_UnsupportedASTOperator	errors.c	/^void Error_UnsupportedASTOperator(const cypher_operator_t *op) {$/;"	f
EvalEntityUpdates	execution_plan/ops/shared/update_functions.c	/^void EvalEntityUpdates(GraphContext *gc, PendingUpdateCtx **updates, const Record r,$/;"	f
ExecutionCtx	commands/execution_ctx.h	/^} ExecutionCtx;$/;"	t	typeref:struct:__anon150
ExecutionCtx_Clone	commands/execution_ctx.c	/^ExecutionCtx *ExecutionCtx_Clone(ExecutionCtx *orig) {$/;"	f
ExecutionCtx_Free	commands/execution_ctx.c	/^void ExecutionCtx_Free(ExecutionCtx *ctx) {$/;"	f
ExecutionCtx_FromQuery	commands/execution_ctx.c	/^ExecutionCtx *ExecutionCtx_FromQuery(const char *query) {$/;"	f
ExecutionPlan	execution_plan/execution_plan.h	/^struct ExecutionPlan {$/;"	s
ExecutionPlan	execution_plan/execution_plan.h	/^typedef struct ExecutionPlan ExecutionPlan;$/;"	t	typeref:struct:ExecutionPlan
ExecutionPlan	execution_plan/execution_plan_build/execution_plan_modify.h	/^typedef struct ExecutionPlan ExecutionPlan;$/;"	t	typeref:struct:ExecutionPlan
ExecutionPlanSegment_ConvertClause	execution_plan/execution_plan_build/execution_plan_construct.c	/^void ExecutionPlanSegment_ConvertClause(GraphContext *gc, AST *ast, ExecutionPlan *plan,$/;"	f
ExecutionPlan_AddOp	execution_plan/execution_plan_build/execution_plan_modify.c	/^inline void ExecutionPlan_AddOp(OpBase *parent, OpBase *newOp) {$/;"	f
ExecutionPlan_BindPlanToOps	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_BindPlanToOps(ExecutionPlan *plan, OpBase *root) {$/;"	f
ExecutionPlan_BorrowRecord	execution_plan/execution_plan.c	/^Record ExecutionPlan_BorrowRecord(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_BoundVariables	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_BoundVariables(const OpBase *op, rax *modifiers) {$/;"	f
ExecutionPlan_BuildOpsFromPath	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase *ExecutionPlan_BuildOpsFromPath(ExecutionPlan *plan, const char **bound_vars,$/;"	f
ExecutionPlan_Clone	execution_plan/execution_plan_clone.c	/^ExecutionPlan *ExecutionPlan_Clone(const ExecutionPlan *template) {$/;"	f
ExecutionPlan_CollectOps	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase **ExecutionPlan_CollectOps(OpBase *root, OPType type) {$/;"	f
ExecutionPlan_CollectOpsMatchingType	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase **ExecutionPlan_CollectOpsMatchingType(OpBase *root, const OPType *types, uint type_count) {$/;"	f
ExecutionPlan_DecRefCount	execution_plan/execution_plan.c	/^int ExecutionPlan_DecRefCount(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_DetachOp	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_DetachOp(OpBase *op) {$/;"	f
ExecutionPlan_Drain	execution_plan/execution_plan.c	/^void ExecutionPlan_Drain(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_Drained	execution_plan/execution_plan.c	/^bool ExecutionPlan_Drained(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_Execute	execution_plan/execution_plan.c	/^ResultSet *ExecutionPlan_Execute(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_Free	execution_plan/execution_plan.c	/^void ExecutionPlan_Free(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_GetMappings	execution_plan/execution_plan.c	/^inline rax *ExecutionPlan_GetMappings(const ExecutionPlan *plan) {$/;"	f
ExecutionPlan_IncreaseRefCount	execution_plan/execution_plan.c	/^void ExecutionPlan_IncreaseRefCount(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_Init	execution_plan/execution_plan.c	/^void ExecutionPlan_Init(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_LocateOp	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase *ExecutionPlan_LocateOp(OpBase *root, OPType type) {$/;"	f
ExecutionPlan_LocateOpMatchingType	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase *ExecutionPlan_LocateOpMatchingType(OpBase *root, const OPType *types, uint type_count) {$/;"	f
ExecutionPlan_LocateOpResolvingAlias	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase *ExecutionPlan_LocateOpResolvingAlias(OpBase *root, const char *alias) {$/;"	f
ExecutionPlan_LocateReferences	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase *ExecutionPlan_LocateReferences(OpBase *root, const OpBase *recurse_limit,$/;"	f
ExecutionPlan_LocateReferencesExcludingOps	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase *ExecutionPlan_LocateReferencesExcludingOps(OpBase *root,$/;"	f
ExecutionPlan_LocateTaps	execution_plan/execution_plan_build/execution_plan_modify.c	/^OpBase **ExecutionPlan_LocateTaps(const ExecutionPlan *plan) {$/;"	f
ExecutionPlan_NewEmptyExecutionPlan	execution_plan/execution_plan.c	/^inline ExecutionPlan *ExecutionPlan_NewEmptyExecutionPlan(void) {$/;"	f
ExecutionPlan_NewRoot	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_NewRoot(OpBase *old_root, OpBase *new_root) {$/;"	f
ExecutionPlan_PlaceFilterOps	execution_plan/execution_plan_build/execution_plan_construct.c	/^void ExecutionPlan_PlaceFilterOps(ExecutionPlan *plan, OpBase *root, const OpBase *recurse_limit,$/;"	f
ExecutionPlan_PopulateExecutionPlan	execution_plan/execution_plan.c	/^void ExecutionPlan_PopulateExecutionPlan(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_PreparePlan	execution_plan/execution_plan.c	/^void ExecutionPlan_PreparePlan(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_Print	execution_plan/execution_plan_debug.c	/^void ExecutionPlan_Print(const ExecutionPlan *plan, RedisModuleCtx *ctx) {$/;"	f
ExecutionPlan_Profile	execution_plan/execution_plan.c	/^ResultSet *ExecutionPlan_Profile(ExecutionPlan *plan) {$/;"	f
ExecutionPlan_PushBelow	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_PushBelow(OpBase *a, OpBase *b) {$/;"	f
ExecutionPlan_RePositionFilterOp	execution_plan/execution_plan_build/execution_plan_construct.c	/^void ExecutionPlan_RePositionFilterOp(ExecutionPlan *plan, OpBase *lower_bound,$/;"	f
ExecutionPlan_ReduceFilterToApply	execution_plan/execution_plan_build/reduce_to_apply.c	/^void ExecutionPlan_ReduceFilterToApply(ExecutionPlan *plan, OpFilter *filter) {$/;"	f
ExecutionPlan_RemoveOp	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_RemoveOp(ExecutionPlan *plan, OpBase *op) {$/;"	f
ExecutionPlan_ReplaceOp	execution_plan/execution_plan_build/execution_plan_modify.c	/^void ExecutionPlan_ReplaceOp(ExecutionPlan *plan, OpBase *a, OpBase *b) {$/;"	f
ExecutionPlan_ReturnRecord	execution_plan/execution_plan.c	/^void ExecutionPlan_ReturnRecord(ExecutionPlan *plan, Record r) {$/;"	f
ExecutionPlan_UpdateRoot	execution_plan/execution_plan_build/execution_plan_modify.c	/^inline void ExecutionPlan_UpdateRoot(ExecutionPlan *plan, OpBase *new_root) {$/;"	f
ExecutionType	commands/execution_ctx.h	/^} ExecutionType;$/;"	t	typeref:enum:__anon149
ExecutorThread	commands/cmd_context.h	/^} ExecutorThread;$/;"	t	typeref:enum:__anon147
ExpandIntoClone	execution_plan/ops/op_expand_into.c	/^static inline OpBase *ExpandIntoClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ExpandIntoConsume	execution_plan/ops/op_expand_into.c	/^static Record ExpandIntoConsume(OpBase *opBase) {$/;"	f	file:
ExpandIntoFree	execution_plan/ops/op_expand_into.c	/^static void ExpandIntoFree(OpBase *ctx) {$/;"	f	file:
ExpandIntoInit	execution_plan/ops/op_expand_into.c	/^static OpResult ExpandIntoInit(OpBase *opBase) {$/;"	f	file:
ExpandIntoReset	execution_plan/ops/op_expand_into.c	/^static OpResult ExpandIntoReset(OpBase *ctx) {$/;"	f	file:
ExpandIntoToString	execution_plan/ops/op_expand_into.c	/^static inline int ExpandIntoToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
F	execution_plan/ops/op_conditional_traverse.h	/^	GrB_Matrix F;               \/\/ Filter matrix.$/;"	m	struct:__anon40
F	execution_plan/ops/op_expand_into.h	/^	GrB_Matrix F;               \/\/ Filter matrix.$/;"	m	struct:__anon54
FILTER_FAIL	filter_tree/filter_tree.h	/^#define FILTER_FAIL /;"	d
FILTER_PASS	filter_tree/filter_tree.h	/^#define FILTER_PASS /;"	d
FILTER_RECURSE_BLACKLIST	execution_plan/ops/op.h	/^static const OPType FILTER_RECURSE_BLACKLIST[] = {OPType_APPLY, OPType_MERGE};$/;"	v
FIRST_CHILD	arithmetic/algebraic_expression/utils.h	/^#define FIRST_CHILD(/;"	d
FORMATTER_COMPACT	resultset/formatters/resultset_formatters.h	/^	FORMATTER_COMPACT = 2,$/;"	e	enum:__anon15
FORMATTER_NOP	resultset/formatters/resultset_formatters.h	/^	FORMATTER_NOP = 0,$/;"	e	enum:__anon15
FORMATTER_VERBOSE	resultset/formatters/resultset_formatters.h	/^	FORMATTER_VERBOSE = 1,$/;"	e	enum:__anon15
FT_ConditionNode	filter_tree/filter_tree.h	/^} FT_ConditionNode;$/;"	t	typeref:struct:__anon159
FT_ExpressionNode	filter_tree/filter_tree.h	/^} FT_ExpressionNode;$/;"	t	typeref:struct:__anon157
FT_FilterNode	filter_tree/filter_tree.h	/^struct FT_FilterNode {$/;"	s
FT_FilterNode	filter_tree/filter_tree.h	/^typedef struct FT_FilterNode FT_FilterNode;$/;"	t	typeref:struct:FT_FilterNode
FT_FilterNodeType	filter_tree/filter_tree.h	/^} FT_FilterNodeType;$/;"	t	typeref:enum:__anon156
FT_N_COND	filter_tree/filter_tree.h	/^	FT_N_COND,  \/\/ Conditional node.$/;"	e	enum:__anon156
FT_N_EXP	filter_tree/filter_tree.h	/^	FT_N_EXP,   \/\/ Expression node.$/;"	e	enum:__anon156
FT_N_PRED	filter_tree/filter_tree.h	/^	FT_N_PRED,  \/\/ Predicate node.$/;"	e	enum:__anon156
FT_PredicateNode	filter_tree/filter_tree.h	/^} FT_PredicateNode;$/;"	t	typeref:struct:__anon158
FilterClone	execution_plan/ops/op_filter.c	/^static inline OpBase *FilterClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
FilterConsume	execution_plan/ops/op_filter.c	/^static Record FilterConsume(OpBase *opBase) {$/;"	f	file:
FilterCtx	execution_plan/optimizations/optimize_cartesian_product.c	/^} FilterCtx;$/;"	t	typeref:struct:__anon38	file:
FilterCtx_LT	execution_plan/optimizations/optimize_cartesian_product.c	/^#define FilterCtx_LT(/;"	d	file:
FilterFree	execution_plan/ops/op_filter.c	/^static void FilterFree(OpBase *ctx) {$/;"	f	file:
FilterTreeToQueryNode	filter_tree/ft_to_rsq.c	/^RSQNode *FilterTreeToQueryNode$/;"	f
FilterTree_AppendLeftChild	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_AppendLeftChild(FT_FilterNode *root, FT_FilterNode *child) {$/;"	f
FilterTree_AppendRightChild	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_AppendRightChild(FT_FilterNode *root, FT_FilterNode *child) {$/;"	f
FilterTree_Clone	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_Clone(const FT_FilterNode *root) {$/;"	f
FilterTree_CollectAttributes	filter_tree/filter_tree.c	/^rax *FilterTree_CollectAttributes(const FT_FilterNode *root) {$/;"	f
FilterTree_CollectIndependentEntities	execution_plan/optimizations/traverse_order_utils.c	/^void FilterTree_CollectIndependentEntities$/;"	f
FilterTree_CollectModified	filter_tree/filter_tree.c	/^rax *FilterTree_CollectModified(const FT_FilterNode *root) {$/;"	f
FilterTree_Combine	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_Combine(FT_FilterNode **filters, uint count) {$/;"	f
FilterTree_Compact	filter_tree/filter_tree.c	/^bool FilterTree_Compact(FT_FilterNode *root) {$/;"	f
FilterTree_ContainsFunc	filter_tree/filter_tree.c	/^bool FilterTree_ContainsFunc(const FT_FilterNode *root, const char *func, FT_FilterNode **node) {$/;"	f
FilterTree_CreateConditionFilter	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_CreateConditionFilter(AST_Operator op) {$/;"	f
FilterTree_CreateExpressionFilter	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_CreateExpressionFilter(AR_ExpNode *exp) {$/;"	f
FilterTree_CreatePredicateFilter	filter_tree/filter_tree.c	/^FT_FilterNode *FilterTree_CreatePredicateFilter(AST_Operator op, AR_ExpNode *lhs, AR_ExpNode *rhs) {$/;"	f
FilterTree_DeMorgan	filter_tree/filter_tree.c	/^void FilterTree_DeMorgan(FT_FilterNode **root) {$/;"	f
FilterTree_FiltersAlias	filter_tree/filter_tree.c	/^bool FilterTree_FiltersAlias(const FT_FilterNode *root, const cypher_astnode_t *ast) {$/;"	f
FilterTree_Free	filter_tree/filter_tree.c	/^void FilterTree_Free(FT_FilterNode *root) {$/;"	f
FilterTree_Print	filter_tree/filter_tree.c	/^void FilterTree_Print(const FT_FilterNode *root) {$/;"	f
FilterTree_ResolveVariables	filter_tree/filter_tree.c	/^void FilterTree_ResolveVariables(FT_FilterNode *root, const Record r) {$/;"	f
FilterTree_SubTrees	filter_tree/filter_tree.c	/^FT_FilterNode **FilterTree_SubTrees(FT_FilterNode *root) {$/;"	f
FilterTree_Valid	filter_tree/filter_tree.c	/^bool FilterTree_Valid(const FT_FilterNode *root) {$/;"	f
FilterTree_applyFilters	filter_tree/filter_tree.c	/^int FilterTree_applyFilters(const FT_FilterNode *root, const Record r) {$/;"	f
FilterTree_containsOp	filter_tree/filter_tree.c	/^bool FilterTree_containsOp(const FT_FilterNode *root, AST_Operator op) {$/;"	f
Free	procedures/proc_ctx.h	/^	ProcFree Free;              \/\/$/;"	m	struct:ProcedureCtx
FreeEntity	graph/entities/graph_entity.c	/^void FreeEntity(Entity *e) {$/;"	f
FreeGroup	grouping/group.c	/^void FreeGroup(Group *g) {$/;"	f
FreeGroupCache	grouping/group_cache.c	/^void FreeGroupCache(CacheGroup *groups) {$/;"	f
GETFAIR_NUM_ENTRIES	util/dict.c	/^#define GETFAIR_NUM_ENTRIES /;"	d	file:
GETYPE_EDGE	graph/entities/graph_entity.h	/^	GETYPE_EDGE$/;"	e	enum:GraphEntityType
GETYPE_NODE	graph/entities/graph_entity.h	/^	GETYPE_NODE,$/;"	e	enum:GraphEntityType
GETYPE_UNKNOWN	graph/entities/graph_entity.h	/^	GETYPE_UNKNOWN,$/;"	e	enum:GraphEntityType
GET_ITEM_BLOCK	util/datablock/datablock.c	/^#define GET_ITEM_BLOCK(/;"	d	file:
GET_ITEM_BLOCK	util/datablock/oo_datablock.c	/^#define GET_ITEM_BLOCK(/;"	d	file:
GET_ITEM_BLOCK	util/object_pool/object_pool.c	/^#define GET_ITEM_BLOCK(/;"	d	file:
GET_ITEM_HEADER	util/datablock/datablock.h	/^#define GET_ITEM_HEADER(/;"	d
GE_NEW_LABELED_NODE	graph/entities/node.h	/^#define GE_NEW_LABELED_NODE(/;"	d
GE_NEW_NODE	graph/entities/node.h	/^#define GE_NEW_NODE(/;"	d
GRAPHBLAS	Makefile	/^GRAPHBLAS=..\/deps\/GraphBLAS\/build\/libgraphblas.a$/;"	m
GRAPHBLAS_DIR	Makefile	/^GRAPHBLAS_DIR = ..\/deps\/GraphBLAS$/;"	m
GRAPHCONTEXT_H	graph/graphcontext.h	/^#define GRAPHCONTEXT_H$/;"	d
GRAPHCONTEXT_TYPE_DECODE_MIN_V	serializers/encoding_version.h	/^#define GRAPHCONTEXT_TYPE_DECODE_MIN_V /;"	d
GRAPHMETA_TYPE_DECODE_MIN_V	serializers/encoding_version.h	/^#define GRAPHMETA_TYPE_DECODE_MIN_V /;"	d
GRAPH_Commands	commands/commands.h	/^} GRAPH_Commands;$/;"	t	typeref:enum:__anon144
GRAPH_DEFAULT_EDGE_CAP	graph/graph.h	/^#define GRAPH_DEFAULT_EDGE_CAP /;"	d
GRAPH_DEFAULT_LABEL_CAP	graph/graph.h	/^#define GRAPH_DEFAULT_LABEL_CAP /;"	d
GRAPH_DEFAULT_NODE_CAP	graph/graph.h	/^#define GRAPH_DEFAULT_NODE_CAP /;"	d
GRAPH_DEFAULT_RELATION_TYPE_CAP	graph/graph.h	/^#define GRAPH_DEFAULT_RELATION_TYPE_CAP /;"	d
GRAPH_EDGE_DIR	graph/graph.h	/^} GRAPH_EDGE_DIR;$/;"	t	typeref:enum:__anon82
GRAPH_EDGE_DIR_BOTH	graph/graph.h	/^	GRAPH_EDGE_DIR_BOTH,$/;"	e	enum:__anon82
GRAPH_EDGE_DIR_INCOMING	graph/graph.h	/^	GRAPH_EDGE_DIR_INCOMING,$/;"	e	enum:__anon82
GRAPH_EDGE_DIR_OUTGOING	graph/graph.h	/^	GRAPH_EDGE_DIR_OUTGOING,$/;"	e	enum:__anon82
GRAPH_ENCODING_VERSION_LATEST	serializers/encoding_version.h	/^#define GRAPH_ENCODING_VERSION_LATEST /;"	d
GRAPH_NO_LABEL	graph/graph.h	/^#define GRAPH_NO_LABEL /;"	d
GRAPH_NO_RELATION	graph/graph.h	/^#define GRAPH_NO_RELATION /;"	d
GRAPH_UNKNOWN_LABEL	graph/graph.h	/^#define GRAPH_UNKNOWN_LABEL /;"	d
GRAPH_UNKNOWN_RELATION	graph/graph.h	/^#define GRAPH_UNKNOWN_RELATION /;"	d
GRAPH_VERSION_MISSING	commands/cmd_dispatcher.c	/^#define GRAPH_VERSION_MISSING /;"	d	file:
GROUP_CACHE_H_	grouping/group_cache.h	/^#define GROUP_CACHE_H_$/;"	d
Graph	graph/graph.h	/^struct Graph {$/;"	s
Graph	graph/graph.h	/^typedef struct Graph Graph;$/;"	t	typeref:struct:Graph
GraphContext	graph/graphcontext.h	/^} GraphContext;$/;"	t	typeref:struct:__anon91
GraphContextRedisModuleType	serializers/graphcontext_type.c	/^RedisModuleType *GraphContextRedisModuleType;$/;"	v
GraphContextType_Register	serializers/graphcontext_type.c	/^int GraphContextType_Register(RedisModuleCtx *ctx) {$/;"	f
GraphContext_AddIndex	graph/graphcontext.c	/^int GraphContext_AddIndex(Index **idx, GraphContext *gc, const char *label,$/;"	f
GraphContext_AddSchema	graph/graphcontext.c	/^Schema *GraphContext_AddSchema(GraphContext *gc, const char *label, SchemaType t) {$/;"	f
GraphContext_AttributeCount	graph/graphcontext.c	/^uint GraphContext_AttributeCount(GraphContext *gc) {$/;"	f
GraphContext_Delete	graph/graphcontext.c	/^void GraphContext_Delete(GraphContext *gc) {$/;"	f
GraphContext_DeleteIndex	graph/graphcontext.c	/^int GraphContext_DeleteIndex(GraphContext *gc, const char *label,$/;"	f
GraphContext_DeleteNodeFromIndices	graph/graphcontext.c	/^void GraphContext_DeleteNodeFromIndices(GraphContext *gc, Node *n) {$/;"	f
GraphContext_FindOrAddAttribute	graph/graphcontext.c	/^Attribute_ID GraphContext_FindOrAddAttribute(GraphContext *gc, const char *attribute) {$/;"	f
GraphContext_GetAttributeID	graph/graphcontext.c	/^Attribute_ID GraphContext_GetAttributeID(GraphContext *gc, const char *attribute) {$/;"	f
GraphContext_GetAttributeString	graph/graphcontext.c	/^const char *GraphContext_GetAttributeString(GraphContext *gc, Attribute_ID id) {$/;"	f
GraphContext_GetCache	graph/graphcontext.c	/^Cache *GraphContext_GetCache(const GraphContext *gc) {$/;"	f
GraphContext_GetEdgeRelationType	graph/graphcontext.c	/^const char *GraphContext_GetEdgeRelationType(const GraphContext *gc, Edge *e) {$/;"	f
GraphContext_GetIndex	graph/graphcontext.c	/^Index *GraphContext_GetIndex(const GraphContext *gc, const char *label,$/;"	f
GraphContext_GetIndexByID	graph/graphcontext.c	/^Index *GraphContext_GetIndexByID(const GraphContext *gc, int id,$/;"	f
GraphContext_GetName	graph/graphcontext.c	/^const char *GraphContext_GetName(const GraphContext *gc) {$/;"	f
GraphContext_GetNodeLabel	graph/graphcontext.c	/^const char *GraphContext_GetNodeLabel(const GraphContext *gc, Node *n) {$/;"	f
GraphContext_GetRegisteredGraphContext	graph/graphcontext.c	/^GraphContext *GraphContext_GetRegisteredGraphContext(const char *graph_name) {$/;"	f
GraphContext_GetSchema	graph/graphcontext.c	/^Schema *GraphContext_GetSchema(const GraphContext *gc, const char *label, SchemaType t) {$/;"	f
GraphContext_GetSchemaByID	graph/graphcontext.c	/^Schema *GraphContext_GetSchemaByID(const GraphContext *gc, int id, SchemaType t) {$/;"	f
GraphContext_GetSlowLog	graph/graphcontext.c	/^SlowLog *GraphContext_GetSlowLog(const GraphContext *gc) {$/;"	f
GraphContext_GetVersion	graph/graphcontext.c	/^XXH32_hash_t GraphContext_GetVersion(const GraphContext *gc) {$/;"	f
GraphContext_HasIndices	graph/graphcontext.c	/^bool GraphContext_HasIndices(GraphContext *gc) {$/;"	f
GraphContext_MarkWriter	graph/graphcontext.c	/^void GraphContext_MarkWriter(RedisModuleCtx *ctx, GraphContext *gc) {$/;"	f
GraphContext_New	graph/graphcontext.c	/^GraphContext *GraphContext_New(const char *graph_name, size_t node_cap, size_t edge_cap) {$/;"	f
GraphContext_RegisterWithModule	graph/graphcontext.c	/^void GraphContext_RegisterWithModule(GraphContext *gc) {$/;"	f
GraphContext_Release	graph/graphcontext.c	/^void GraphContext_Release(GraphContext *gc) {$/;"	f
GraphContext_RemoveFromRegistry	graph/graphcontext.c	/^void GraphContext_RemoveFromRegistry(GraphContext *gc) {$/;"	f
GraphContext_Rename	graph/graphcontext.c	/^void GraphContext_Rename(GraphContext *gc, const char *name) {$/;"	f
GraphContext_Retrieve	graph/graphcontext.c	/^GraphContext *GraphContext_Retrieve(RedisModuleCtx *ctx, RedisModuleString *graphID, bool readOnly,$/;"	f
GraphContext_SchemaCount	graph/graphcontext.c	/^unsigned short GraphContext_SchemaCount(const GraphContext *gc, SchemaType t) {$/;"	f
GraphDecodeContext	serializers/decode_context.h	/^} GraphDecodeContext;$/;"	t	typeref:struct:__anon103
GraphDecodeContext_AddMetaKey	serializers/decode_context.c	/^void GraphDecodeContext_AddMetaKey(GraphDecodeContext *ctx, const char *key) {$/;"	f
GraphDecodeContext_ClearMetaKeys	serializers/decode_context.c	/^void GraphDecodeContext_ClearMetaKeys(GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_Finished	serializers/decode_context.c	/^bool GraphDecodeContext_Finished(const GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_Free	serializers/decode_context.c	/^void GraphDecodeContext_Free(GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_GetKeyCount	serializers/decode_context.c	/^uint64_t GraphDecodeContext_GetKeyCount(const GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_GetMetaKeys	serializers/decode_context.c	/^unsigned char **GraphDecodeContext_GetMetaKeys(const GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_GetProcessedKeyCount	serializers/decode_context.c	/^bool GraphDecodeContext_GetProcessedKeyCount(const GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_IncreaseProcessedKeyCount	serializers/decode_context.c	/^void GraphDecodeContext_IncreaseProcessedKeyCount(GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_New	serializers/decode_context.c	/^GraphDecodeContext *GraphDecodeContext_New() {$/;"	f
GraphDecodeContext_Reset	serializers/decode_context.c	/^void GraphDecodeContext_Reset(GraphDecodeContext *ctx) {$/;"	f
GraphDecodeContext_SetKeyCount	serializers/decode_context.c	/^void GraphDecodeContext_SetKeyCount(GraphDecodeContext *ctx, uint64_t key_count) {$/;"	f
GraphEncodeContext	serializers/encode_context.h	/^} GraphEncodeContext;$/;"	t	typeref:struct:__anon107
GraphEncodeContext_AddMetaKey	serializers/encode_context.c	/^void GraphEncodeContext_AddMetaKey(GraphEncodeContext *ctx, const char *key) {$/;"	f
GraphEncodeContext_ClearMetaKeys	serializers/encode_context.c	/^void GraphEncodeContext_ClearMetaKeys(GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_Finished	serializers/encode_context.c	/^bool GraphEncodeContext_Finished(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_Free	serializers/encode_context.c	/^void GraphEncodeContext_Free(GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_FreeHeader	serializers/encode_context.c	/^static void GraphEncodeContext_FreeHeader(GraphEncodeContext *ctx) {$/;"	f	file:
GraphEncodeContext_GetCurrentRelationID	serializers/encode_context.c	/^uint GraphEncodeContext_GetCurrentRelationID(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetDatablockIterator	serializers/encode_context.c	/^DataBlockIterator *GraphEncodeContext_GetDatablockIterator(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetEncodeState	serializers/encode_context.c	/^EncodeState GraphEncodeContext_GetEncodeState(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetKeyCount	serializers/encode_context.c	/^uint64_t GraphEncodeContext_GetKeyCount(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetMatrixTupleIterator	serializers/encode_context.c	/^GxB_MatrixTupleIter *GraphEncodeContext_GetMatrixTupleIterator($/;"	f
GraphEncodeContext_GetMetaKeys	serializers/encode_context.c	/^unsigned char **GraphEncodeContext_GetMetaKeys(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetMultipleEdgesArray	serializers/encode_context.c	/^EdgeID *GraphEncodeContext_GetMultipleEdgesArray(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetMultipleEdgesCurrentIndex	serializers/encode_context.c	/^uint GraphEncodeContext_GetMultipleEdgesCurrentIndex(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetMultipleEdgesDestinationNode	serializers/encode_context.c	/^NodeID GraphEncodeContext_GetMultipleEdgesDestinationNode(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetMultipleEdgesSourceNode	serializers/encode_context.c	/^NodeID GraphEncodeContext_GetMultipleEdgesSourceNode(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetProcessedEntitiesOffset	serializers/encode_context.c	/^uint64_t GraphEncodeContext_GetProcessedEntitiesOffset(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_GetProcessedKeyCount	serializers/encode_context.c	/^uint64_t GraphEncodeContext_GetProcessedKeyCount(const GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_IncreaseProcessedKeyCount	serializers/encode_context.c	/^void GraphEncodeContext_IncreaseProcessedKeyCount(GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_InitHeader	serializers/encode_context.c	/^void GraphEncodeContext_InitHeader(GraphEncodeContext *ctx, const char *graph_name, Graph *g) {$/;"	f
GraphEncodeContext_New	serializers/encode_context.c	/^GraphEncodeContext *GraphEncodeContext_New() {$/;"	f
GraphEncodeContext_Reset	serializers/encode_context.c	/^void GraphEncodeContext_Reset(GraphEncodeContext *ctx) {$/;"	f
GraphEncodeContext_SetCurrentRelationID	serializers/encode_context.c	/^void GraphEncodeContext_SetCurrentRelationID(GraphEncodeContext *ctx,$/;"	f
GraphEncodeContext_SetDatablockIterator	serializers/encode_context.c	/^void GraphEncodeContext_SetDatablockIterator(GraphEncodeContext *ctx,$/;"	f
GraphEncodeContext_SetEncodeState	serializers/encode_context.c	/^void GraphEncodeContext_SetEncodeState(GraphEncodeContext *ctx, EncodeState state) {$/;"	f
GraphEncodeContext_SetMatrixTupleIterator	serializers/encode_context.c	/^void GraphEncodeContext_SetMatrixTupleIterator(GraphEncodeContext *ctx,$/;"	f
GraphEncodeContext_SetMutipleEdgesArray	serializers/encode_context.c	/^void GraphEncodeContext_SetMutipleEdgesArray(GraphEncodeContext *ctx, EdgeID *edges,$/;"	f
GraphEncodeContext_SetProcessedEntitiesOffset	serializers/encode_context.c	/^void GraphEncodeContext_SetProcessedEntitiesOffset(GraphEncodeContext *ctx,$/;"	f
GraphEncodeHeader	serializers/encode_context.h	/^} GraphEncodeHeader;$/;"	t	typeref:struct:__anon106
GraphEntity	graph/entities/graph_entity.h	/^} GraphEntity;$/;"	t	typeref:struct:__anon89
GraphEntityStringFromat	graph/entities/graph_entity.h	/^} GraphEntityStringFromat;$/;"	t	typeref:enum:__anon86
GraphEntityType	graph/entities/graph_entity.h	/^typedef enum GraphEntityType {$/;"	g
GraphEntityType	graph/entities/graph_entity.h	/^} GraphEntityType;$/;"	t	typeref:enum:GraphEntityType
GraphEntity_AddProperty	graph/entities/graph_entity.c	/^bool GraphEntity_AddProperty(GraphEntity *e, Attribute_ID attr_id, SIValue value) {$/;"	f
GraphEntity_ClearProperties	graph/entities/graph_entity.c	/^int GraphEntity_ClearProperties(GraphEntity *e) {$/;"	f
GraphEntity_GetProperty	graph/entities/graph_entity.c	/^SIValue *GraphEntity_GetProperty(const GraphEntity *e, Attribute_ID attr_id) {$/;"	f
GraphEntity_IsDeleted	graph/entities/graph_entity.c	/^inline bool GraphEntity_IsDeleted(const GraphEntity *e) {$/;"	f
GraphEntity_PropertiesToString	graph/entities/graph_entity.c	/^size_t GraphEntity_PropertiesToString(const GraphEntity *e, char **buffer, size_t *bufferLen,$/;"	f
GraphEntity_SetProperty	graph/entities/graph_entity.c	/^bool GraphEntity_SetProperty(const GraphEntity *e, Attribute_ID attr_id, SIValue value) {$/;"	f
GraphEntity_ToString	graph/entities/graph_entity.c	/^void GraphEntity_ToString(const GraphEntity *e, char **buffer, size_t *bufferLen,$/;"	f
GraphMetaRedisModuleType	serializers/graphmeta_type.c	/^RedisModuleType *GraphMetaRedisModuleType;$/;"	v
GraphMetaType_Register	serializers/graphmeta_type.c	/^int GraphMetaType_Register(RedisModuleCtx *ctx) {$/;"	f
GraphQueryCtx	commands/cmd_query.c	/^} GraphQueryCtx;$/;"	t	typeref:struct:__anon146	file:
GraphQueryCtx_Free	commands/cmd_query.c	/^void static inline GraphQueryCtx_Free(GraphQueryCtx *ctx) {$/;"	f	file:
GraphQueryCtx_New	commands/cmd_query.c	/^static GraphQueryCtx *GraphQueryCtx_New$/;"	f	file:
Graph_AcquireReadLock	graph/graph.c	/^void Graph_AcquireReadLock(Graph *g) {$/;"	f
Graph_AcquireWriteLock	graph/graph.c	/^void Graph_AcquireWriteLock(Graph *g) {$/;"	f
Graph_AddLabel	graph/graph.c	/^int Graph_AddLabel(Graph *g) {$/;"	f
Graph_AddRelationType	graph/graph.c	/^int Graph_AddRelationType(Graph *g) {$/;"	f
Graph_AllocateEdges	graph/graph.c	/^void Graph_AllocateEdges(Graph *g, size_t n) {$/;"	f
Graph_AllocateNodes	graph/graph.c	/^void Graph_AllocateNodes(Graph *g, size_t n) {$/;"	f
Graph_ApplyAllPending	graph/graph.c	/^void Graph_ApplyAllPending(Graph *g) {$/;"	f
Graph_BulkDelete	graph/graph.c	/^void Graph_BulkDelete(Graph *g, Node *nodes, uint node_count, Edge *edges, uint edge_count,$/;"	f
Graph_BulkInsert	commands/cmd_bulk_insert.c	/^int Graph_BulkInsert(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Graph_Config	commands/cmd_config.c	/^int Graph_Config(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Graph_ConnectNodes	graph/graph.c	/^int Graph_ConnectNodes(Graph *g, NodeID src, NodeID dest, int r, Edge *e) {$/;"	f
Graph_CreateNode	graph/graph.c	/^void Graph_CreateNode(Graph *g, int label, Node *n) {$/;"	f
Graph_Delete	commands/cmd_delete.c	/^int Graph_Delete(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Graph_DeleteEdge	graph/graph.c	/^int Graph_DeleteEdge(Graph *g, Edge *e) {$/;"	f
Graph_DeleteNode	graph/graph.c	/^void Graph_DeleteNode(Graph *g, Node *n) {$/;"	f
Graph_DeletedEdgeCount	graph/graph.c	/^uint Graph_DeletedEdgeCount(const Graph *g) {$/;"	f
Graph_DeletedNodeCount	graph/graph.c	/^uint Graph_DeletedNodeCount(const Graph *g) {$/;"	f
Graph_EdgeCount	graph/graph.c	/^size_t Graph_EdgeCount(const Graph *g) {$/;"	f
Graph_EdgeExists	graph/graph.c	/^bool Graph_EdgeExists(const Graph *g, NodeID srcID, NodeID destID, int r) {$/;"	f
Graph_EntityIsDeleted	graph/graph.c	/^inline bool Graph_EntityIsDeleted(Entity *e) {$/;"	f
Graph_Explain	commands/cmd_explain.c	/^void Graph_Explain(void *args) {$/;"	f
Graph_FormConnection	graph/graph.c	/^void Graph_FormConnection(Graph *g, NodeID src, NodeID dest, EdgeID edge_id, int r) {$/;"	f
Graph_Free	graph/graph.c	/^void Graph_Free(Graph *g) {$/;"	f
Graph_GetAdjacencyMatrix	graph/graph.c	/^GrB_Matrix Graph_GetAdjacencyMatrix(const Graph *g) {$/;"	f
Graph_GetEdge	graph/graph.c	/^int Graph_GetEdge(const Graph *g, EdgeID id, Edge *e) {$/;"	f
Graph_GetEdgeRelation	graph/graph.c	/^int Graph_GetEdgeRelation(const Graph *g, Edge *e) {$/;"	f
Graph_GetEdgesConnectingNodes	graph/graph.c	/^void Graph_GetEdgesConnectingNodes(const Graph *g, NodeID srcID, NodeID destID, int r,$/;"	f
Graph_GetLabelMatrix	graph/graph.c	/^GrB_Matrix Graph_GetLabelMatrix(const Graph *g, int label_idx) {$/;"	f
Graph_GetNode	graph/graph.c	/^int Graph_GetNode(const Graph *g, NodeID id, Node *n) {$/;"	f
Graph_GetNodeEdges	graph/graph.c	/^void Graph_GetNodeEdges(const Graph *g, const Node *n, GRAPH_EDGE_DIR dir, int edgeType,$/;"	f
Graph_GetNodeLabel	graph/graph.c	/^int Graph_GetNodeLabel(const Graph *g, NodeID nodeID) {$/;"	f
Graph_GetRelationMatrix	graph/graph.c	/^GrB_Matrix Graph_GetRelationMatrix(const Graph *g, int relation_idx) {$/;"	f
Graph_GetTransposedAdjacencyMatrix	graph/graph.c	/^GrB_Matrix Graph_GetTransposedAdjacencyMatrix(const Graph *g) {$/;"	f
Graph_GetTransposedRelationMatrix	graph/graph.c	/^GrB_Matrix Graph_GetTransposedRelationMatrix(const Graph *g, int relation_idx) {$/;"	f
Graph_GetZeroMatrix	graph/graph.c	/^GrB_Matrix Graph_GetZeroMatrix(const Graph *g) {$/;"	f
Graph_LabelTypeCount	graph/graph.c	/^int Graph_LabelTypeCount(const Graph *g) {$/;"	f
Graph_LabeledNodeCount	graph/graph.c	/^size_t Graph_LabeledNodeCount(const Graph *g, int label) {$/;"	f
Graph_List	commands/cmd_list.c	/^int Graph_List(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
Graph_New	graph/graph.c	/^Graph *Graph_New(size_t node_cap, size_t edge_cap) {$/;"	f
Graph_NodeCount	graph/graph.c	/^size_t Graph_NodeCount(const Graph *g) {$/;"	f
Graph_Profile	commands/cmd_profile.c	/^void Graph_Profile(void *args) {$/;"	f
Graph_Query	commands/cmd_query.c	/^void Graph_Query(void *args) {$/;"	f
Graph_RelationTypeCount	graph/graph.c	/^int Graph_RelationTypeCount(const Graph *g) {$/;"	f
Graph_ReleaseLock	graph/graph.c	/^void Graph_ReleaseLock(Graph *g) {$/;"	f
Graph_RequiredMatrixDim	graph/graph.c	/^inline size_t Graph_RequiredMatrixDim(const Graph *g) {$/;"	f
Graph_ScanEdges	graph/graph.c	/^DataBlockIterator *Graph_ScanEdges(const Graph *g) {$/;"	f
Graph_ScanNodes	graph/graph.c	/^DataBlockIterator *Graph_ScanNodes(const Graph *g) {$/;"	f
Graph_SetMatrixPolicy	graph/graph.c	/^void Graph_SetMatrixPolicy(Graph *g, MATRIX_POLICY policy) {$/;"	f
Graph_Slowlog	commands/cmd_slowlog.c	/^void Graph_Slowlog(void *args) {$/;"	f
Graph_UncompactedNodeCount	graph/graph.c	/^size_t Graph_UncompactedNodeCount(const Graph *g) {$/;"	f
Graph_WriterEnter	graph/graph.c	/^void Graph_WriterEnter(Graph *g) {$/;"	f
Graph_WriterLeave	graph/graph.c	/^void Graph_WriterLeave(Graph *g) {$/;"	f
Group	grouping/group.h	/^} Group;$/;"	t	typeref:struct:__anon76
Group_KeyStr	grouping/group.c	/^void Group_KeyStr(const Group *g, char **group_key) {$/;"	f
GxB_Matrix_Delete	GraphBLASExt/GxB_Delete.c	/^GrB_Info GxB_Matrix_Delete$/;"	f
HEADER_SIZE	util/object_pool/object_pool.c	/^#define HEADER_SIZE /;"	d	file:
HEAP_H	util/heap.h	/^#define HEAP_H$/;"	d
HT_dictAdd	util/dict.c	/^int HT_dictAdd(dict *d, void *key, void *val)$/;"	f
HT_dictAddOrFind	util/dict.c	/^dictEntry *HT_dictAddOrFind(dict *d, void *key) {$/;"	f
HT_dictAddRaw	util/dict.c	/^dictEntry *HT_dictAddRaw(dict *d, void *key, dictEntry **existing)$/;"	f
HT_dictCreate	util/dict.c	/^dict *HT_dictCreate(dictType *type,$/;"	f
HT_dictDelete	util/dict.c	/^int HT_dictDelete(dict *ht, const void *key) {$/;"	f
HT_dictDisableResize	util/dict.c	/^void HT_dictDisableResize(void) {$/;"	f
HT_dictEmpty	util/dict.c	/^void HT_dictEmpty(dict *d, void(callback)(void*)) {$/;"	f
HT_dictEnableResize	util/dict.c	/^void HT_dictEnableResize(void) {$/;"	f
HT_dictExpand	util/dict.c	/^int HT_dictExpand(dict *d, unsigned long size)$/;"	f
HT_dictFetchValue	util/dict.c	/^void *HT_dictFetchValue(dict *d, const void *key) {$/;"	f
HT_dictFind	util/dict.c	/^dictEntry *HT_dictFind(dict *d, const void *key)$/;"	f
HT_dictFindEntryRefByPtrAndHash	util/dict.c	/^dictEntry **HT_dictFindEntryRefByPtrAndHash(dict *d, const void *oldptr, uint64_t hash) {$/;"	f
HT_dictFreeUnlinkedEntry	util/dict.c	/^void HT_dictFreeUnlinkedEntry(dict *d, dictEntry *he) {$/;"	f
HT_dictGenCaseHashFunction	util/dict.c	/^uint64_t HT_dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
HT_dictGenHashFunction	util/dict.c	/^uint64_t HT_dictGenHashFunction(const void *key, int len) {$/;"	f
HT_dictGetFairRandomKey	util/dict.c	/^dictEntry *HT_dictGetFairRandomKey(dict *d) {$/;"	f
HT_dictGetHash	util/dict.c	/^uint64_t HT_dictGetHash(dict *d, const void *key) {$/;"	f
HT_dictGetHashFunctionSeed	util/dict.c	/^uint8_t *HT_dictGetHashFunctionSeed(void) {$/;"	f
HT_dictGetIterator	util/dict.c	/^dictIterator *HT_dictGetIterator(dict *d)$/;"	f
HT_dictGetRandomKey	util/dict.c	/^dictEntry *HT_dictGetRandomKey(dict *d)$/;"	f
HT_dictGetSafeIterator	util/dict.c	/^dictIterator *HT_dictGetSafeIterator(dict *d) {$/;"	f
HT_dictGetSomeKeys	util/dict.c	/^unsigned int HT_dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count) {$/;"	f
HT_dictGetStats	util/dict.c	/^void HT_dictGetStats(char *buf, size_t bufsize, dict *d) {$/;"	f
HT_dictNext	util/dict.c	/^dictEntry *HT_dictNext(dictIterator *iter)$/;"	f
HT_dictRehash	util/dict.c	/^int HT_dictRehash(dict *d, int n) {$/;"	f
HT_dictRehashMilliseconds	util/dict.c	/^int HT_dictRehashMilliseconds(dict *d, int ms) {$/;"	f
HT_dictRelease	util/dict.c	/^void HT_dictRelease(dict *d)$/;"	f
HT_dictReleaseIterator	util/dict.c	/^void HT_dictReleaseIterator(dictIterator *iter)$/;"	f
HT_dictReplace	util/dict.c	/^int HT_dictReplace(dict *d, void *key, void *val)$/;"	f
HT_dictResize	util/dict.c	/^int HT_dictResize(dict *d)$/;"	f
HT_dictScan	util/dict.c	/^unsigned long HT_dictScan(dict *d,$/;"	f
HT_dictSetHashFunctionSeed	util/dict.c	/^void HT_dictSetHashFunctionSeed(uint8_t *seed) {$/;"	f
HT_dictUnlink	util/dict.c	/^dictEntry *HT_dictUnlink(dict *ht, const void *key) {$/;"	f
Heap_clear	util/heap.c	/^void Heap_clear(heap_t * h)$/;"	f
Heap_contains_item	util/heap.c	/^int Heap_contains_item(const heap_t * h, const void *item)$/;"	f
Heap_count	util/heap.c	/^int Heap_count(const heap_t * h)$/;"	f
Heap_free	util/heap.c	/^void Heap_free(heap_t * h)$/;"	f
Heap_init	util/heap.c	/^void Heap_init(heap_t* h,$/;"	f
Heap_new	util/heap.c	/^heap_t *Heap_new(int (*cmp) (const void *,$/;"	f
Heap_offer	util/heap.c	/^int Heap_offer(heap_t ** h, void *item)$/;"	f
Heap_offerx	util/heap.c	/^int Heap_offerx(heap_t * h, void *item)$/;"	f
Heap_peek	util/heap.c	/^void *Heap_peek(const heap_t * h)$/;"	f
Heap_poll	util/heap.c	/^void *Heap_poll(heap_t * h)$/;"	f
Heap_remove_item	util/heap.c	/^void *Heap_remove_item(heap_t * h, const void *item)$/;"	f
Heap_size	util/heap.c	/^int Heap_size(const heap_t * h)$/;"	f
Heap_sizeof	util/heap.c	/^size_t Heap_sizeof(unsigned int size)$/;"	f
IDENTIFIER_NOT_FOUND	ast/ast.h	/^#define IDENTIFIER_NOT_FOUND /;"	d
IDENTITY_MATRIX	arithmetic/algebraic_expression.h	/^static GrB_Matrix IDENTITY_MATRIX = (GrB_Matrix)0x31032017;  \/\/ Identity matrix.$/;"	v
IDX_ANY	index/index.h	/^	IDX_ANY = 0,$/;"	e	enum:__anon141
IDX_EXACT_MATCH	index/index.h	/^	IDX_EXACT_MATCH = 1,$/;"	e	enum:__anon141
IDX_FULLTEXT	index/index.h	/^	IDX_FULLTEXT = 2,$/;"	e	enum:__anon141
ID_RANGE_UNBOUND	execution_plan/ops/op_node_by_id_seek.h	/^#define ID_RANGE_UNBOUND /;"	d
INDEX_FAIL	index/index.h	/^#define INDEX_FAIL /;"	d
INDEX_FIELD_NONE_INDEXED	index/index.h	/^#define INDEX_FIELD_NONE_INDEXED /;"	d
INDEX_NOT_SET	execution_plan/ops/op_unwind.c	/^#define INDEX_NOT_SET /;"	d	file:
INDEX_OK	index/index.h	/^#define INDEX_OK /;"	d
INDEX_SEPARATOR	index/index.h	/^#define INDEX_SEPARATOR /;"	d
INVALID_ENTITY_ID	graph/entities/graph_entity.h	/^#define INVALID_ENTITY_ID /;"	d
INVALID_INDEX	execution_plan/record.h	/^#define INVALID_INDEX /;"	d
ISLT	arithmetic/aggregate_funcs/agg_funcs.c	/^#define ISLT(/;"	d	file:
IS_ITEM_DELETED	util/datablock/datablock.h	/^#define IS_ITEM_DELETED(/;"	d
ITEM_COUNT_TO_BLOCK_COUNT	util/datablock/datablock.c	/^#define ITEM_COUNT_TO_BLOCK_COUNT(/;"	d	file:
ITEM_COUNT_TO_BLOCK_COUNT	util/object_pool/object_pool.c	/^#define ITEM_COUNT_TO_BLOCK_COUNT(/;"	d	file:
ITEM_DATA	util/datablock/datablock.h	/^#define ITEM_DATA(/;"	d
ITEM_FROM_HEADER	util/object_pool/object_pool.c	/^#define ITEM_FROM_HEADER(/;"	d	file:
ITEM_HEADER_SIZE	util/datablock/datablock.h	/^#define ITEM_HEADER_SIZE /;"	d
ITEM_ID	util/object_pool/object_pool.c	/^#define ITEM_ID(/;"	d	file:
ITEM_INDEX_TO_BLOCK_INDEX	util/datablock/datablock.c	/^#define ITEM_INDEX_TO_BLOCK_INDEX(/;"	d	file:
ITEM_INDEX_TO_BLOCK_INDEX	util/datablock/oo_datablock.c	/^#define ITEM_INDEX_TO_BLOCK_INDEX(/;"	d	file:
ITEM_INDEX_TO_BLOCK_INDEX	util/object_pool/object_pool.c	/^#define ITEM_INDEX_TO_BLOCK_INDEX(/;"	d	file:
ITEM_POSITION_WITHIN_BLOCK	util/datablock/datablock.c	/^#define ITEM_POSITION_WITHIN_BLOCK(/;"	d	file:
ITEM_POSITION_WITHIN_BLOCK	util/datablock/oo_datablock.c	/^#define ITEM_POSITION_WITHIN_BLOCK(/;"	d	file:
ITEM_POSITION_WITHIN_BLOCK	util/object_pool/object_pool.c	/^#define ITEM_POSITION_WITHIN_BLOCK(/;"	d	file:
Index	index/index.h	/^} Index;$/;"	t	typeref:struct:__anon142
IndexScan	execution_plan/ops/op_index_scan.h	/^} IndexScan;$/;"	t	typeref:struct:__anon48
IndexScanConsume	execution_plan/ops/op_index_scan.c	/^static Record IndexScanConsume(OpBase *opBase) {$/;"	f	file:
IndexScanConsumeFromChild	execution_plan/ops/op_index_scan.c	/^static Record IndexScanConsumeFromChild(OpBase *opBase) {$/;"	f	file:
IndexScanFree	execution_plan/ops/op_index_scan.c	/^static void IndexScanFree(OpBase *opBase) {$/;"	f	file:
IndexScanInit	execution_plan/ops/op_index_scan.c	/^static OpResult IndexScanInit(OpBase *opBase) {$/;"	f	file:
IndexScanReset	execution_plan/ops/op_index_scan.c	/^static OpResult IndexScanReset(OpBase *opBase) {$/;"	f	file:
IndexScanToString	execution_plan/ops/op_index_scan.c	/^static int IndexScanToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
IndexType	index/index.h	/^} IndexType;$/;"	t	typeref:enum:__anon141
Index_AddField	index/index.c	/^void Index_AddField(Index *idx, const char *field) {$/;"	f
Index_Construct	index/index.c	/^void Index_Construct(Index *idx) {$/;"	f
Index_ContainsAttribute	index/index.c	/^bool Index_ContainsAttribute(const Index *idx, Attribute_ID attribute_id) {$/;"	f
Index_FieldsCount	index/index.c	/^uint Index_FieldsCount(const Index *idx) {$/;"	f
Index_Free	index/index.c	/^void Index_Free(Index *idx) {$/;"	f
Index_GetFields	index/index.c	/^const char **Index_GetFields(const Index *idx) {$/;"	f
Index_GetLabel	index/index.c	/^const char *Index_GetLabel(const Index *idx) {$/;"	f
Index_IndexNode	index/index.c	/^void Index_IndexNode(Index *idx, const Node *n) {$/;"	f
Index_New	index/index.c	/^Index *Index_New(const char *label, IndexType type) {$/;"	f
Index_Query	index/index.c	/^RSResultsIterator *Index_Query(const Index *idx, const char *query, char **err) {$/;"	f
Index_RemoveField	index/index.c	/^void Index_RemoveField(Index *idx, const char *field) {$/;"	f
Index_RemoveNode	index/index.c	/^void Index_RemoveNode(Index *idx, const Node *n) {$/;"	f
IndexesContext	procedures/proc_list_indexes.c	/^} IndexesContext;$/;"	t	typeref:struct:__anon1	file:
InfoFunc	debug.c	/^void InfoFunc(RedisModuleInfoCtx *ctx, int for_crash_report) {$/;"	f
Invoke	procedures/proc_ctx.h	/^	ProcInvoke Invoke;          \/\/$/;"	m	struct:ProcedureCtx
IsAcyclicGraph	algorithms/detect_cycle.c	/^bool IsAcyclicGraph(const QueryGraph *qg) {$/;"	f
IsNodePredicate	filter_tree/filter_tree.c	/^int IsNodePredicate(const FT_FilterNode *node) {$/;"	f
JoinClone	execution_plan/ops/op_join.c	/^static inline OpBase *JoinClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
JoinConsume	execution_plan/ops/op_join.c	/^static Record JoinConsume(OpBase *opBase) {$/;"	f	file:
JoinInit	execution_plan/ops/op_join.c	/^static OpResult JoinInit(OpBase *opBase) {$/;"	f	file:
JoinReset	execution_plan/ops/op_join.c	/^static OpResult JoinReset(OpBase *opBase) {$/;"	f	file:
JsonEncoder_SIValue	util/json_encoder.c	/^char *JsonEncoder_SIValue(SIValue v) {$/;"	f
KEY_ISLT	datatypes/map.c	/^#define KEY_ISLT(/;"	d	file:
LAGRAPH_ERROR	algorithms/LAGraph_bfs_pushpull.c	/^#define LAGRAPH_ERROR(/;"	d	file:
LAGRAPH_FREE_ALL	algorithms/LAGraph_bfs_pushpull.c	/^#define LAGRAPH_FREE_ALL /;"	d	file:
LAGRAPH_MAX	algorithms/LAGraph_bfs_pushpull.c	/^#define LAGRAPH_MAX(/;"	d	file:
LAGRAPH_MIN	algorithms/LAGraph_bfs_pushpull.c	/^#define LAGRAPH_MIN(/;"	d	file:
LAGraph_PageRank	algorithms/pagerank.h	/^LAGraph_PageRank ;$/;"	t	typeref:struct:__anon94
LAGraph_bfs_pushpull	algorithms/LAGraph_bfs_pushpull.c	/^GrB_Info LAGraph_bfs_pushpull   \/\/ push-pull BFS, or push-only if AT = NULL$/;"	f
LAST_CHILD	arithmetic/algebraic_expression/utils.h	/^#define LAST_CHILD(/;"	d
LIBCYPHER-PARSER	Makefile	/^LIBCYPHER-PARSER=..\/deps\/libcypher-parser\/lib\/src\/.libs\/libcypher-parser.a$/;"	m
LIBCYPHER-PARSER_DIR	Makefile	/^LIBCYPHER-PARSER_DIR = ..\/deps\/libcypher-parser\/lib\/src$/;"	m
LIBS	Makefile	/^LIBS=$(RAX) $(GRAPHBLAS) $(REDISEARCH) $(LIBXXHASH) $(LIBCYPHER-PARSER)$/;"	m
LIBXXHASH	Makefile	/^LIBXXHASH=..\/deps\/xxHash\/libxxhash.a$/;"	m
LRU	util/cache/cache_array.h	/^	long long LRU;  \/\/ Indicates the time when the entry was last recently used.$/;"	m	struct:CacheEntry_t
LabelsContext	procedures/proc_labels.c	/^} LabelsContext;$/;"	t	typeref:struct:__anon6	file:
LeftChild	filter_tree/filter_tree.c	/^static inline FT_FilterNode *LeftChild(const FT_FilterNode *node) {$/;"	f	file:
LevelConnection	algorithms/all_paths.h	/^} LevelConnection;$/;"	t	typeref:struct:__anon92
LimitClone	execution_plan/ops/op_limit.c	/^static inline OpBase *LimitClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
LimitConsume	execution_plan/ops/op_limit.c	/^static Record LimitConsume(OpBase *opBase) {$/;"	f	file:
LimitFree	execution_plan/ops/op_limit.c	/^static void LimitFree(OpBase *opBase) {$/;"	f	file:
LimitReset	execution_plan/ops/op_limit.c	/^static OpResult LimitReset(OpBase *ctx) {$/;"	f	file:
ListComprehensionCtx	arithmetic/comprehension_funcs/comprehension_funcs.h	/^} ListComprehensionCtx;$/;"	t	typeref:struct:__anon122
ListComprehension_Clone	arithmetic/comprehension_funcs/comprehension_funcs.c	/^void *ListComprehension_Clone(void *orig) {$/;"	f
ListComprehension_Free	arithmetic/comprehension_funcs/comprehension_funcs.c	/^void ListComprehension_Free(void *ctx_ptr) {$/;"	f
LocateDistinctExpressions	execution_plan/ops/op_distinct.c	/^static void LocateDistinctExpressions(OpDistinct *op) {$/;"	f	file:
LongestPathGraph	algorithms/longest_path.c	/^QGNode *LongestPathGraph(const QueryGraph *g, int *level) {$/;"	f
LongestPathTree	algorithms/longest_path.c	/^QGNode *LongestPathTree(const QueryGraph *g, int *level) {$/;"	f
M	execution_plan/ops/op_conditional_traverse.h	/^	GrB_Matrix M;               \/\/ Algebraic expression result.$/;"	m	struct:__anon40
M	execution_plan/ops/op_expand_into.h	/^	GrB_Matrix M;               \/\/ Algebraic expression result.$/;"	m	struct:__anon54
MAINTAIN_TRANSPOSED_MATRICES	configuration/config.c	/^#define MAINTAIN_TRANSPOSED_MATRICES /;"	d	file:
MARK_HEADER_AS_DELETED	util/datablock/datablock.h	/^#define MARK_HEADER_AS_DELETED(/;"	d
MARK_HEADER_AS_NOT_DELETED	util/datablock/datablock.h	/^#define MARK_HEADER_AS_NOT_DELETED(/;"	d
MATRIX_POLICY	graph/graph.h	/^} MATRIX_POLICY;$/;"	t	typeref:enum:__anon83
MAX	util/cron.c	/^#define MAX(/;"	d	file:
MAX_QUEUED_QUERIES	configuration/config.c	/^#define MAX_QUEUED_QUERIES /;"	d	file:
MIN_REDIS_VERION_MAJOR	module.c	/^#define MIN_REDIS_VERION_MAJOR /;"	d	file:
MIN_REDIS_VERION_MINOR	module.c	/^#define MIN_REDIS_VERION_MINOR /;"	d	file:
MIN_REDIS_VERION_PATCH	module.c	/^#define MIN_REDIS_VERION_PATCH /;"	d	file:
MODIFIES_ISLT	ast/enrichment/annotate_project_all.c	/^#define MODIFIES_ISLT(/;"	d	file:
MODULE	Makefile	/^MODULE= $(LIBS) $(CC_OBJECTS)$/;"	m
MSB_MASK	graph/graph.h	/^#define MSB_MASK /;"	d
MSB_MASK_CMP	graph/graph.h	/^#define MSB_MASK_CMP /;"	d
M_CONST	value.h	/^	M_CONST = 0x4     \/\/ SIValue does not own its allocation, but its access is safe$/;"	e	enum:__anon97
M_NONE	value.h	/^	M_NONE = 0,       \/\/ SIValue is not heap-allocated$/;"	e	enum:__anon97
M_SELF	value.h	/^	M_SELF = 0x1,     \/\/ SIValue is responsible for freeing its reference$/;"	e	enum:__anon97
M_VOLATILE	value.h	/^	M_VOLATILE = 0x2, \/\/ SIValue does not own its reference and may go out of scope$/;"	e	enum:__anon97
Map	datatypes/map.h	/^typedef Pair *Map;$/;"	t
Map_Add	datatypes/map.c	/^void Map_Add$/;"	f
Map_Clone	datatypes/map.c	/^SIValue Map_Clone$/;"	f
Map_Compare	datatypes/map.c	/^int Map_Compare$/;"	f
Map_Contains	datatypes/map.c	/^bool Map_Contains$/;"	f
Map_Free	datatypes/map.c	/^void Map_Free$/;"	f
Map_Get	datatypes/map.c	/^bool Map_Get$/;"	f
Map_HashCode	datatypes/map.c	/^XXH64_hash_t Map_HashCode$/;"	f
Map_KeyCount	datatypes/map.c	/^uint Map_KeyCount$/;"	f
Map_KeyIdx	datatypes/map.c	/^static int Map_KeyIdx(SIValue map, SIValue key) {$/;"	f	file:
Map_Keys	datatypes/map.c	/^SIValue *Map_Keys$/;"	f
Map_New	datatypes/map.c	/^SIValue Map_New$/;"	f
Map_Remove	datatypes/map.c	/^void Map_Remove$/;"	f
Map_ToString	datatypes/map.c	/^void Map_ToString$/;"	f
MergeClone	execution_plan/ops/op_merge.c	/^static OpBase *MergeClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
MergeConsume	execution_plan/ops/op_merge.c	/^static Record MergeConsume(OpBase *opBase) {$/;"	f	file:
MergeCreateClone	execution_plan/ops/op_merge_create.c	/^static OpBase *MergeCreateClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
MergeCreateConsume	execution_plan/ops/op_merge_create.c	/^static Record MergeCreateConsume(OpBase *opBase) {$/;"	f	file:
MergeCreateFree	execution_plan/ops/op_merge_create.c	/^static void MergeCreateFree(OpBase *ctx) {$/;"	f	file:
MergeCreate_Commit	execution_plan/ops/op_merge_create.c	/^void MergeCreate_Commit(OpBase *opBase) {$/;"	f
MergeFree	execution_plan/ops/op_merge.c	/^static void MergeFree(OpBase *opBase) {$/;"	f	file:
MergeInit	execution_plan/ops/op_merge.c	/^static OpResult MergeInit(OpBase *opBase) {$/;"	f	file:
ModuleEventHandler_AUXAfterKeyspaceEvent	module_event_handlers.c	/^void ModuleEventHandler_AUXAfterKeyspaceEvent(void) {$/;"	f
ModuleEventHandler_AUXBeforeKeyspaceEvent	module_event_handlers.c	/^void ModuleEventHandler_AUXBeforeKeyspaceEvent(void) {$/;"	f
ModuleEventHandler_DecreaseDecodingGraphsCount	module_event_handlers.c	/^void ModuleEventHandler_DecreaseDecodingGraphsCount(void) {$/;"	f
ModuleEventHandler_IncreaseDecodingGraphsCount	module_event_handlers.c	/^void ModuleEventHandler_IncreaseDecodingGraphsCount(void) {$/;"	f
NODE_CHILD	arithmetic/arithmetic_expression.c	/^#define NODE_CHILD(/;"	d	file:
NODE_CHILD_COUNT	arithmetic/arithmetic_expression.c	/^#define NODE_CHILD_COUNT(/;"	d	file:
NODE_CREATION_BUFFER	configuration/config.c	/^#define NODE_CREATION_BUFFER /;"	d	file:
NODE_CTX_NEW	execution_plan/ops/shared/scan_functions.h	/^#define NODE_CTX_NEW(/;"	d
NODE_GET_LABEL	graph/entities/node.h	/^#define NODE_GET_LABEL(/;"	d
NODE_GET_LABEL_ID	graph/entities/node.h	/^#define NODE_GET_LABEL_ID(/;"	d
NOT_RESOLVED	execution_plan/optimizations/apply_join.c	/^#define NOT_RESOLVED /;"	d	file:
NewAggregateOp	execution_plan/ops/op_aggregate.c	/^OpBase *NewAggregateOp(const ExecutionPlan *plan, AR_ExpNode **exps, bool should_cache_records) {$/;"	f
NewAllNodeScanOp	execution_plan/ops/op_all_node_scan.c	/^OpBase *NewAllNodeScanOp(const ExecutionPlan *plan, const char *alias) {$/;"	f
NewApplyMultiplexerOp	execution_plan/ops/op_apply_multiplexer.c	/^OpBase *NewApplyMultiplexerOp(const ExecutionPlan *plan, AST_Operator boolean_operator) {$/;"	f
NewApplyOp	execution_plan/ops/op_apply.c	/^OpBase *NewApplyOp(const ExecutionPlan *plan) {$/;"	f
NewArgumentOp	execution_plan/ops/op_argument.c	/^OpBase *NewArgumentOp(const ExecutionPlan *plan, const char **variables) {$/;"	f
NewCartesianProductOp	execution_plan/ops/op_cartesian_product.c	/^OpBase *NewCartesianProductOp(const ExecutionPlan *plan) {$/;"	f
NewCondTraverseOp	execution_plan/ops/op_conditional_traverse.c	/^OpBase *NewCondTraverseOp(const ExecutionPlan *plan, Graph *g, AlgebraicExpression *ae) {$/;"	f
NewCondVarLenTraverseOp	execution_plan/ops/op_cond_var_len_traverse.c	/^OpBase *NewCondVarLenTraverseOp(const ExecutionPlan *plan, Graph *g, AlgebraicExpression *ae) {$/;"	f
NewCreateOp	execution_plan/ops/op_create.c	/^OpBase *NewCreateOp(const ExecutionPlan *plan, NodeCreateCtx *nodes, EdgeCreateCtx *edges) {$/;"	f
NewDeleteOp	execution_plan/ops/op_delete.c	/^OpBase *NewDeleteOp(const ExecutionPlan *plan, AR_ExpNode **exps) {$/;"	f
NewDistinctOp	execution_plan/ops/op_distinct.c	/^OpBase *NewDistinctOp(const ExecutionPlan *plan) {$/;"	f
NewExecutionPlan	execution_plan/execution_plan.c	/^ExecutionPlan *NewExecutionPlan(void) {$/;"	f
NewExpandIntoOp	execution_plan/ops/op_expand_into.c	/^OpBase *NewExpandIntoOp(const ExecutionPlan *plan, Graph *g, AlgebraicExpression *ae) {$/;"	f
NewFilterOp	execution_plan/ops/op_filter.c	/^OpBase *NewFilterOp(const ExecutionPlan *plan, FT_FilterNode *filterTree) {$/;"	f
NewGroup	grouping/group.c	/^Group *NewGroup(SIValue *keys, uint key_count, AR_ExpNode **funcs, uint func_count, Record r) {$/;"	f
NewIndexScanOp	execution_plan/ops/op_index_scan.c	/^OpBase *NewIndexScanOp(const ExecutionPlan *plan, Graph *g, NodeScanCtx n,$/;"	f
NewJoinOp	execution_plan/ops/op_join.c	/^OpBase *NewJoinOp(const ExecutionPlan *plan) {$/;"	f
NewLimitOp	execution_plan/ops/op_limit.c	/^OpBase *NewLimitOp(const ExecutionPlan *plan, AR_ExpNode *limit_exp) {$/;"	f
NewMergeCreateOp	execution_plan/ops/op_merge_create.c	/^OpBase *NewMergeCreateOp(const ExecutionPlan *plan, NodeCreateCtx *nodes, EdgeCreateCtx *edges) {$/;"	f
NewMergeOp	execution_plan/ops/op_merge.c	/^OpBase *NewMergeOp(const ExecutionPlan *plan, rax *on_match, rax *on_create) {$/;"	f
NewNodeByIdSeekOp	execution_plan/ops/op_node_by_id_seek.c	/^OpBase *NewNodeByIdSeekOp(const ExecutionPlan *plan, const char *alias, UnsignedRange *id_range) {$/;"	f
NewNodeByLabelScanOp	execution_plan/ops/op_node_by_label_scan.c	/^OpBase *NewNodeByLabelScanOp(const ExecutionPlan *plan, NodeScanCtx n) {$/;"	f
NewOptionalOp	execution_plan/ops/op_optional.c	/^OpBase *NewOptionalOp(const ExecutionPlan *plan) {$/;"	f
NewPendingCreationsContainer	execution_plan/ops/shared/create_functions.c	/^PendingCreations NewPendingCreationsContainer(NodeCreateCtx *nodes, EdgeCreateCtx *edges) {$/;"	f
NewProcCallOp	execution_plan/ops/op_procedure_call.c	/^OpBase *NewProcCallOp(const ExecutionPlan *plan, const char *proc_name, AR_ExpNode **arg_exps,$/;"	f
NewProjectOp	execution_plan/ops/op_project.c	/^OpBase *NewProjectOp(const ExecutionPlan *plan, AR_ExpNode **exps) {$/;"	f
NewResultSet	resultset/resultset.c	/^ResultSet *NewResultSet(RedisModuleCtx *ctx, ResultSetFormatterType format) {$/;"	f
NewResultsOp	execution_plan/ops/op_results.c	/^OpBase *NewResultsOp(const ExecutionPlan *plan) {$/;"	f
NewSemiApplyOp	execution_plan/ops/op_semi_apply.c	/^OpBase *NewSemiApplyOp(const ExecutionPlan *plan, bool anti) {$/;"	f
NewSkipOp	execution_plan/ops/op_skip.c	/^OpBase *NewSkipOp(const ExecutionPlan *plan, AR_ExpNode *skip_exp) {$/;"	f
NewSortOp	execution_plan/ops/op_sort.c	/^OpBase *NewSortOp(const ExecutionPlan *plan, AR_ExpNode **exps, int *directions) {$/;"	f
NewUnwindOp	execution_plan/ops/op_unwind.c	/^OpBase *NewUnwindOp(const ExecutionPlan *plan, AR_ExpNode *exp) {$/;"	f
NewUpdateOp	execution_plan/ops/op_update.c	/^OpBase *NewUpdateOp(const ExecutionPlan *plan, rax *update_exps) {$/;"	f
NewValueHashJoin	execution_plan/ops/op_value_hash_join.c	/^OpBase *NewValueHashJoin(const ExecutionPlan *plan, AR_ExpNode *lhs_exp, AR_ExpNode *rhs_exp) {$/;"	f
Node	graph/entities/node.h	/^} Node;$/;"	t	typeref:struct:__anon90
NodeByIdSeek	execution_plan/ops/op_node_by_id_seek.h	/^} NodeByIdSeek;$/;"	t	typeref:struct:__anon39
NodeByIdSeekClone	execution_plan/ops/op_node_by_id_seek.c	/^static OpBase *NodeByIdSeekClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
NodeByIdSeekConsume	execution_plan/ops/op_node_by_id_seek.c	/^static Record NodeByIdSeekConsume(OpBase *opBase) {$/;"	f	file:
NodeByIdSeekConsumeFromChild	execution_plan/ops/op_node_by_id_seek.c	/^static Record NodeByIdSeekConsumeFromChild(OpBase *opBase) {$/;"	f	file:
NodeByIdSeekFree	execution_plan/ops/op_node_by_id_seek.c	/^static void NodeByIdSeekFree(OpBase *opBase) {$/;"	f	file:
NodeByIdSeekInit	execution_plan/ops/op_node_by_id_seek.c	/^static OpResult NodeByIdSeekInit(OpBase *opBase) {$/;"	f	file:
NodeByIdSeekReset	execution_plan/ops/op_node_by_id_seek.c	/^static OpResult NodeByIdSeekReset(OpBase *ctx) {$/;"	f	file:
NodeByIdSeekToString	execution_plan/ops/op_node_by_id_seek.c	/^static inline int NodeByIdSeekToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
NodeByLabelScan	execution_plan/ops/op_node_by_label_scan.h	/^} NodeByLabelScan;$/;"	t	typeref:struct:__anon61
NodeByLabelScanClone	execution_plan/ops/op_node_by_label_scan.c	/^static OpBase *NodeByLabelScanClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
NodeByLabelScanConsume	execution_plan/ops/op_node_by_label_scan.c	/^static Record NodeByLabelScanConsume(OpBase *opBase) {$/;"	f	file:
NodeByLabelScanConsumeFromChild	execution_plan/ops/op_node_by_label_scan.c	/^static Record NodeByLabelScanConsumeFromChild(OpBase *opBase) {$/;"	f	file:
NodeByLabelScanFree	execution_plan/ops/op_node_by_label_scan.c	/^static void NodeByLabelScanFree(OpBase *op) {$/;"	f	file:
NodeByLabelScanInit	execution_plan/ops/op_node_by_label_scan.c	/^static OpResult NodeByLabelScanInit(OpBase *opBase) {$/;"	f	file:
NodeByLabelScanNoOp	execution_plan/ops/op_node_by_label_scan.c	/^static Record NodeByLabelScanNoOp(OpBase *opBase) {$/;"	f	file:
NodeByLabelScanOp_SetIDRange	execution_plan/ops/op_node_by_label_scan.c	/^void NodeByLabelScanOp_SetIDRange(NodeByLabelScan *op, UnsignedRange *id_range) {$/;"	f
NodeByLabelScanReset	execution_plan/ops/op_node_by_label_scan.c	/^static OpResult NodeByLabelScanReset(OpBase *ctx) {$/;"	f	file:
NodeByLabelScanToString	execution_plan/ops/op_node_by_label_scan.c	/^static inline int NodeByLabelScanToString(const OpBase *ctx, char *buf, uint buf_len) {$/;"	f	file:
NodeCreateCtx	ast/ast_shared.h	/^} NodeCreateCtx;$/;"	t	typeref:struct:__anon138
NodeCreateCtx_Clone	ast/ast_shared.c	/^NodeCreateCtx NodeCreateCtx_Clone(NodeCreateCtx ctx) {$/;"	f
NodeID	graph/entities/graph_entity.h	/^typedef GrB_Index NodeID;$/;"	t
NodeScanCtx	execution_plan/ops/shared/scan_functions.h	/^} NodeScanCtx;$/;"	t	typeref:struct:__anon56
Node_ToString	graph/entities/node.c	/^void Node_ToString(const Node *n, char **buffer, size_t *bufferLen, size_t *bytesWritten,$/;"	f
NumericRange	util/range/numeric_range.h	/^} NumericRange;$/;"	t	typeref:struct:__anon30
NumericRange_ContainsValue	util/range/numeric_range.c	/^bool NumericRange_ContainsValue(const NumericRange *range, double v) {$/;"	f
NumericRange_Free	util/range/numeric_range.c	/^void NumericRange_Free(NumericRange *range) {$/;"	f
NumericRange_IsValid	util/range/numeric_range.c	/^bool NumericRange_IsValid(const NumericRange *range) {$/;"	f
NumericRange_New	util/range/numeric_range.c	/^NumericRange *NumericRange_New(void) {$/;"	f
NumericRange_TightenRange	util/range/numeric_range.c	/^void NumericRange_TightenRange(NumericRange *range, int op, double v) {$/;"	f
NumericRange_ToString	util/range/numeric_range.c	/^void NumericRange_ToString(const NumericRange *range) {$/;"	f
OMP_THREAD_COUNT	configuration/config.c	/^#define OMP_THREAD_COUNT /;"	d	file:
OPType	execution_plan/ops/op.h	/^} OPType;$/;"	t	typeref:enum:__anon43
OPType_AGGREGATE	execution_plan/ops/op.h	/^	OPType_AGGREGATE,$/;"	e	enum:__anon43
OPType_ALL_NODE_SCAN	execution_plan/ops/op.h	/^	OPType_ALL_NODE_SCAN,$/;"	e	enum:__anon43
OPType_AND_APPLY_MULTIPLEXER	execution_plan/ops/op.h	/^	OPType_AND_APPLY_MULTIPLEXER,$/;"	e	enum:__anon43
OPType_ANTI_SEMI_APPLY	execution_plan/ops/op.h	/^	OPType_ANTI_SEMI_APPLY,$/;"	e	enum:__anon43
OPType_APPLY	execution_plan/ops/op.h	/^	OPType_APPLY,$/;"	e	enum:__anon43
OPType_ARGUMENT	execution_plan/ops/op.h	/^	OPType_ARGUMENT,$/;"	e	enum:__anon43
OPType_CARTESIAN_PRODUCT	execution_plan/ops/op.h	/^	OPType_CARTESIAN_PRODUCT,$/;"	e	enum:__anon43
OPType_CONDITIONAL_TRAVERSE	execution_plan/ops/op.h	/^	OPType_CONDITIONAL_TRAVERSE,$/;"	e	enum:__anon43
OPType_CONDITIONAL_VAR_LEN_TRAVERSE	execution_plan/ops/op.h	/^	OPType_CONDITIONAL_VAR_LEN_TRAVERSE,$/;"	e	enum:__anon43
OPType_CONDITIONAL_VAR_LEN_TRAVERSE_EXPAND_INTO	execution_plan/ops/op.h	/^	OPType_CONDITIONAL_VAR_LEN_TRAVERSE_EXPAND_INTO,$/;"	e	enum:__anon43
OPType_CREATE	execution_plan/ops/op.h	/^	OPType_CREATE,$/;"	e	enum:__anon43
OPType_DELETE	execution_plan/ops/op.h	/^	OPType_DELETE,$/;"	e	enum:__anon43
OPType_DISTINCT	execution_plan/ops/op.h	/^	OPType_DISTINCT,$/;"	e	enum:__anon43
OPType_EXPAND_INTO	execution_plan/ops/op.h	/^	OPType_EXPAND_INTO,$/;"	e	enum:__anon43
OPType_FILTER	execution_plan/ops/op.h	/^	OPType_FILTER,$/;"	e	enum:__anon43
OPType_INDEX_SCAN	execution_plan/ops/op.h	/^	OPType_INDEX_SCAN,$/;"	e	enum:__anon43
OPType_JOIN	execution_plan/ops/op.h	/^	OPType_JOIN,$/;"	e	enum:__anon43
OPType_LIMIT	execution_plan/ops/op.h	/^	OPType_LIMIT,$/;"	e	enum:__anon43
OPType_MERGE	execution_plan/ops/op.h	/^	OPType_MERGE,$/;"	e	enum:__anon43
OPType_MERGE_CREATE	execution_plan/ops/op.h	/^	OPType_MERGE_CREATE,$/;"	e	enum:__anon43
OPType_NODE_BY_ID_SEEK	execution_plan/ops/op.h	/^	OPType_NODE_BY_ID_SEEK,$/;"	e	enum:__anon43
OPType_NODE_BY_LABEL_AND_ID_SCAN	execution_plan/ops/op.h	/^	OPType_NODE_BY_LABEL_AND_ID_SCAN,$/;"	e	enum:__anon43
OPType_NODE_BY_LABEL_SCAN	execution_plan/ops/op.h	/^	OPType_NODE_BY_LABEL_SCAN,$/;"	e	enum:__anon43
OPType_OPTIONAL	execution_plan/ops/op.h	/^	OPType_OPTIONAL,$/;"	e	enum:__anon43
OPType_OR_APPLY_MULTIPLEXER	execution_plan/ops/op.h	/^	OPType_OR_APPLY_MULTIPLEXER,$/;"	e	enum:__anon43
OPType_PROC_CALL	execution_plan/ops/op.h	/^	OPType_PROC_CALL,$/;"	e	enum:__anon43
OPType_PROJECT	execution_plan/ops/op.h	/^	OPType_PROJECT,$/;"	e	enum:__anon43
OPType_RESULTS	execution_plan/ops/op.h	/^	OPType_RESULTS,$/;"	e	enum:__anon43
OPType_SEMI_APPLY	execution_plan/ops/op.h	/^	OPType_SEMI_APPLY,$/;"	e	enum:__anon43
OPType_SKIP	execution_plan/ops/op.h	/^	OPType_SKIP,$/;"	e	enum:__anon43
OPType_SORT	execution_plan/ops/op.h	/^	OPType_SORT,$/;"	e	enum:__anon43
OPType_UNWIND	execution_plan/ops/op.h	/^	OPType_UNWIND,$/;"	e	enum:__anon43
OPType_UPDATE	execution_plan/ops/op.h	/^	OPType_UPDATE,$/;"	e	enum:__anon43
OPType_VALUE_HASH_JOIN	execution_plan/ops/op.h	/^	OPType_VALUE_HASH_JOIN,$/;"	e	enum:__anon43
OP_AND	ast/ast_shared.h	/^	OP_AND = 4,$/;"	e	enum:__anon132
OP_CONTAINS	ast/ast_shared.h	/^	OP_CONTAINS = 18,$/;"	e	enum:__anon132
OP_COUNT	arithmetic/arithmetic_expression_construct.c	/^#define OP_COUNT /;"	d	file:
OP_DEPLETED	execution_plan/ops/op.h	/^	OP_DEPLETED = 1,$/;"	e	enum:__anon44
OP_DIV	ast/ast_shared.h	/^	OP_DIV = 15,$/;"	e	enum:__anon132
OP_ENDSWITH	ast/ast_shared.h	/^	OP_ENDSWITH = 20,$/;"	e	enum:__anon132
OP_EQUAL	ast/ast_shared.h	/^	OP_EQUAL = 6,$/;"	e	enum:__anon132
OP_ERR	execution_plan/ops/op.h	/^	OP_ERR = 8,$/;"	e	enum:__anon44
OP_GE	ast/ast_shared.h	/^	OP_GE = 11,$/;"	e	enum:__anon132
OP_GT	ast/ast_shared.h	/^	OP_GT = 9,$/;"	e	enum:__anon132
OP_IN	ast/ast_shared.h	/^	OP_IN = 21,$/;"	e	enum:__anon132
OP_IS_APPLY	execution_plan/ops/op.h	/^#define OP_IS_APPLY(/;"	d
OP_IS_NOT_NULL	ast/ast_shared.h	/^	OP_IS_NOT_NULL = 23$/;"	e	enum:__anon132
OP_IS_NULL	ast/ast_shared.h	/^	OP_IS_NULL = 22,$/;"	e	enum:__anon132
OP_LE	ast/ast_shared.h	/^	OP_LE = 10,$/;"	e	enum:__anon132
OP_LT	ast/ast_shared.h	/^	OP_LT = 8,$/;"	e	enum:__anon132
OP_MINUS	ast/ast_shared.h	/^	OP_MINUS = 13,$/;"	e	enum:__anon132
OP_MOD	ast/ast_shared.h	/^	OP_MOD = 16,$/;"	e	enum:__anon132
OP_MULT	ast/ast_shared.h	/^	OP_MULT = 14,$/;"	e	enum:__anon132
OP_NEQUAL	ast/ast_shared.h	/^	OP_NEQUAL = 7,$/;"	e	enum:__anon132
OP_NOT	ast/ast_shared.h	/^	OP_NOT = 5,$/;"	e	enum:__anon132
OP_NULL	ast/ast_shared.h	/^	OP_NULL = 1,$/;"	e	enum:__anon132
OP_OK	execution_plan/ops/op.h	/^	OP_OK = 4,$/;"	e	enum:__anon44
OP_OR	ast/ast_shared.h	/^	OP_OR = 2,$/;"	e	enum:__anon132
OP_PLUS	ast/ast_shared.h	/^	OP_PLUS = 12,$/;"	e	enum:__anon132
OP_POW	ast/ast_shared.h	/^	OP_POW = 17,$/;"	e	enum:__anon132
OP_REFRESH	execution_plan/ops/op.h	/^	OP_REFRESH = 2,$/;"	e	enum:__anon44
OP_REQUIRE_NEW_DATA	execution_plan/ops/op.h	/^#define OP_REQUIRE_NEW_DATA(/;"	d
OP_STARTSWITH	ast/ast_shared.h	/^	OP_STARTSWITH = 19,$/;"	e	enum:__anon132
OP_UNKNOWN	ast/ast_shared.h	/^	OP_UNKNOWN = 0,$/;"	e	enum:__anon132
OP_XOR	ast/ast_shared.h	/^	OP_XOR = 3,$/;"	e	enum:__anon132
OS	Makefile	/^	export OS = Linux$/;"	m
OS	Makefile	/^	export OS = Mac$/;"	m
ObjectID	util/object_pool/object_pool.c	/^typedef uint64_t ObjectID;$/;"	t	file:
ObjectPool	util/object_pool/object_pool.h	/^} ObjectPool;$/;"	t	typeref:struct:__anon22
ObjectPool_DeleteItem	util/object_pool/object_pool.c	/^void ObjectPool_DeleteItem(ObjectPool *pool, void *item) {$/;"	f
ObjectPool_Free	util/object_pool/object_pool.c	/^void ObjectPool_Free(ObjectPool *pool) {$/;"	f
ObjectPool_New	util/object_pool/object_pool.c	/^ObjectPool *ObjectPool_New(uint64_t itemCap, uint itemSize, void (*fp)(void *)) {$/;"	f
ObjectPool_NewItem	util/object_pool/object_pool.c	/^void *ObjectPool_NewItem(ObjectPool *pool) {$/;"	f
OpAggregate	execution_plan/ops/op_aggregate.h	/^} OpAggregate;$/;"	t	typeref:struct:__anon64
OpApplyMultiplexer	execution_plan/ops/op_apply_multiplexer.h	/^typedef struct OpApplyMultiplexer {$/;"	s
OpApplyMultiplexer	execution_plan/ops/op_apply_multiplexer.h	/^} OpApplyMultiplexer;$/;"	t	typeref:struct:OpApplyMultiplexer
OpApplyMultiplexerClone	execution_plan/ops/op_apply_multiplexer.c	/^static inline OpBase *OpApplyMultiplexerClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
OpApplyMultiplexerFree	execution_plan/ops/op_apply_multiplexer.c	/^static void OpApplyMultiplexerFree(OpBase *opBase) {$/;"	f	file:
OpApplyMultiplexerInit	execution_plan/ops/op_apply_multiplexer.c	/^static OpResult OpApplyMultiplexerInit(OpBase *opBase) {$/;"	f	file:
OpApplyMultiplexerReset	execution_plan/ops/op_apply_multiplexer.c	/^static OpResult OpApplyMultiplexerReset(OpBase *opBase) {$/;"	f	file:
OpBase	execution_plan/ops/op.h	/^struct OpBase {$/;"	s
OpBase	execution_plan/ops/op.h	/^typedef struct OpBase OpBase;$/;"	t	typeref:struct:OpBase
OpBase_AliasModifier	execution_plan/ops/op.c	/^int OpBase_AliasModifier(OpBase *op, const char *modifier, const char *alias) {$/;"	f
OpBase_Aware	execution_plan/ops/op.c	/^bool OpBase_Aware(OpBase *op, const char *alias, int *idx) {$/;"	f
OpBase_Clone	execution_plan/ops/op.c	/^OpBase *OpBase_Clone(const struct ExecutionPlan *plan, const OpBase *op) {$/;"	f
OpBase_CloneRecord	execution_plan/ops/op.c	/^Record OpBase_CloneRecord(Record r) {$/;"	f
OpBase_Consume	execution_plan/ops/op.c	/^inline Record OpBase_Consume(OpBase *op) {$/;"	f
OpBase_CreateRecord	execution_plan/ops/op.c	/^inline Record OpBase_CreateRecord(const OpBase *op) {$/;"	f
OpBase_DeleteRecord	execution_plan/ops/op.c	/^inline void OpBase_DeleteRecord(Record r) {$/;"	f
OpBase_Free	execution_plan/ops/op.c	/^void OpBase_Free(OpBase *op) {$/;"	f
OpBase_Init	execution_plan/ops/op.c	/^void OpBase_Init(OpBase *op, OPType type, const char *name, fpInit init, fpConsume consume,$/;"	f
OpBase_IsWriter	execution_plan/ops/op.c	/^bool OpBase_IsWriter(OpBase *op) {$/;"	f
OpBase_Modifies	execution_plan/ops/op.c	/^int OpBase_Modifies(OpBase *op, const char *alias) {$/;"	f
OpBase_Profile	execution_plan/ops/op.c	/^Record OpBase_Profile(OpBase *op) {$/;"	f
OpBase_PropagateFree	execution_plan/ops/op.c	/^void OpBase_PropagateFree(OpBase *op) {$/;"	f
OpBase_PropagateReset	execution_plan/ops/op.c	/^void OpBase_PropagateReset(OpBase *op) {$/;"	f
OpBase_ToString	execution_plan/ops/op.c	/^int OpBase_ToString(const OpBase *op, char *buff, uint buff_len) {$/;"	f
OpBase_Type	execution_plan/ops/op.c	/^inline OPType OpBase_Type(const OpBase *op) {$/;"	f
OpBase_UpdateConsume	execution_plan/ops/op.c	/^void OpBase_UpdateConsume(OpBase *op, fpConsume consume) {$/;"	f
OpCondTraverse	execution_plan/ops/op_conditional_traverse.h	/^} OpCondTraverse;$/;"	t	typeref:struct:__anon40
OpCreate	execution_plan/ops/op_create.h	/^} OpCreate;$/;"	t	typeref:struct:__anon68
OpDelete	execution_plan/ops/op_delete.h	/^} OpDelete;$/;"	t	typeref:struct:__anon55
OpDistinct	execution_plan/ops/op_distinct.h	/^} OpDistinct;$/;"	t	typeref:struct:__anon51
OpExpandInto	execution_plan/ops/op_expand_into.h	/^} OpExpandInto;$/;"	t	typeref:struct:__anon54
OpFilter	execution_plan/ops/op_filter.h	/^} OpFilter;$/;"	t	typeref:struct:__anon67
OpJoin	execution_plan/ops/op_join.h	/^} OpJoin;$/;"	t	typeref:struct:__anon42
OpLimit	execution_plan/ops/op_limit.h	/^} OpLimit;$/;"	t	typeref:struct:__anon53
OpMerge	execution_plan/ops/op_merge.h	/^} OpMerge;$/;"	t	typeref:struct:__anon71
OpMergeCreate	execution_plan/ops/op_merge_create.h	/^} OpMergeCreate;$/;"	t	typeref:struct:__anon62
OpName	arithmetic/arithmetic_expression_construct.c	/^static const char *OpName[OP_COUNT] = {$/;"	v	file:
OpProcCall	execution_plan/ops/op_procedure_call.h	/^} OpProcCall;$/;"	t	typeref:struct:__anon70
OpProject	execution_plan/ops/op_project.h	/^} OpProject;$/;"	t	typeref:struct:__anon73
OpResult	execution_plan/ops/op.h	/^} OpResult;$/;"	t	typeref:enum:__anon44
OpSemiApply	execution_plan/ops/op_semi_apply.h	/^typedef struct OpSemiApply {$/;"	s
OpSemiApply	execution_plan/ops/op_semi_apply.h	/^} OpSemiApply;$/;"	t	typeref:struct:OpSemiApply
OpSkip	execution_plan/ops/op_skip.h	/^} OpSkip;$/;"	t	typeref:struct:__anon63
OpSort	execution_plan/ops/op_sort.h	/^} OpSort;$/;"	t	typeref:struct:__anon49
OpStats	execution_plan/ops/op.h	/^}  OpStats;$/;"	t	typeref:struct:__anon45
OpUnwind	execution_plan/ops/op_unwind.h	/^} OpUnwind;$/;"	t	typeref:struct:__anon46
OpUpdate	execution_plan/ops/op_update.h	/^} OpUpdate;$/;"	t	typeref:struct:__anon66
OpValueHashJoin	execution_plan/ops/op_value_hash_join.h	/^} OpValueHashJoin;$/;"	t	typeref:struct:__anon41
Optional	execution_plan/ops/op_optional.h	/^} Optional;$/;"	t	typeref:struct:__anon74
OptionalClone	execution_plan/ops/op_optional.c	/^static inline OpBase *OptionalClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
OptionalConsume	execution_plan/ops/op_optional.c	/^static Record OptionalConsume(OpBase *opBase) {$/;"	f	file:
OptionalReset	execution_plan/ops/op_optional.c	/^static OpResult OptionalReset(OpBase *opBase) {$/;"	f	file:
OrMultiplexer_Consume	execution_plan/ops/op_apply_multiplexer.c	/^static Record OrMultiplexer_Consume(OpBase *opBase) {$/;"	f	file:
OutputMap	execution_plan/ops/op_procedure_call.h	/^} OutputMap;$/;"	t	typeref:struct:__anon69
POOL_BLOCK_CAP	util/object_pool/object_pool.h	/^#define POOL_BLOCK_CAP /;"	d
PROCEDURE_DEPLETED	procedures/proc_ctx.h	/^	PROCEDURE_DEPLETED = (1 << 1),  \/\/ Once step can no longer produce data.$/;"	e	enum:__anon8
PROCEDURE_ERR	procedures/proc_ctx.h	/^	PROCEDURE_ERR = (1 << 0),$/;"	e	enum:__anon7
PROCEDURE_ERROR	procedures/proc_ctx.h	/^	PROCEDURE_ERROR = (1 << 2),     \/\/ Whenever an error occurred.$/;"	e	enum:__anon8
PROCEDURE_INIT	procedures/proc_ctx.h	/^	PROCEDURE_INIT = (1 << 0),      \/\/ Once invoked is called.$/;"	e	enum:__anon8
PROCEDURE_NOT_INIT	procedures/proc_ctx.h	/^	PROCEDURE_NOT_INIT = 0,         \/\/ Start state.$/;"	e	enum:__anon8
PROCEDURE_OK	procedures/proc_ctx.h	/^	PROCEDURE_OK = 0,$/;"	e	enum:__anon7
PROCEDURE_VARIABLE_ARG_COUNT	procedures/proc_ctx.h	/^#define PROCEDURE_VARIABLE_ARG_COUNT /;"	d
PROJECT_OPS	execution_plan/ops/op.h	/^static const OPType PROJECT_OPS[] = {OPType_PROJECT, OPType_AGGREGATE};$/;"	v
PROJECT_OP_COUNT	execution_plan/ops/op.h	/^#define PROJECT_OP_COUNT /;"	d
PROPERTY_NOTFOUND	graph/entities/graph_entity.c	/^SIValue *PROPERTY_NOTFOUND = &(SIValue) {$/;"	v
Pagerank	algorithms/pagerank.c	/^GrB_Info Pagerank               \/\/ GrB_SUCCESS or error condition$/;"	f
PagerankContext	procedures/proc_pagerank.c	/^} PagerankContext;$/;"	t	typeref:struct:__anon2	file:
Pair	datatypes/map.h	/^typedef struct Pair {$/;"	s
Pair	datatypes/map.h	/^} Pair;$/;"	t	typeref:struct:Pair
Pair_Free	datatypes/map.c	/^static void Pair_Free(Pair p) {$/;"	f	file:
Pair_New	datatypes/map.c	/^static inline Pair Pair_New(SIValue key, SIValue val) {$/;"	f	file:
Path	datatypes/path/path.h	/^} Path;$/;"	t	typeref:struct:__anon79
Path_AppendEdge	datatypes/path/path.c	/^void Path_AppendEdge(Path *p, Edge e) {$/;"	f
Path_AppendNode	datatypes/path/path.c	/^void Path_AppendNode(Path *p, Node n) {$/;"	f
Path_Clone	datatypes/path/path.c	/^Path *Path_Clone(const Path *p) {$/;"	f
Path_ContainsNode	datatypes/path/path.c	/^bool Path_ContainsNode(const Path *p, Node *n) {$/;"	f
Path_EdgeCount	datatypes/path/path.c	/^size_t Path_EdgeCount(const Path *p) {$/;"	f
Path_Free	datatypes/path/path.c	/^void Path_Free(Path *p) {$/;"	f
Path_GetEdge	datatypes/path/path.c	/^Edge *Path_GetEdge(const Path *p, int index) {$/;"	f
Path_GetNode	datatypes/path/path.c	/^Node *Path_GetNode(const Path *p, int index) {$/;"	f
Path_Head	datatypes/path/path.c	/^Node Path_Head(Path *p) {$/;"	f
Path_Len	datatypes/path/path.c	/^size_t Path_Len(const Path *p) {$/;"	f
Path_New	datatypes/path/path.c	/^Path *Path_New(size_t len) {$/;"	f
Path_NodeCount	datatypes/path/path.c	/^size_t Path_NodeCount(const Path *p) {$/;"	f
Path_PopEdge	datatypes/path/path.c	/^Edge Path_PopEdge(Path *p) {$/;"	f
Path_PopNode	datatypes/path/path.c	/^Node Path_PopNode(Path *p) {$/;"	f
Path_Reverse	datatypes/path/path.c	/^void Path_Reverse(Path *p) {$/;"	f
PayloadInfo	serializers/serializers_include.h	/^} PayloadInfo;$/;"	t	typeref:struct:__anon102
PendingCreations	execution_plan/ops/shared/create_functions.h	/^} PendingCreations;$/;"	t	typeref:struct:__anon60
PendingCreationsFree	execution_plan/ops/shared/create_functions.c	/^void PendingCreationsFree(PendingCreations *pending) {$/;"	f
PendingProperties	execution_plan/ops/shared/create_functions.h	/^} PendingProperties;$/;"	t	typeref:struct:__anon59
PendingPropertiesFree	execution_plan/ops/shared/create_functions.c	/^void PendingPropertiesFree(PendingProperties *props) {$/;"	f
PendingUpdateCtx	execution_plan/ops/shared/update_functions.h	/^} PendingUpdateCtx;$/;"	t	typeref:struct:__anon57
PercContFinalize	arithmetic/aggregate_funcs/agg_funcs.c	/^void PercContFinalize(void *ctx_ptr) {$/;"	f
PercDiscFinalize	arithmetic/aggregate_funcs/agg_funcs.c	/^void PercDiscFinalize(void *ctx_ptr) {$/;"	f
Percentile_Free	arithmetic/aggregate_funcs/agg_funcs.c	/^void Percentile_Free(void *ctx_ptr) {$/;"	f
Point_lat	datatypes/point.c	/^float Point_lat(SIValue point) {$/;"	f
Point_lon	datatypes/point.c	/^float Point_lon(SIValue point) {$/;"	f
PrevSIType	serializers/decoders/prev/v5/decode_graph.c	/^} PrevSIType;$/;"	t	typeref:enum:__anon104	file:
ProcCallClone	execution_plan/ops/op_procedure_call.c	/^static OpBase *ProcCallClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ProcCallConsume	execution_plan/ops/op_procedure_call.c	/^static Record ProcCallConsume(OpBase *opBase) {$/;"	f	file:
ProcCallFree	execution_plan/ops/op_procedure_call.c	/^static void ProcCallFree(OpBase *ctx) {$/;"	f	file:
ProcCallReset	execution_plan/ops/op_procedure_call.c	/^static OpResult ProcCallReset(OpBase *ctx) {$/;"	f	file:
ProcCtxNew	procedures/procedure.c	/^ProcedureCtx *ProcCtxNew(const char *name,$/;"	f
ProcFree	procedures/proc_ctx.h	/^typedef ProcedureResult(*ProcFree)(struct ProcedureCtx *ctx);$/;"	t
ProcGenerator	procedures/proc_ctx.h	/^typedef struct ProcedureCtx *(*ProcGenerator)(void);$/;"	t	typeref:struct:ProcGenerator
ProcInvoke	procedures/proc_ctx.h	/^typedef ProcedureResult(*ProcInvoke)(struct ProcedureCtx *ctx, const SIValue *args, const char **yield);$/;"	t
ProcProceduresPrivateData	procedures/proc_procedures.c	/^} ProcProceduresPrivateData;$/;"	t	typeref:struct:__anon10	file:
ProcStep	procedures/proc_ctx.h	/^typedef SIValue *(*ProcStep)(struct ProcedureCtx *ctx);$/;"	t
Proc_BFS_Ctx	procedures/proc_bfs.c	/^ProcedureCtx *Proc_BFS_Ctx() {$/;"	f
Proc_BFS_Free	procedures/proc_bfs.c	/^static ProcedureResult Proc_BFS_Free(ProcedureCtx *ctx) {$/;"	f	file:
Proc_BFS_Invoke	procedures/proc_bfs.c	/^static ProcedureResult Proc_BFS_Invoke(ProcedureCtx *ctx,$/;"	f	file:
Proc_BFS_Step	procedures/proc_bfs.c	/^static SIValue *Proc_BFS_Step(ProcedureCtx *ctx) {$/;"	f	file:
Proc_Free	procedures/procedure.c	/^void Proc_Free(ProcedureCtx *proc) {$/;"	f
Proc_FulltextCreateNodeIdxFree	procedures/proc_fulltext_create_index.c	/^ProcedureResult Proc_FulltextCreateNodeIdxFree(ProcedureCtx *ctx) {$/;"	f
Proc_FulltextCreateNodeIdxGen	procedures/proc_fulltext_create_index.c	/^ProcedureCtx *Proc_FulltextCreateNodeIdxGen() {$/;"	f
Proc_FulltextCreateNodeIdxInvoke	procedures/proc_fulltext_create_index.c	/^ProcedureResult Proc_FulltextCreateNodeIdxInvoke(ProcedureCtx *ctx,$/;"	f
Proc_FulltextCreateNodeIdxStep	procedures/proc_fulltext_create_index.c	/^SIValue *Proc_FulltextCreateNodeIdxStep(ProcedureCtx *ctx) {$/;"	f
Proc_FulltextDropIdxGen	procedures/proc_fulltext_drop_index.c	/^ProcedureCtx *Proc_FulltextDropIdxGen() {$/;"	f
Proc_FulltextDropIndexFree	procedures/proc_fulltext_drop_index.c	/^ProcedureResult Proc_FulltextDropIndexFree(ProcedureCtx *ctx) {$/;"	f
Proc_FulltextDropIndexInvoke	procedures/proc_fulltext_drop_index.c	/^ProcedureResult Proc_FulltextDropIndexInvoke(ProcedureCtx *ctx,$/;"	f
Proc_FulltextDropIndexStep	procedures/proc_fulltext_drop_index.c	/^SIValue *Proc_FulltextDropIndexStep(ProcedureCtx *ctx) {$/;"	f
Proc_FulltextQueryNodeFree	procedures/proc_fulltext_query.c	/^ProcedureResult Proc_FulltextQueryNodeFree(ProcedureCtx *ctx) {$/;"	f
Proc_FulltextQueryNodeGen	procedures/proc_fulltext_query.c	/^ProcedureCtx *Proc_FulltextQueryNodeGen() {$/;"	f
Proc_FulltextQueryNodeInvoke	procedures/proc_fulltext_query.c	/^ProcedureResult Proc_FulltextQueryNodeInvoke(ProcedureCtx *ctx, const SIValue *args, const char **yield) {$/;"	f
Proc_FulltextQueryNodeStep	procedures/proc_fulltext_query.c	/^SIValue *Proc_FulltextQueryNodeStep(ProcedureCtx *ctx) {$/;"	f
Proc_Get	procedures/procedure.c	/^ProcedureCtx *Proc_Get(const char *proc_name) {$/;"	f
Proc_IndexesCtx	procedures/proc_list_indexes.c	/^ProcedureCtx *Proc_IndexesCtx() {$/;"	f
Proc_IndexesFree	procedures/proc_list_indexes.c	/^ProcedureResult Proc_IndexesFree(ProcedureCtx *ctx) {$/;"	f
Proc_IndexesInvoke	procedures/proc_list_indexes.c	/^ProcedureResult Proc_IndexesInvoke(ProcedureCtx *ctx, const SIValue *args,$/;"	f
Proc_IndexesStep	procedures/proc_list_indexes.c	/^SIValue *Proc_IndexesStep(ProcedureCtx *ctx) {$/;"	f
Proc_Invoke	procedures/procedure.c	/^ProcedureResult Proc_Invoke(ProcedureCtx *proc, const SIValue *args, const char **yield) {$/;"	f
Proc_LabelsCtx	procedures/proc_labels.c	/^ProcedureCtx *Proc_LabelsCtx() {$/;"	f
Proc_LabelsFree	procedures/proc_labels.c	/^ProcedureResult Proc_LabelsFree(ProcedureCtx *ctx) {$/;"	f
Proc_LabelsInvoke	procedures/proc_labels.c	/^ProcedureResult Proc_LabelsInvoke(ProcedureCtx *ctx,$/;"	f
Proc_LabelsStep	procedures/proc_labels.c	/^SIValue *Proc_LabelsStep(ProcedureCtx *ctx) {$/;"	f
Proc_PagerankCtx	procedures/proc_pagerank.c	/^ProcedureCtx *Proc_PagerankCtx() {$/;"	f
Proc_PagerankFree	procedures/proc_pagerank.c	/^ProcedureResult Proc_PagerankFree(ProcedureCtx *ctx) {$/;"	f
Proc_PagerankInvoke	procedures/proc_pagerank.c	/^ProcedureResult Proc_PagerankInvoke(ProcedureCtx *ctx,$/;"	f
Proc_PagerankStep	procedures/proc_pagerank.c	/^SIValue *Proc_PagerankStep(ProcedureCtx *ctx) {$/;"	f
Proc_ProceduresCtx	procedures/proc_procedures.c	/^ProcedureCtx *Proc_ProceduresCtx() {$/;"	f
Proc_ProceduresFree	procedures/proc_procedures.c	/^ProcedureResult Proc_ProceduresFree(ProcedureCtx *ctx) {$/;"	f
Proc_ProceduresInvoke	procedures/proc_procedures.c	/^ProcedureResult Proc_ProceduresInvoke(ProcedureCtx *ctx,$/;"	f
Proc_ProceduresStep	procedures/proc_procedures.c	/^SIValue *Proc_ProceduresStep(ProcedureCtx *ctx) {$/;"	f
Proc_PropKeysCtx	procedures/proc_property_keys.c	/^ProcedureCtx *Proc_PropKeysCtx() {$/;"	f
Proc_PropKeysFree	procedures/proc_property_keys.c	/^ProcedureResult Proc_PropKeysFree(ProcedureCtx *ctx) {$/;"	f
Proc_PropKeysInvoke	procedures/proc_property_keys.c	/^ProcedureResult Proc_PropKeysInvoke(ProcedureCtx *ctx, const SIValue *args, const char **yield) {$/;"	f
Proc_PropKeysStep	procedures/proc_property_keys.c	/^SIValue *Proc_PropKeysStep(ProcedureCtx *ctx) {$/;"	f
Proc_Register	procedures/procedure.c	/^void Proc_Register() {$/;"	f
Proc_RelationsCtx	procedures/proc_relations.c	/^ProcedureCtx *Proc_RelationsCtx() {$/;"	f
Proc_RelationsFree	procedures/proc_relations.c	/^ProcedureResult Proc_RelationsFree(ProcedureCtx *ctx) {$/;"	f
Proc_RelationsInvoke	procedures/proc_relations.c	/^ProcedureResult Proc_RelationsInvoke(ProcedureCtx *ctx, const SIValue *args, const char **yield) {$/;"	f
Proc_RelationsStep	procedures/proc_relations.c	/^SIValue *Proc_RelationsStep(ProcedureCtx *ctx) {$/;"	f
Proc_Step	procedures/procedure.c	/^SIValue *Proc_Step(ProcedureCtx *proc) {$/;"	f
ProcedureCtx	procedures/proc_ctx.h	/^struct ProcedureCtx {$/;"	s
ProcedureCtx	procedures/proc_ctx.h	/^typedef struct ProcedureCtx ProcedureCtx;$/;"	t	typeref:struct:ProcedureCtx
ProcedureOutput	procedures/proc_ctx.h	/^} ProcedureOutput;$/;"	t	typeref:struct:__anon9
ProcedureResult	procedures/proc_ctx.h	/^} ProcedureResult;$/;"	t	typeref:enum:__anon7
ProcedureState	procedures/proc_ctx.h	/^} ProcedureState;$/;"	t	typeref:enum:__anon8
Procedure_Argc	procedures/procedure.c	/^uint Procedure_Argc(const ProcedureCtx *proc) {$/;"	f
Procedure_ContainsOutput	procedures/procedure.c	/^bool Procedure_ContainsOutput(const ProcedureCtx *proc, const char *output) {$/;"	f
Procedure_GetName	procedures/procedure.c	/^const char *Procedure_GetName(const ProcedureCtx *proc) {$/;"	f
Procedure_GetOutput	procedures/procedure.c	/^const char *Procedure_GetOutput(const ProcedureCtx *proc, uint output_idx) {$/;"	f
Procedure_IsReadOnly	procedures/procedure.c	/^bool Procedure_IsReadOnly(const ProcedureCtx *proc) {$/;"	f
Procedure_OutputCount	procedures/procedure.c	/^uint Procedure_OutputCount(const ProcedureCtx *proc) {$/;"	f
ProjectClone	execution_plan/ops/op_project.c	/^static OpBase *ProjectClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ProjectConsume	execution_plan/ops/op_project.c	/^static Record ProjectConsume(OpBase *opBase) {$/;"	f	file:
ProjectFree	execution_plan/ops/op_project.c	/^static void ProjectFree(OpBase *ctx) {$/;"	f	file:
PropertyMap	ast/ast_shared.h	/^} PropertyMap;$/;"	t	typeref:struct:__anon133
PropertyMap_Free	ast/ast_shared.c	/^void PropertyMap_Free(PropertyMap *map) {$/;"	f
PropertyMap_New	ast/ast_shared.c	/^PropertyMap *PropertyMap_New(GraphContext *gc, const cypher_astnode_t *props) {$/;"	f
PropertySetCtx	ast/ast_shared.h	/^} PropertySetCtx;$/;"	t	typeref:struct:__anon135
QGEdge	graph/entities/qg_edge.h	/^struct QGEdge {$/;"	s
QGEdge	graph/entities/qg_edge.h	/^typedef struct QGEdge QGEdge;$/;"	t	typeref:struct:QGEdge
QGEdge_Clone	graph/entities/qg_edge.c	/^QGEdge *QGEdge_Clone(const QGEdge *orig) {$/;"	f
QGEdge_Free	graph/entities/qg_edge.c	/^void QGEdge_Free(QGEdge *e) {$/;"	f
QGEdge_New	graph/entities/qg_edge.c	/^QGEdge *QGEdge_New(const char *relationship, const char *alias) {$/;"	f
QGEdge_Reverse	graph/entities/qg_edge.c	/^void QGEdge_Reverse(QGEdge *e) {$/;"	f
QGEdge_ToString	graph/entities/qg_edge.c	/^int QGEdge_ToString(const QGEdge *e, char *buff, int buff_len) {$/;"	f
QGEdge_VariableLength	graph/entities/qg_edge.c	/^bool QGEdge_VariableLength(const QGEdge *e) {$/;"	f
QGNode	graph/entities/qg_node.h	/^} QGNode;$/;"	t	typeref:struct:__anon85
QGNode_Clone	graph/entities/qg_node.c	/^QGNode *QGNode_Clone(const QGNode *orig) {$/;"	f
QGNode_ConnectNode	graph/entities/qg_node.c	/^void QGNode_ConnectNode(QGNode *src, QGNode *dest, QGEdge *e) {$/;"	f
QGNode_Degree	graph/entities/qg_node.c	/^int QGNode_Degree(const QGNode *n) {$/;"	f
QGNode_EdgeCount	graph/entities/qg_node.c	/^int QGNode_EdgeCount(const QGNode *n) {$/;"	f
QGNode_Free	graph/entities/qg_node.c	/^void QGNode_Free(QGNode *node) {$/;"	f
QGNode_HighlyConnected	graph/entities/qg_node.c	/^bool QGNode_HighlyConnected(const QGNode *n) {$/;"	f
QGNode_IncomeDegree	graph/entities/qg_node.c	/^int QGNode_IncomeDegree(const QGNode *n) {$/;"	f
QGNode_LabelCount	graph/entities/qg_node.c	/^uint QGNode_LabelCount(const QGNode *n) {$/;"	f
QGNode_New	graph/entities/qg_node.c	/^QGNode *QGNode_New(const char *alias) {$/;"	f
QGNode_OutgoingDegree	graph/entities/qg_node.c	/^int QGNode_OutgoingDegree(const QGNode *n) {$/;"	f
QGNode_RemoveIncomingEdge	graph/entities/qg_node.c	/^void QGNode_RemoveIncomingEdge(QGNode *n, QGEdge *e) {$/;"	f
QGNode_RemoveOutgoingEdge	graph/entities/qg_node.c	/^void QGNode_RemoveOutgoingEdge(QGNode *n, QGEdge *e) {$/;"	f
QGNode_ToString	graph/entities/qg_node.c	/^int QGNode_ToString(const QGNode *n, char *buff, int buff_len) {$/;"	f
QSORT	util/qsort.h	/^#define QSORT(/;"	d
QUERY_MEM_CAPACITY	configuration/config.c	/^#define QUERY_MEM_CAPACITY /;"	d	file:
QUERY_MEM_CAPACITY_UNLIMITED	configuration/config.h	/^#define QUERY_MEM_CAPACITY_UNLIMITED /;"	d
QUEUED_QUERIES_UNLIMITED	configuration/config.c	/^#define QUEUED_QUERIES_UNLIMITED /;"	d	file:
QUIET_CC	Makefile	/^QUIET_CC = @printf '    %b %b\\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QueryCtx	query_ctx.h	/^} QueryCtx;$/;"	t	typeref:struct:__anon155
QueryCtx_BeginTimer	query_ctx.c	/^void QueryCtx_BeginTimer(void) {$/;"	f
QueryCtx_ForceUnlockCommit	query_ctx.c	/^void QueryCtx_ForceUnlockCommit() {$/;"	f
QueryCtx_Free	query_ctx.c	/^void QueryCtx_Free(void) {$/;"	f
QueryCtx_GetAST	query_ctx.c	/^AST *QueryCtx_GetAST(void) {$/;"	f
QueryCtx_GetExecutionTime	query_ctx.c	/^double QueryCtx_GetExecutionTime(void) {$/;"	f
QueryCtx_GetGraph	query_ctx.c	/^Graph *QueryCtx_GetGraph(void) {$/;"	f
QueryCtx_GetGraphCtx	query_ctx.c	/^GraphContext *QueryCtx_GetGraphCtx(void) {$/;"	f
QueryCtx_GetParams	query_ctx.c	/^rax *QueryCtx_GetParams(void) {$/;"	f
QueryCtx_GetQueryCtx	query_ctx.c	/^inline QueryCtx *QueryCtx_GetQueryCtx() {$/;"	f
QueryCtx_GetRedisModuleCtx	query_ctx.c	/^RedisModuleCtx *QueryCtx_GetRedisModuleCtx(void) {$/;"	f
QueryCtx_GetResultSet	query_ctx.c	/^ResultSet *QueryCtx_GetResultSet(void) {$/;"	f
QueryCtx_GetResultSetStatistics	query_ctx.c	/^ResultSetStatistics *QueryCtx_GetResultSetStatistics(void) {$/;"	f
QueryCtx_GlobalExecCtx	query_ctx.h	/^} QueryCtx_GlobalExecCtx;$/;"	t	typeref:struct:__anon154
QueryCtx_Init	query_ctx.c	/^bool QueryCtx_Init(void) {$/;"	f
QueryCtx_InternalExecCtx	query_ctx.h	/^} QueryCtx_InternalExecCtx;$/;"	t	typeref:struct:__anon153
QueryCtx_LockForCommit	query_ctx.c	/^bool QueryCtx_LockForCommit(void) {$/;"	f
QueryCtx_PrintQuery	query_ctx.c	/^void QueryCtx_PrintQuery(void) {$/;"	f
QueryCtx_QueryData	query_ctx.h	/^} QueryCtx_QueryData;$/;"	t	typeref:struct:__anon152
QueryCtx_RemoveFromTLS	query_ctx.c	/^inline void QueryCtx_RemoveFromTLS() {$/;"	f
QueryCtx_SetAST	query_ctx.c	/^void QueryCtx_SetAST(AST *ast) {$/;"	f
QueryCtx_SetGlobalExecutionCtx	query_ctx.c	/^void QueryCtx_SetGlobalExecutionCtx(CommandCtx *cmd_ctx) {$/;"	f
QueryCtx_SetGraphCtx	query_ctx.c	/^void QueryCtx_SetGraphCtx(GraphContext *gc) {$/;"	f
QueryCtx_SetLastWriter	query_ctx.c	/^void QueryCtx_SetLastWriter(OpBase *last_writer) {$/;"	f
QueryCtx_SetResultSet	query_ctx.c	/^void QueryCtx_SetResultSet(ResultSet *result_set) {$/;"	f
QueryCtx_SetTLS	query_ctx.c	/^inline void QueryCtx_SetTLS(QueryCtx *query_ctx) {$/;"	f
QueryCtx_UnlockCommit	query_ctx.c	/^void QueryCtx_UnlockCommit(OpBase *writer_op) {$/;"	f
QueryGraph	graph/query_graph.h	/^} QueryGraph;$/;"	t	typeref:struct:__anon80
QueryGraph_AddNode	graph/query_graph.c	/^void QueryGraph_AddNode(QueryGraph *qg, QGNode *n) {$/;"	f
QueryGraph_AddPath	graph/query_graph.c	/^void QueryGraph_AddPath(QueryGraph *qg, const cypher_astnode_t *path) {$/;"	f
QueryGraph_Clone	graph/query_graph.c	/^QueryGraph *QueryGraph_Clone(const QueryGraph *qg) {$/;"	f
QueryGraph_ConnectNodes	graph/query_graph.c	/^void QueryGraph_ConnectNodes(QueryGraph *qg, QGNode *src, QGNode *dest, QGEdge *e) {$/;"	f
QueryGraph_ConnectedComponents	graph/query_graph.c	/^QueryGraph **QueryGraph_ConnectedComponents(const QueryGraph *qg) {$/;"	f
QueryGraph_EdgeCount	graph/query_graph.c	/^uint QueryGraph_EdgeCount(const QueryGraph *qg) {$/;"	f
QueryGraph_ExtractPaths	graph/query_graph.c	/^QueryGraph *QueryGraph_ExtractPaths(const QueryGraph *qg, const cypher_astnode_t **paths, uint n) {$/;"	f
QueryGraph_ExtractPatterns	graph/query_graph.c	/^QueryGraph *QueryGraph_ExtractPatterns(const QueryGraph *qg,$/;"	f
QueryGraph_Free	graph/query_graph.c	/^void QueryGraph_Free(QueryGraph *qg) {$/;"	f
QueryGraph_GetEdgeByAlias	graph/query_graph.c	/^QGEdge *QueryGraph_GetEdgeByAlias(const QueryGraph *qg, const char *alias) {$/;"	f
QueryGraph_GetEntityTypeByAlias	graph/query_graph.c	/^EntityType QueryGraph_GetEntityTypeByAlias(const QueryGraph *qg, const char *alias) {$/;"	f
QueryGraph_GetNodeByAlias	graph/query_graph.c	/^QGNode *QueryGraph_GetNodeByAlias(const QueryGraph *qg, const char *alias) {$/;"	f
QueryGraph_MatrixRepresentation	graph/query_graph.c	/^GrB_Matrix QueryGraph_MatrixRepresentation(const QueryGraph *qg) {$/;"	f
QueryGraph_MergeGraphs	graph/query_graph.c	/^void QueryGraph_MergeGraphs(QueryGraph *to, QueryGraph *from) {$/;"	f
QueryGraph_New	graph/query_graph.c	/^QueryGraph *QueryGraph_New(uint node_cap, uint edge_cap) {$/;"	f
QueryGraph_NodeCount	graph/query_graph.c	/^uint QueryGraph_NodeCount(const QueryGraph *qg) {$/;"	f
QueryGraph_Print	graph/query_graph.c	/^void QueryGraph_Print(const QueryGraph *qg) {$/;"	f
QueryGraph_RemoveEdge	graph/query_graph.c	/^QGEdge *QueryGraph_RemoveEdge(QueryGraph *qg, QGEdge *e) {$/;"	f
QueryGraph_RemoveNode	graph/query_graph.c	/^QGNode *QueryGraph_RemoveNode(QueryGraph *qg, QGNode *n) {$/;"	f
QueryGraph_ResolveUnknownRelIDs	graph/query_graph.c	/^void QueryGraph_ResolveUnknownRelIDs(QueryGraph *qg) {$/;"	f
QueryNodeContext	procedures/proc_fulltext_query.c	/^} QueryNodeContext;$/;"	t	typeref:struct:__anon5	file:
QueryTimedOut	commands/cmd_query.c	/^void QueryTimedOut(void *pdata) {$/;"	f
Query_SetTimeOut	commands/cmd_query.c	/^void Query_SetTimeOut(uint timeout, ExecutionPlan *plan) {$/;"	f
R	arithmetic/path_funcs/path_funcs.h	/^	GrB_Matrix R;                \/* Traversed relationship matrix *\/$/;"	m	struct:__anon121
RAX	Makefile	/^RAX=..\/deps\/rax\/rax.o$/;"	m
RAX_DIR	Makefile	/^RAX_DIR = ..\/deps\/rax$/;"	m
RECORD_SORT	execution_plan/ops/op_sort.c	/^#define RECORD_SORT(/;"	d	file:
RECORD_SORT_ON_ENTRY	execution_plan/ops/op_value_hash_join.c	/^#define RECORD_SORT_ON_ENTRY(/;"	d	file:
REC_TYPE_EDGE	execution_plan/record.h	/^	REC_TYPE_EDGE = 1 << 2,$/;"	e	enum:__anon33
REC_TYPE_HEADER	execution_plan/record.h	/^	REC_TYPE_HEADER = 1 << 3,$/;"	e	enum:__anon33
REC_TYPE_NODE	execution_plan/record.h	/^	REC_TYPE_NODE = 1 << 1,$/;"	e	enum:__anon33
REC_TYPE_SCALAR	execution_plan/record.h	/^	REC_TYPE_SCALAR = 1 << 0,$/;"	e	enum:__anon33
REC_TYPE_UNKNOWN	execution_plan/record.h	/^	REC_TYPE_UNKNOWN = 0,$/;"	e	enum:__anon33
REDISEARCH	Makefile	/^REDISEARCH=..\/deps\/RediSearch\/build\/libredisearch.a$/;"	m
REDISEARCH_DIR	Makefile	/^REDISEARCH_DIR = ..\/deps\/RediSearch\/src$/;"	m
REDISGRAPH_CC	Makefile	/^REDISGRAPH_CC=$(QUIET_CC)$(CC)$/;"	m
REDISGRAPH_MODULE_VERSION	version.h	/^#define REDISGRAPH_MODULE_VERSION /;"	d
REDISGRAPH_SEMANTIC_VERSION	version.h	/^#define REDISGRAPH_SEMANTIC_VERSION(/;"	d
REDISGRAPH_VERSION_MAJOR	version.h	/^#define REDISGRAPH_VERSION_MAJOR /;"	d
REDISGRAPH_VERSION_MINOR	version.h	/^#define REDISGRAPH_VERSION_MINOR /;"	d
REDISGRAPH_VERSION_PATCH	version.h	/^#define REDISGRAPH_VERSION_PATCH /;"	d
REDISMODULE_API	redismodule.h	/^#define REDISMODULE_API$/;"	d
REDISMODULE_APIVER_1	redismodule.h	/^#define REDISMODULE_APIVER_1 /;"	d
REDISMODULE_ATTR	redismodule.h	/^#define REDISMODULE_ATTR /;"	d
REDISMODULE_ATTR_COMMON	redismodule.h	/^#        define REDISMODULE_ATTR_COMMON /;"	d
REDISMODULE_ATTR_COMMON	redismodule.h	/^#        define REDISMODULE_ATTR_COMMON$/;"	d
REDISMODULE_ATTR_PRINTF	redismodule.h	/^#        define REDISMODULE_ATTR_PRINTF(/;"	d
REDISMODULE_ATTR_UNUSED	redismodule.h	/^#        define REDISMODULE_ATTR_UNUSED /;"	d
REDISMODULE_ATTR_UNUSED	redismodule.h	/^#        define REDISMODULE_ATTR_UNUSED$/;"	d
REDISMODULE_AUX_AFTER_RDB	redismodule.h	/^#define REDISMODULE_AUX_AFTER_RDB /;"	d
REDISMODULE_AUX_BEFORE_RDB	redismodule.h	/^#define REDISMODULE_AUX_BEFORE_RDB /;"	d
REDISMODULE_CLIENTINFO_FLAG_BLOCKED	redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_BLOCKED /;"	d
REDISMODULE_CLIENTINFO_FLAG_MULTI	redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_MULTI /;"	d
REDISMODULE_CLIENTINFO_FLAG_PUBSUB	redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_PUBSUB /;"	d
REDISMODULE_CLIENTINFO_FLAG_SSL	redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_SSL /;"	d
REDISMODULE_CLIENTINFO_FLAG_TRACKING	redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_TRACKING /;"	d
REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET	redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET /;"	d
REDISMODULE_CLIENTINFO_VERSION	redismodule.h	/^#define REDISMODULE_CLIENTINFO_VERSION /;"	d
REDISMODULE_CLUSTER_FLAG_NONE	redismodule.h	/^#define REDISMODULE_CLUSTER_FLAG_NONE /;"	d
REDISMODULE_CLUSTER_FLAG_NO_FAILOVER	redismodule.h	/^#define REDISMODULE_CLUSTER_FLAG_NO_FAILOVER /;"	d
REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION	redismodule.h	/^#define REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION /;"	d
REDISMODULE_CMDFILTER_NOSELF	redismodule.h	/^#define REDISMODULE_CMDFILTER_NOSELF /;"	d
REDISMODULE_CRON_LOOP_VERSION	redismodule.h	/^#define REDISMODULE_CRON_LOOP_VERSION /;"	d
REDISMODULE_CTX_FLAGS_ACTIVE_CHILD	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_ACTIVE_CHILD /;"	d
REDISMODULE_CTX_FLAGS_AOF	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_AOF /;"	d
REDISMODULE_CTX_FLAGS_CLUSTER	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_CLUSTER /;"	d
REDISMODULE_CTX_FLAGS_EVICT	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_EVICT /;"	d
REDISMODULE_CTX_FLAGS_IS_CHILD	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_IS_CHILD /;"	d
REDISMODULE_CTX_FLAGS_LOADING	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_LOADING /;"	d
REDISMODULE_CTX_FLAGS_LUA	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_LUA /;"	d
REDISMODULE_CTX_FLAGS_MASTER	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MASTER /;"	d
REDISMODULE_CTX_FLAGS_MAXMEMORY	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MAXMEMORY /;"	d
REDISMODULE_CTX_FLAGS_MULTI	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MULTI /;"	d
REDISMODULE_CTX_FLAGS_MULTI_DIRTY	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MULTI_DIRTY /;"	d
REDISMODULE_CTX_FLAGS_OOM	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_OOM /;"	d
REDISMODULE_CTX_FLAGS_OOM_WARNING	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_OOM_WARNING /;"	d
REDISMODULE_CTX_FLAGS_RDB	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_RDB /;"	d
REDISMODULE_CTX_FLAGS_READONLY	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_READONLY /;"	d
REDISMODULE_CTX_FLAGS_REPLICATED	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICATED /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING /;"	d
REDISMODULE_CTX_FLAGS_SLAVE	redismodule.h	/^#define REDISMODULE_CTX_FLAGS_SLAVE /;"	d
REDISMODULE_ERR	redismodule.h	/^#define REDISMODULE_ERR /;"	d
REDISMODULE_ERRORMSG_WRONGTYPE	redismodule.h	/^#define REDISMODULE_ERRORMSG_WRONGTYPE /;"	d
REDISMODULE_EVENT_CLIENT_CHANGE	redismodule.h	/^#define REDISMODULE_EVENT_CLIENT_CHANGE /;"	d
REDISMODULE_EVENT_CRON_LOOP	redismodule.h	/^#define REDISMODULE_EVENT_CRON_LOOP /;"	d
REDISMODULE_EVENT_FLUSHDB	redismodule.h	/^#define REDISMODULE_EVENT_FLUSHDB /;"	d
REDISMODULE_EVENT_LOADING	redismodule.h	/^#define REDISMODULE_EVENT_LOADING /;"	d
REDISMODULE_EVENT_LOADING_PROGRESS	redismodule.h	/^#define REDISMODULE_EVENT_LOADING_PROGRESS /;"	d
REDISMODULE_EVENT_MASTER_LINK_CHANGE	redismodule.h	/^#define REDISMODULE_EVENT_MASTER_LINK_CHANGE /;"	d
REDISMODULE_EVENT_MODULE_CHANGE	redismodule.h	/^#define REDISMODULE_EVENT_MODULE_CHANGE /;"	d
REDISMODULE_EVENT_PERSISTENCE	redismodule.h	/^#define REDISMODULE_EVENT_PERSISTENCE /;"	d
REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED	redismodule.h	/^#define REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED /;"	d
REDISMODULE_EVENT_REPLICA_CHANGE	redismodule.h	/^#define REDISMODULE_EVENT_REPLICA_CHANGE /;"	d
REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER	redismodule.h	/^#define REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER /;"	d
REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA	redismodule.h	/^#define REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA /;"	d
REDISMODULE_EVENT_SHUTDOWN	redismodule.h	/^#define REDISMODULE_EVENT_SHUTDOWN /;"	d
REDISMODULE_EVENT_SWAPDB	redismodule.h	/^#define REDISMODULE_EVENT_SWAPDB /;"	d
REDISMODULE_EXPERIMENTAL_API_VERSION	redismodule.h	/^#define REDISMODULE_EXPERIMENTAL_API_VERSION /;"	d
REDISMODULE_FLUSHINFO_VERSION	redismodule.h	/^#define REDISMODULE_FLUSHINFO_VERSION /;"	d
REDISMODULE_GET_API	redismodule.h	/^#define REDISMODULE_GET_API(/;"	d
REDISMODULE_H	redismodule.h	/^#define REDISMODULE_H$/;"	d
REDISMODULE_HASH_CFIELDS	redismodule.h	/^#define REDISMODULE_HASH_CFIELDS /;"	d
REDISMODULE_HASH_DELETE	redismodule.h	/^#define REDISMODULE_HASH_DELETE /;"	d
REDISMODULE_HASH_EXISTS	redismodule.h	/^#define REDISMODULE_HASH_EXISTS /;"	d
REDISMODULE_HASH_NONE	redismodule.h	/^#define REDISMODULE_HASH_NONE /;"	d
REDISMODULE_HASH_NX	redismodule.h	/^#define REDISMODULE_HASH_NX /;"	d
REDISMODULE_HASH_XX	redismodule.h	/^#define REDISMODULE_HASH_XX /;"	d
REDISMODULE_KEYTYPE_EMPTY	redismodule.h	/^#define REDISMODULE_KEYTYPE_EMPTY /;"	d
REDISMODULE_KEYTYPE_HASH	redismodule.h	/^#define REDISMODULE_KEYTYPE_HASH /;"	d
REDISMODULE_KEYTYPE_LIST	redismodule.h	/^#define REDISMODULE_KEYTYPE_LIST /;"	d
REDISMODULE_KEYTYPE_MODULE	redismodule.h	/^#define REDISMODULE_KEYTYPE_MODULE /;"	d
REDISMODULE_KEYTYPE_SET	redismodule.h	/^#define REDISMODULE_KEYTYPE_SET /;"	d
REDISMODULE_KEYTYPE_STREAM	redismodule.h	/^#define REDISMODULE_KEYTYPE_STREAM /;"	d
REDISMODULE_KEYTYPE_STRING	redismodule.h	/^#define REDISMODULE_KEYTYPE_STRING /;"	d
REDISMODULE_KEYTYPE_ZSET	redismodule.h	/^#define REDISMODULE_KEYTYPE_ZSET /;"	d
REDISMODULE_LIST_HEAD	redismodule.h	/^#define REDISMODULE_LIST_HEAD /;"	d
REDISMODULE_LIST_TAIL	redismodule.h	/^#define REDISMODULE_LIST_TAIL /;"	d
REDISMODULE_LOADING_PROGRESS_VERSION	redismodule.h	/^#define REDISMODULE_LOADING_PROGRESS_VERSION /;"	d
REDISMODULE_MODULE_CHANGE_VERSION	redismodule.h	/^#define REDISMODULE_MODULE_CHANGE_VERSION /;"	d
REDISMODULE_NEGATIVE_INFINITE	redismodule.h	/^#define REDISMODULE_NEGATIVE_INFINITE /;"	d
REDISMODULE_NODE_FAIL	redismodule.h	/^#define REDISMODULE_NODE_FAIL /;"	d
REDISMODULE_NODE_ID_LEN	redismodule.h	/^#define REDISMODULE_NODE_ID_LEN /;"	d
REDISMODULE_NODE_MASTER	redismodule.h	/^#define REDISMODULE_NODE_MASTER /;"	d
REDISMODULE_NODE_MYSELF	redismodule.h	/^#define REDISMODULE_NODE_MYSELF /;"	d
REDISMODULE_NODE_NOFAILOVER	redismodule.h	/^#define REDISMODULE_NODE_NOFAILOVER /;"	d
REDISMODULE_NODE_PFAIL	redismodule.h	/^#define REDISMODULE_NODE_PFAIL /;"	d
REDISMODULE_NODE_SLAVE	redismodule.h	/^#define REDISMODULE_NODE_SLAVE /;"	d
REDISMODULE_NOTIFY_ALL	redismodule.h	/^#define REDISMODULE_NOTIFY_ALL /;"	d
REDISMODULE_NOTIFY_EVICTED	redismodule.h	/^#define REDISMODULE_NOTIFY_EVICTED /;"	d
REDISMODULE_NOTIFY_EXPIRED	redismodule.h	/^#define REDISMODULE_NOTIFY_EXPIRED /;"	d
REDISMODULE_NOTIFY_GENERIC	redismodule.h	/^#define REDISMODULE_NOTIFY_GENERIC /;"	d
REDISMODULE_NOTIFY_HASH	redismodule.h	/^#define REDISMODULE_NOTIFY_HASH /;"	d
REDISMODULE_NOTIFY_KEYEVENT	redismodule.h	/^#define REDISMODULE_NOTIFY_KEYEVENT /;"	d
REDISMODULE_NOTIFY_KEYSPACE	redismodule.h	/^#define REDISMODULE_NOTIFY_KEYSPACE /;"	d
REDISMODULE_NOTIFY_KEY_MISS	redismodule.h	/^#define REDISMODULE_NOTIFY_KEY_MISS /;"	d
REDISMODULE_NOTIFY_LIST	redismodule.h	/^#define REDISMODULE_NOTIFY_LIST /;"	d
REDISMODULE_NOTIFY_LOADED	redismodule.h	/^#define REDISMODULE_NOTIFY_LOADED /;"	d
REDISMODULE_NOTIFY_SET	redismodule.h	/^#define REDISMODULE_NOTIFY_SET /;"	d
REDISMODULE_NOTIFY_STREAM	redismodule.h	/^#define REDISMODULE_NOTIFY_STREAM /;"	d
REDISMODULE_NOTIFY_STRING	redismodule.h	/^#define REDISMODULE_NOTIFY_STRING /;"	d
REDISMODULE_NOTIFY_ZSET	redismodule.h	/^#define REDISMODULE_NOTIFY_ZSET /;"	d
REDISMODULE_NOT_USED	redismodule.h	/^#define REDISMODULE_NOT_USED(/;"	d
REDISMODULE_NO_EXPIRE	redismodule.h	/^#define REDISMODULE_NO_EXPIRE /;"	d
REDISMODULE_OK	redismodule.h	/^#define REDISMODULE_OK /;"	d
REDISMODULE_OPEN_KEY_NOTOUCH	redismodule.h	/^#define REDISMODULE_OPEN_KEY_NOTOUCH /;"	d
REDISMODULE_OPTIONS_HANDLE_IO_ERRORS	redismodule.h	/^#define REDISMODULE_OPTIONS_HANDLE_IO_ERRORS /;"	d
REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED	redismodule.h	/^#define REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED /;"	d
REDISMODULE_POSITIVE_INFINITE	redismodule.h	/^#define REDISMODULE_POSITIVE_INFINITE /;"	d
REDISMODULE_POSTPONED_ARRAY_LEN	redismodule.h	/^#define REDISMODULE_POSTPONED_ARRAY_LEN /;"	d
REDISMODULE_READ	redismodule.h	/^#define REDISMODULE_READ /;"	d
REDISMODULE_REPLICATIONINFO_VERSION	redismodule.h	/^#define REDISMODULE_REPLICATIONINFO_VERSION /;"	d
REDISMODULE_REPLY_ARRAY	redismodule.h	/^#define REDISMODULE_REPLY_ARRAY /;"	d
REDISMODULE_REPLY_ERROR	redismodule.h	/^#define REDISMODULE_REPLY_ERROR /;"	d
REDISMODULE_REPLY_INTEGER	redismodule.h	/^#define REDISMODULE_REPLY_INTEGER /;"	d
REDISMODULE_REPLY_NULL	redismodule.h	/^#define REDISMODULE_REPLY_NULL /;"	d
REDISMODULE_REPLY_STRING	redismodule.h	/^#define REDISMODULE_REPLY_STRING /;"	d
REDISMODULE_REPLY_UNKNOWN	redismodule.h	/^#define REDISMODULE_REPLY_UNKNOWN /;"	d
REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED	redismodule.h	/^#define REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED /;"	d
REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED	redismodule.h	/^#define REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED /;"	d
REDISMODULE_SUBEVENT_FLUSHDB_END	redismodule.h	/^#define REDISMODULE_SUBEVENT_FLUSHDB_END /;"	d
REDISMODULE_SUBEVENT_FLUSHDB_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_FLUSHDB_START /;"	d
REDISMODULE_SUBEVENT_LOADING_AOF_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_AOF_START /;"	d
REDISMODULE_SUBEVENT_LOADING_ENDED	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_ENDED /;"	d
REDISMODULE_SUBEVENT_LOADING_FAILED	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_FAILED /;"	d
REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF /;"	d
REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB /;"	d
REDISMODULE_SUBEVENT_LOADING_RDB_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_RDB_START /;"	d
REDISMODULE_SUBEVENT_LOADING_REPL_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_REPL_START /;"	d
REDISMODULE_SUBEVENT_MASTER_LINK_DOWN	redismodule.h	/^#define REDISMODULE_SUBEVENT_MASTER_LINK_DOWN /;"	d
REDISMODULE_SUBEVENT_MASTER_LINK_UP	redismodule.h	/^#define REDISMODULE_SUBEVENT_MASTER_LINK_UP /;"	d
REDISMODULE_SUBEVENT_MODULE_LOADED	redismodule.h	/^#define REDISMODULE_SUBEVENT_MODULE_LOADED /;"	d
REDISMODULE_SUBEVENT_MODULE_UNLOADED	redismodule.h	/^#define REDISMODULE_SUBEVENT_MODULE_UNLOADED /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_ENDED	redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_ENDED /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_FAILED	redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_FAILED /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START	redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START /;"	d
REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE	redismodule.h	/^#define REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE /;"	d
REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE	redismodule.h	/^#define REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE /;"	d
REDISMODULE_SWAPDBINFO_VERSION	redismodule.h	/^#define REDISMODULE_SWAPDBINFO_VERSION /;"	d
REDISMODULE_TYPE_METHOD_VERSION	redismodule.h	/^#define REDISMODULE_TYPE_METHOD_VERSION /;"	d
REDISMODULE_WRITE	redismodule.h	/^#define REDISMODULE_WRITE /;"	d
REDISMODULE_ZADD_ADDED	redismodule.h	/^#define REDISMODULE_ZADD_ADDED /;"	d
REDISMODULE_ZADD_NOP	redismodule.h	/^#define REDISMODULE_ZADD_NOP /;"	d
REDISMODULE_ZADD_NX	redismodule.h	/^#define REDISMODULE_ZADD_NX /;"	d
REDISMODULE_ZADD_UPDATED	redismodule.h	/^#define REDISMODULE_ZADD_UPDATED /;"	d
REDISMODULE_ZADD_XX	redismodule.h	/^#define REDISMODULE_ZADD_XX /;"	d
RESIZE_TO_CAPACITY	graph/graph.h	/^	RESIZE_TO_CAPACITY,$/;"	e	enum:__anon83
RESULTSET_FULL	resultset/resultset.h	/^#define RESULTSET_FULL /;"	d
RESULTSET_OK	resultset/resultset.h	/^#define RESULTSET_OK /;"	d
RESULTSET_SIZE	configuration/config.c	/^#define RESULTSET_SIZE /;"	d	file:
RESULTSET_SIZE_UNLIMITED	configuration/config.h	/^#define RESULTSET_SIZE_UNLIMITED /;"	d
RG_AfterForkChild	module_event_handlers.c	/^static void RG_AfterForkChild() {$/;"	f	file:
RG_AfterForkParent	module_event_handlers.c	/^static void RG_AfterForkParent() {$/;"	f	file:
RG_Config	configuration/config.c	/^} RG_Config;$/;"	t	typeref:struct:__anon13	file:
RG_ForkPrepare	module_event_handlers.c	/^static void RG_ForkPrepare() {$/;"	f	file:
RG_GetRedisVersion	util/redis_version.c	/^Redis_Version RG_GetRedisVersion() {$/;"	f
RG_Matrix	graph/graph.h	/^typedef _RG_Matrix *RG_Matrix;$/;"	t
RG_Matrix_Free	graph/graph.c	/^static void RG_Matrix_Free(RG_Matrix matrix) {$/;"	f	file:
RG_Matrix_Get_GrB_Matrix	graph/graph.c	/^static inline GrB_Matrix RG_Matrix_Get_GrB_Matrix(RG_Matrix matrix) {$/;"	f	file:
RG_Matrix_IsDirty	graph/graph.c	/^static inline bool RG_Matrix_IsDirty(RG_Matrix matrix) {$/;"	f	file:
RG_Matrix_Lock	graph/graph.c	/^static inline void RG_Matrix_Lock(RG_Matrix matrix) {$/;"	f	file:
RG_Matrix_New	graph/graph.c	/^static RG_Matrix RG_Matrix_New(GrB_Type data_type, GrB_Index nrows, GrB_Index ncols) {$/;"	f	file:
RG_Matrix_SetDirty	graph/graph.c	/^static inline void RG_Matrix_SetDirty(RG_Matrix matrix) {$/;"	f	file:
RG_Matrix_SetUnDirty	graph/graph.c	/^static inline void RG_Matrix_SetUnDirty(RG_Matrix matrix) {$/;"	f	file:
RG_STRCASECMP	util/strcmp.h	/^#define RG_STRCASECMP(/;"	d
RG_STRCMP	util/strcmp.h	/^#define RG_STRCMP(/;"	d
RMAPI_FUNC_SUPPORTED	redismodule.h	/^#define RMAPI_FUNC_SUPPORTED(/;"	d
ROTL	util/siphash.c	/^#define ROTL(/;"	d	file:
RUNTIME_CONFIGS	configuration/config.h	/^static const Config_Option_Field RUNTIME_CONFIGS[] =$/;"	v
RUNTIME_CONFIG_COUNT	configuration/config.h	/^#define RUNTIME_CONFIG_COUNT /;"	d
RdbLoadDeletedEdges_v7	serializers/decoders/prev/v7/decode_graph_entities.c	/^void RdbLoadDeletedEdges_v7(RedisModuleIO *rdb, GraphContext *gc, uint64_t deleted_edge_count) {$/;"	f
RdbLoadDeletedEdges_v8	serializers/decoders/prev/v8/decode_graph_entities.c	/^void RdbLoadDeletedEdges_v8(RedisModuleIO *rdb, GraphContext *gc, uint64_t deleted_edge_count) {$/;"	f
RdbLoadDeletedEdges_v9	serializers/decoders/current/v9/decode_graph_entities.c	/^void RdbLoadDeletedEdges_v9(RedisModuleIO *rdb, GraphContext *gc, uint64_t deleted_edge_count) {$/;"	f
RdbLoadDeletedNodes_v7	serializers/decoders/prev/v7/decode_graph_entities.c	/^void RdbLoadDeletedNodes_v7(RedisModuleIO *rdb, GraphContext *gc, uint64_t deleted_node_count) {$/;"	f
RdbLoadDeletedNodes_v8	serializers/decoders/prev/v8/decode_graph_entities.c	/^void RdbLoadDeletedNodes_v8(RedisModuleIO *rdb, GraphContext *gc, uint64_t deleted_node_count) {$/;"	f
RdbLoadDeletedNodes_v9	serializers/decoders/current/v9/decode_graph_entities.c	/^void RdbLoadDeletedNodes_v9(RedisModuleIO *rdb, GraphContext *gc, uint64_t deleted_node_count) {$/;"	f
RdbLoadEdges_v7	serializers/decoders/prev/v7/decode_graph_entities.c	/^void RdbLoadEdges_v7(RedisModuleIO *rdb, GraphContext *gc, uint64_t edge_count) {$/;"	f
RdbLoadEdges_v8	serializers/decoders/prev/v8/decode_graph_entities.c	/^void RdbLoadEdges_v8(RedisModuleIO *rdb, GraphContext *gc, uint64_t edge_count) {$/;"	f
RdbLoadEdges_v9	serializers/decoders/current/v9/decode_graph_entities.c	/^void RdbLoadEdges_v9(RedisModuleIO *rdb, GraphContext *gc, uint64_t edge_count) {$/;"	f
RdbLoadGraph	serializers/decoders/decode_graph.c	/^GraphContext *RdbLoadGraph(RedisModuleIO *rdb) {$/;"	f
RdbLoadGraphContext_v5	serializers/decoders/prev/v5/decode_graphcontext.c	/^GraphContext *RdbLoadGraphContext_v5(RedisModuleIO *rdb) {$/;"	f
RdbLoadGraphContext_v6	serializers/decoders/prev/v6/decode_graphcontext.c	/^GraphContext *RdbLoadGraphContext_v6(RedisModuleIO *rdb) {$/;"	f
RdbLoadGraphContext_v7	serializers/decoders/prev/v7/decode_graph.c	/^GraphContext *RdbLoadGraphContext_v7(RedisModuleIO *rdb) {$/;"	f
RdbLoadGraphContext_v8	serializers/decoders/prev/v8/decode_graph.c	/^GraphContext *RdbLoadGraphContext_v8(RedisModuleIO *rdb) {$/;"	f
RdbLoadGraphSchema_v7	serializers/decoders/prev/v7/decode_graph_schema.c	/^void RdbLoadGraphSchema_v7(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f
RdbLoadGraphSchema_v8	serializers/decoders/prev/v8/decode_graph_schema.c	/^void RdbLoadGraphSchema_v8(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f
RdbLoadGraphSchema_v9	serializers/decoders/current/v9/decode_graph_schema.c	/^void RdbLoadGraphSchema_v9(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f
RdbLoadGraph_v5	serializers/decoders/prev/v5/decode_graph.c	/^void RdbLoadGraph_v5(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f
RdbLoadGraph_v6	serializers/decoders/prev/v6/decode_graph.c	/^void RdbLoadGraph_v6(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f
RdbLoadGraph_v9	serializers/decoders/current/v9/decode_graph.c	/^GraphContext *RdbLoadGraph_v9(RedisModuleIO *rdb) {$/;"	f
RdbLoadNodes_v7	serializers/decoders/prev/v7/decode_graph_entities.c	/^void RdbLoadNodes_v7(RedisModuleIO *rdb, GraphContext *gc, uint64_t node_count) {$/;"	f
RdbLoadNodes_v8	serializers/decoders/prev/v8/decode_graph_entities.c	/^void RdbLoadNodes_v8(RedisModuleIO *rdb, GraphContext *gc, uint64_t node_count) {$/;"	f
RdbLoadNodes_v9	serializers/decoders/current/v9/decode_graph_entities.c	/^void RdbLoadNodes_v9(RedisModuleIO *rdb, GraphContext *gc, uint64_t node_count) {$/;"	f
RdbLoadSchema_v5	serializers/decoders/prev/v5/decode_schema.c	/^Schema *RdbLoadSchema_v5(RedisModuleIO *rdb, SchemaType type) {$/;"	f
RdbLoadSchema_v6	serializers/decoders/prev/v6/decode_schema.c	/^Schema *RdbLoadSchema_v6(RedisModuleIO *rdb, SchemaType type) {$/;"	f
RdbSaveDeletedEdges_v9	serializers/encoder/v9/encode_graph_entities.c	/^void RdbSaveDeletedEdges_v9(RedisModuleIO *rdb, GraphContext *gc,$/;"	f
RdbSaveDeletedNodes_v9	serializers/encoder/v9/encode_graph_entities.c	/^void RdbSaveDeletedNodes_v9(RedisModuleIO *rdb, GraphContext *gc,$/;"	f
RdbSaveEdges_v9	serializers/encoder/v9/encode_graph_entities.c	/^void RdbSaveEdges_v9(RedisModuleIO *rdb, GraphContext *gc, uint64_t edges_to_encode) {$/;"	f
RdbSaveGraph	serializers/encoder/encode_graph.c	/^void RdbSaveGraph(RedisModuleIO *rdb, void *value) {$/;"	f
RdbSaveGraphSchema_v9	serializers/encoder/v9/encode_schema.c	/^void RdbSaveGraphSchema_v9(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f
RdbSaveGraph_v9	serializers/encoder/v9/encode_graph.c	/^void RdbSaveGraph_v9(RedisModuleIO *rdb, void *value) {$/;"	f
RdbSaveNodes_v9	serializers/encoder/v9/encode_graph_entities.c	/^void RdbSaveNodes_v9(RedisModuleIO *rdb, GraphContext *gc, uint64_t nodes_to_encode) {$/;"	f
Record	execution_plan/record.h	/^typedef _Record *Record;$/;"	t
RecordEntryType	execution_plan/record.h	/^} RecordEntryType;$/;"	t	typeref:enum:__anon33
Record_Add	execution_plan/record.c	/^void Record_Add(Record r, uint idx, SIValue v) {$/;"	f
Record_AddEdge	execution_plan/record.c	/^Edge *Record_AddEdge(Record r, uint idx, Edge edge) {$/;"	f
Record_AddNode	execution_plan/record.c	/^Node *Record_AddNode(Record r, uint idx, Node node) {$/;"	f
Record_AddScalar	execution_plan/record.c	/^SIValue *Record_AddScalar(Record r, uint idx, SIValue v) {$/;"	f
Record_Clone	execution_plan/record.c	/^void Record_Clone(const Record r, Record clone) {$/;"	f
Record_ContainsEntry	execution_plan/record.c	/^bool Record_ContainsEntry(const Record r, uint idx) {$/;"	f
Record_Free	execution_plan/record.c	/^void Record_Free(Record r) {$/;"	f
Record_FreeEntries	execution_plan/record.c	/^void Record_FreeEntries(Record r) {$/;"	f
Record_FreeEntry	execution_plan/record.c	/^inline void Record_FreeEntry(Record r, int idx) {$/;"	f
Record_Get	execution_plan/record.c	/^SIValue Record_Get(Record r, uint idx) {$/;"	f
Record_GetEdge	execution_plan/record.c	/^Edge *Record_GetEdge(const Record r, uint idx) {$/;"	f
Record_GetEntryIdx	execution_plan/record.c	/^uint Record_GetEntryIdx(Record r, const char *alias) {$/;"	f
Record_GetGraphEntity	execution_plan/record.c	/^GraphEntity *Record_GetGraphEntity(const Record r, uint idx) {$/;"	f
Record_GetMappings	execution_plan/record.c	/^inline rax *Record_GetMappings(const Record r) {$/;"	f
Record_GetNode	execution_plan/record.c	/^Node *Record_GetNode(const Record r, uint idx) {$/;"	f
Record_GetType	execution_plan/record.c	/^RecordEntryType Record_GetType(const Record r, uint idx) {$/;"	f
Record_Merge	execution_plan/record.c	/^void Record_Merge(Record a, const Record b) {$/;"	f
Record_New	execution_plan/record.c	/^Record Record_New(rax *mapping) {$/;"	f
Record_PersistScalars	execution_plan/record.c	/^void Record_PersistScalars(Record r) {$/;"	f
Record_Remove	execution_plan/record.c	/^void Record_Remove(Record r, uint idx) {$/;"	f
Record_ToString	execution_plan/record.c	/^size_t Record_ToString(const Record r, char **buf, size_t *buf_cap) {$/;"	f
Record_TransferEntries	execution_plan/record.c	/^void Record_TransferEntries(Record *to, Record from) {$/;"	f
Record_length	execution_plan/record.c	/^uint Record_length(const Record r) {$/;"	f
RedisModuleBlockedClient	redismodule.h	/^typedef struct RedisModuleBlockedClient RedisModuleBlockedClient;$/;"	t	typeref:struct:RedisModuleBlockedClient
RedisModuleCallReply	redismodule.h	/^typedef struct RedisModuleCallReply RedisModuleCallReply;$/;"	t	typeref:struct:RedisModuleCallReply
RedisModuleClientInfo	redismodule.h	/^#define RedisModuleClientInfo /;"	d
RedisModuleClientInfo	redismodule.h	/^typedef struct RedisModuleClientInfo {$/;"	s
RedisModuleClientInfoV1	redismodule.h	/^} RedisModuleClientInfoV1;$/;"	t	typeref:struct:RedisModuleClientInfo
RedisModuleClusterInfo	redismodule.h	/^typedef struct RedisModuleClusterInfo RedisModuleClusterInfo;$/;"	t	typeref:struct:RedisModuleClusterInfo
RedisModuleClusterMessageReceiver	redismodule.h	/^typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char *payload, uint32_t len);$/;"	t
RedisModuleCmdFunc	redismodule.h	/^typedef int (*RedisModuleCmdFunc)(RedisModuleCtx *ctx, RedisModuleString **argv, int argc);$/;"	t
RedisModuleCommandFilter	redismodule.h	/^typedef struct RedisModuleCommandFilter RedisModuleCommandFilter;$/;"	t	typeref:struct:RedisModuleCommandFilter
RedisModuleCommandFilterCtx	redismodule.h	/^typedef struct RedisModuleCommandFilterCtx RedisModuleCommandFilterCtx;$/;"	t	typeref:struct:RedisModuleCommandFilterCtx
RedisModuleCommandFilterFunc	redismodule.h	/^typedef void (*RedisModuleCommandFilterFunc) (RedisModuleCommandFilterCtx *filter);$/;"	t
RedisModuleCronLoop	redismodule.h	/^#define RedisModuleCronLoop /;"	d
RedisModuleCronLoopInfo	redismodule.h	/^typedef struct RedisModuleCronLoopInfo {$/;"	s
RedisModuleCronLoopV1	redismodule.h	/^} RedisModuleCronLoopV1;$/;"	t	typeref:struct:RedisModuleCronLoopInfo
RedisModuleCtx	redismodule.h	/^typedef struct RedisModuleCtx RedisModuleCtx;$/;"	t	typeref:struct:RedisModuleCtx
RedisModuleDict	redismodule.h	/^typedef struct RedisModuleDict RedisModuleDict;$/;"	t	typeref:struct:RedisModuleDict
RedisModuleDictIter	redismodule.h	/^typedef struct RedisModuleDictIter RedisModuleDictIter;$/;"	t	typeref:struct:RedisModuleDictIter
RedisModuleDigest	redismodule.h	/^typedef struct RedisModuleDigest RedisModuleDigest;$/;"	t	typeref:struct:RedisModuleDigest
RedisModuleDisconnectFunc	redismodule.h	/^typedef void (*RedisModuleDisconnectFunc)(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc);$/;"	t
RedisModuleEvent	redismodule.h	/^typedef struct RedisModuleEvent {$/;"	s
RedisModuleEvent	redismodule.h	/^} RedisModuleEvent;$/;"	t	typeref:struct:RedisModuleEvent
RedisModuleEventCallback	redismodule.h	/^typedef void (*RedisModuleEventCallback)(struct RedisModuleCtx *ctx, RedisModuleEvent eid, uint64_t subevent, void *data);$/;"	t
RedisModuleEvent_ClientChange	redismodule.h	/^    RedisModuleEvent_ClientChange = {$/;"	v
RedisModuleEvent_CronLoop	redismodule.h	/^    RedisModuleEvent_CronLoop = {$/;"	v
RedisModuleEvent_FlushDB	redismodule.h	/^    RedisModuleEvent_FlushDB = {$/;"	v
RedisModuleEvent_Loading	redismodule.h	/^    RedisModuleEvent_Loading = {$/;"	v
RedisModuleEvent_LoadingProgress	redismodule.h	/^    RedisModuleEvent_LoadingProgress = {$/;"	v
RedisModuleEvent_MasterLinkChange	redismodule.h	/^    RedisModuleEvent_MasterLinkChange = {$/;"	v
RedisModuleEvent_ModuleChange	redismodule.h	/^    RedisModuleEvent_ModuleChange = {$/;"	v
RedisModuleEvent_Persistence	redismodule.h	/^    RedisModuleEvent_Persistence = {$/;"	v
RedisModuleEvent_ReplicaChange	redismodule.h	/^    RedisModuleEvent_ReplicaChange = {$/;"	v
RedisModuleEvent_ReplicationRoleChanged	redismodule.h	/^    RedisModuleEvent_ReplicationRoleChanged = {$/;"	v
RedisModuleEvent_Shutdown	redismodule.h	/^    RedisModuleEvent_Shutdown = {$/;"	v
RedisModuleEvent_SwapDB	redismodule.h	/^    RedisModuleEvent_SwapDB = {$/;"	v
RedisModuleFlushInfo	redismodule.h	/^#define RedisModuleFlushInfo /;"	d
RedisModuleFlushInfo	redismodule.h	/^typedef struct RedisModuleFlushInfo {$/;"	s
RedisModuleFlushInfoV1	redismodule.h	/^} RedisModuleFlushInfoV1;$/;"	t	typeref:struct:RedisModuleFlushInfo
RedisModuleForkDoneHandler	redismodule.h	/^typedef void (*RedisModuleForkDoneHandler) (int exitcode, int bysignal, void *user_data);$/;"	t
RedisModuleIO	redismodule.h	/^typedef struct RedisModuleIO RedisModuleIO;$/;"	t	typeref:struct:RedisModuleIO
RedisModuleInfoCtx	redismodule.h	/^typedef struct RedisModuleInfoCtx RedisModuleInfoCtx;$/;"	t	typeref:struct:RedisModuleInfoCtx
RedisModuleInfoFunc	redismodule.h	/^typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);$/;"	t
RedisModuleKey	redismodule.h	/^typedef struct RedisModuleKey RedisModuleKey;$/;"	t	typeref:struct:RedisModuleKey
RedisModuleLoadingProgress	redismodule.h	/^#define RedisModuleLoadingProgress /;"	d
RedisModuleLoadingProgressInfo	redismodule.h	/^typedef struct RedisModuleLoadingProgressInfo {$/;"	s
RedisModuleLoadingProgressV1	redismodule.h	/^} RedisModuleLoadingProgressV1;$/;"	t	typeref:struct:RedisModuleLoadingProgressInfo
RedisModuleModuleChange	redismodule.h	/^#define RedisModuleModuleChange /;"	d
RedisModuleModuleChange	redismodule.h	/^typedef struct RedisModuleModuleChange {$/;"	s
RedisModuleModuleChangeV1	redismodule.h	/^} RedisModuleModuleChangeV1;$/;"	t	typeref:struct:RedisModuleModuleChange
RedisModuleNotificationFunc	redismodule.h	/^typedef int (*RedisModuleNotificationFunc)(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString *key);$/;"	t
RedisModuleReplicationInfo	redismodule.h	/^#define RedisModuleReplicationInfo /;"	d
RedisModuleReplicationInfo	redismodule.h	/^typedef struct RedisModuleReplicationInfo {$/;"	s
RedisModuleReplicationInfoV1	redismodule.h	/^} RedisModuleReplicationInfoV1;$/;"	t	typeref:struct:RedisModuleReplicationInfo
RedisModuleScanCB	redismodule.h	/^typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx, RedisModuleString *keyname, RedisModuleKey *key, void *privdata);$/;"	t
RedisModuleScanCursor	redismodule.h	/^typedef struct RedisModuleScanCursor RedisModuleScanCursor;$/;"	t	typeref:struct:RedisModuleScanCursor
RedisModuleScanKeyCB	redismodule.h	/^typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key, RedisModuleString *field, RedisModuleString *value, void *privdata);$/;"	t
RedisModuleServerInfoData	redismodule.h	/^typedef struct RedisModuleServerInfoData RedisModuleServerInfoData;$/;"	t	typeref:struct:RedisModuleServerInfoData
RedisModuleString	redismodule.h	/^#define RedisModuleString /;"	d
RedisModuleString	redismodule.h	/^typedef struct RedisModuleString RedisModuleString;$/;"	t	typeref:struct:RedisModuleString
RedisModuleSwapDbInfo	redismodule.h	/^#define RedisModuleSwapDbInfo /;"	d
RedisModuleSwapDbInfo	redismodule.h	/^typedef struct RedisModuleSwapDbInfo {$/;"	s
RedisModuleSwapDbInfoV1	redismodule.h	/^} RedisModuleSwapDbInfoV1;$/;"	t	typeref:struct:RedisModuleSwapDbInfo
RedisModuleTimerID	redismodule.h	/^typedef uint64_t RedisModuleTimerID;$/;"	t
RedisModuleTimerProc	redismodule.h	/^typedef void (*RedisModuleTimerProc)(RedisModuleCtx *ctx, void *data);$/;"	t
RedisModuleType	redismodule.h	/^typedef struct RedisModuleType RedisModuleType;$/;"	t	typeref:struct:RedisModuleType
RedisModuleTypeAuxLoadFunc	redismodule.h	/^typedef int (*RedisModuleTypeAuxLoadFunc)(RedisModuleIO *rdb, int encver, int when);$/;"	t
RedisModuleTypeAuxSaveFunc	redismodule.h	/^typedef void (*RedisModuleTypeAuxSaveFunc)(RedisModuleIO *rdb, int when);$/;"	t
RedisModuleTypeDigestFunc	redismodule.h	/^typedef void (*RedisModuleTypeDigestFunc)(RedisModuleDigest *digest, void *value);$/;"	t
RedisModuleTypeFreeFunc	redismodule.h	/^typedef void (*RedisModuleTypeFreeFunc)(void *value);$/;"	t
RedisModuleTypeLoadFunc	redismodule.h	/^typedef void *(*RedisModuleTypeLoadFunc)(RedisModuleIO *rdb, int encver);$/;"	t
RedisModuleTypeMemUsageFunc	redismodule.h	/^typedef size_t (*RedisModuleTypeMemUsageFunc)(const void *value);$/;"	t
RedisModuleTypeMethods	redismodule.h	/^typedef struct RedisModuleTypeMethods {$/;"	s
RedisModuleTypeMethods	redismodule.h	/^} RedisModuleTypeMethods;$/;"	t	typeref:struct:RedisModuleTypeMethods
RedisModuleTypeRewriteFunc	redismodule.h	/^typedef void (*RedisModuleTypeRewriteFunc)(RedisModuleIO *aof, RedisModuleString *key, void *value);$/;"	t
RedisModuleTypeSaveFunc	redismodule.h	/^typedef void (*RedisModuleTypeSaveFunc)(RedisModuleIO *rdb, void *value);$/;"	t
RedisModuleUser	redismodule.h	/^typedef struct RedisModuleUser RedisModuleUser;$/;"	t	typeref:struct:RedisModuleUser
RedisModuleUserChangedFunc	redismodule.h	/^typedef void (*RedisModuleUserChangedFunc) (uint64_t client_id, void *privdata);$/;"	t
RedisModule_Alloc_Orig	util/rmalloc.c	/^static void * (*RedisModule_Alloc_Orig)(size_t bytes);$/;"	v	file:
RedisModule_Assert	redismodule.h	/^#define RedisModule_Assert(/;"	d
RedisModule_Calloc_Orig	util/rmalloc.c	/^static void * (*RedisModule_Calloc_Orig)(size_t nmemb, size_t size);$/;"	v	file:
RedisModule_Free_Orig	util/rmalloc.c	/^static void (*RedisModule_Free_Orig)(void *ptr);$/;"	v	file:
RedisModule_Init	redismodule.h	/^static int RedisModule_Init(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {$/;"	f
RedisModule_IsAOFClient	redismodule.h	/^#define RedisModule_IsAOFClient(/;"	d
RedisModule_OnLoad	module.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
RedisModule_Realloc_Orig	util/rmalloc.c	/^static void * (*RedisModule_Realloc_Orig)(void *ptr, size_t bytes);$/;"	v	file:
RedisModule_Strdup_Orig	util/rmalloc.c	/^static char * (*RedisModule_Strdup_Orig)(const char *str);$/;"	v	file:
Redis_Version	util/redis_version.h	/^} Redis_Version;$/;"	t	typeref:struct:__anon32
Redis_Version_GreaterOrEqual	util/redis_version.c	/^inline bool Redis_Version_GreaterOrEqual(uint major, uint minor, uint patch) {$/;"	f
RegisterEventHandlers	module_event_handlers.c	/^void RegisterEventHandlers(RedisModuleCtx *ctx) {$/;"	f
Register_AggFuncs	arithmetic/aggregate_funcs/agg_funcs.c	/^void Register_AggFuncs() {$/;"	f
Register_BooleanFuncs	arithmetic/boolean_funcs/boolean_funcs.c	/^void Register_BooleanFuncs() {$/;"	f
Register_ComprehensionFuncs	arithmetic/comprehension_funcs/comprehension_funcs.c	/^void Register_ComprehensionFuncs() {$/;"	f
Register_ConditionalFuncs	arithmetic/conditional_funcs/conditional_funcs.c	/^void Register_ConditionalFuncs() {$/;"	f
Register_EntityFuncs	arithmetic/entity_funcs/entity_funcs.c	/^void Register_EntityFuncs() {$/;"	f
Register_ListFuncs	arithmetic/list_funcs/list_funcs.c	/^void Register_ListFuncs() {$/;"	f
Register_MapFuncs	arithmetic/map_funcs/map_funcs.c	/^void Register_MapFuncs() {$/;"	f
Register_NumericFuncs	arithmetic/numeric_funcs/numeric_funcs.c	/^void Register_NumericFuncs() {$/;"	f
Register_PathFuncs	arithmetic/path_funcs/path_funcs.c	/^void Register_PathFuncs() {$/;"	f
Register_PlaceholderFuncs	arithmetic/placeholder_funcs/placeholder_funcs.c	/^void Register_PlaceholderFuncs() {$/;"	f
Register_PointFuncs	arithmetic/point_funcs/point_funcs.c	/^void Register_PointFuncs() {$/;"	f
Register_StringFuncs	arithmetic/string_funcs/string_funcs.c	/^void Register_StringFuncs() {$/;"	f
Register_TimeFuncs	arithmetic/time_funcs/time_funcs.c	/^void Register_TimeFuncs() {$/;"	f
RelationsContext	procedures/proc_property_keys.c	/^} RelationsContext;$/;"	t	typeref:struct:__anon3	file:
RelationsContext	procedures/proc_relations.c	/^} RelationsContext;$/;"	t	typeref:struct:__anon4	file:
ResultSet	resultset/resultset.h	/^} ResultSet;$/;"	t	typeref:struct:__anon14
ResultSetFormatter	resultset/formatters/resultset_formatter.h	/^} ResultSetFormatter;$/;"	t	typeref:struct:__anon18
ResultSetFormatterCompact	resultset/formatters/resultset_formatters.h	/^static ResultSetFormatter ResultSetFormatterCompact __attribute__((used)) = {$/;"	v
ResultSetFormatterType	resultset/formatters/resultset_formatters.h	/^} ResultSetFormatterType;$/;"	t	typeref:enum:__anon15
ResultSetFormatterVerbose	resultset/formatters/resultset_formatters.h	/^static ResultSetFormatter ResultSetFormatterVerbose __attribute__((used)) = {$/;"	v
ResultSetFormatter_GetFormatter	resultset/formatters/resultset_formatters.c	/^ResultSetFormatter *ResultSetFormatter_GetFormatter(ResultSetFormatterType t) {$/;"	f
ResultSetNOP	resultset/formatters/resultset_formatters.h	/^static ResultSetFormatter ResultSetNOP __attribute__((used)) = {$/;"	v
ResultSetStat_IndicateModification	resultset/resultset_statistics.c	/^bool ResultSetStat_IndicateModification(ResultSetStatistics stats) {$/;"	f
ResultSetStatistics	resultset/resultset_statistics.h	/^} ResultSetStatistics;$/;"	t	typeref:struct:__anon19
ResultSet_AddRecord	resultset/resultset.c	/^int ResultSet_AddRecord(ResultSet *set, Record r) {$/;"	f
ResultSet_CachedExecution	resultset/resultset.c	/^void ResultSet_CachedExecution(ResultSet *set) {$/;"	f
ResultSet_EmitCompactRow	resultset/formatters/resultset_replycompact.c	/^void ResultSet_EmitCompactRow(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f
ResultSet_EmitNOPHeader	resultset/formatters/resultset_replynop.c	/^void ResultSet_EmitNOPHeader(RedisModuleCtx *ctx, const char **columns,$/;"	f
ResultSet_EmitNOPRow	resultset/formatters/resultset_replynop.c	/^void ResultSet_EmitNOPRow(RedisModuleCtx *ctx, GraphContext *gc, SIValue **row,$/;"	f
ResultSet_EmitVerboseRow	resultset/formatters/resultset_replyverbose.c	/^void ResultSet_EmitVerboseRow(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f
ResultSet_Free	resultset/resultset.c	/^void ResultSet_Free(ResultSet *set) {$/;"	f
ResultSet_IndexCreated	resultset/resultset.c	/^void ResultSet_IndexCreated(ResultSet *set, int status_code) {$/;"	f
ResultSet_IndexDeleted	resultset/resultset.c	/^void ResultSet_IndexDeleted(ResultSet *set, int status_code) {$/;"	f
ResultSet_MapProjection	resultset/resultset.c	/^void ResultSet_MapProjection(ResultSet *set, const Record r) {$/;"	f
ResultSet_Reply	resultset/resultset.c	/^void ResultSet_Reply(ResultSet *set) {$/;"	f
ResultSet_ReplyWithCompactHeader	resultset/formatters/resultset_replycompact.c	/^void ResultSet_ReplyWithCompactHeader(RedisModuleCtx *ctx, const char **columns,$/;"	f
ResultSet_ReplyWithVerboseHeader	resultset/formatters/resultset_replyverbose.c	/^void ResultSet_ReplyWithVerboseHeader(RedisModuleCtx *ctx, const char **columns,$/;"	f
ResultSet_ReportQueryRuntime	resultset/resultset.c	/^void ResultSet_ReportQueryRuntime(RedisModuleCtx *ctx) {$/;"	f
ResultSet_RowCount	resultset/resultset.c	/^uint64_t ResultSet_RowCount(const ResultSet *set) {$/;"	f
Results	execution_plan/ops/op_results.h	/^} Results;$/;"	t	typeref:struct:__anon75
ResultsClone	execution_plan/ops/op_results.c	/^static inline OpBase *ResultsClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ResultsConsume	execution_plan/ops/op_results.c	/^static Record ResultsConsume(OpBase *opBase) {$/;"	f	file:
ResultsInit	execution_plan/ops/op_results.c	/^static OpResult ResultsInit(OpBase *opBase) {$/;"	f	file:
RightChild	filter_tree/filter_tree.c	/^static inline FT_FilterNode *RightChild(const FT_FilterNode *node) {$/;"	f	file:
SAFE_COMPARISON_RESULT	value.h	/^#define SAFE_COMPARISON_RESULT(/;"	d
SCAN_OPS	execution_plan/ops/op.h	/^static const OPType SCAN_OPS[] = {OPType_ALL_NODE_SCAN, OPType_NODE_BY_LABEL_SCAN, OPType_INDEX_SCAN, OPType_NODE_BY_ID_SEEK, OPType_NODE_BY_LABEL_AND_ID_SCAN};$/;"	v
SCAN_OP_COUNT	execution_plan/ops/op.h	/^#define SCAN_OP_COUNT /;"	d
SCHEMA_EDGE	schema/schema.h	/^	SCHEMA_EDGE,$/;"	e	enum:__anon100
SCHEMA_NODE	schema/schema.h	/^	SCHEMA_NODE,$/;"	e	enum:__anon100
SDS_HDR	util/sds/sds.h	/^#define SDS_HDR(/;"	d
SDS_HDR_VAR	util/sds/sds.h	/^#define SDS_HDR_VAR(/;"	d
SDS_LLSTR_SIZE	util/sds/sds.c	/^#define SDS_LLSTR_SIZE /;"	d	file:
SDS_MAX_PREALLOC	util/sds/sds.h	/^#define SDS_MAX_PREALLOC /;"	d
SDS_NOINIT	util/sds/sds.c	/^const char *SDS_NOINIT = "SDS_NOINIT";$/;"	v
SDS_TYPE_16	util/sds/sds.h	/^#define SDS_TYPE_16 /;"	d
SDS_TYPE_32	util/sds/sds.h	/^#define SDS_TYPE_32 /;"	d
SDS_TYPE_5	util/sds/sds.h	/^#define SDS_TYPE_5 /;"	d
SDS_TYPE_5_LEN	util/sds/sds.h	/^#define SDS_TYPE_5_LEN(/;"	d
SDS_TYPE_64	util/sds/sds.h	/^#define SDS_TYPE_64 /;"	d
SDS_TYPE_8	util/sds/sds.h	/^#define SDS_TYPE_8 /;"	d
SDS_TYPE_BITS	util/sds/sds.h	/^#define SDS_TYPE_BITS /;"	d
SDS_TYPE_MASK	util/sds/sds.h	/^#define SDS_TYPE_MASK /;"	d
SET_EXCEPTION_HANDLER	errors.h	/^#define SET_EXCEPTION_HANDLER(/;"	d
SET_MSB	graph/graph.h	/^#define SET_MSB(/;"	d
SHOBJ_LDFLAGS	Makefile	/^	SHOBJ_LDFLAGS ?= -Wl,-Bsymbolic,-Bsymbolic-functions -fopenmp -shared -ldl -lpthread$/;"	m
SHOBJ_LDFLAGS	Makefile	/^	SHOBJ_LDFLAGS ?= -mmacosx-version-min=10.14 -bundle -undefined dynamic_lookup -ldl -lpthread -fopenmp$/;"	m
SIAllocation	value.h	/^} SIAllocation;$/;"	t	typeref:enum:__anon97
SIArray_Append	datatypes/array.c	/^void SIArray_Append(SIValue *siarray, SIValue value) {$/;"	f
SIArray_Clone	datatypes/array.c	/^SIValue SIArray_Clone(SIValue siarray) {$/;"	f
SIArray_Compare	value.c	/^int SIArray_Compare(SIValue arrayA, SIValue arrayB, int *disjointOrNull) {$/;"	f
SIArray_Free	datatypes/array.c	/^void SIArray_Free(SIValue siarray) {$/;"	f
SIArray_Get	datatypes/array.c	/^SIValue SIArray_Get(SIValue siarray, uint32_t index) {$/;"	f
SIArray_HashCode	datatypes/array.c	/^XXH64_hash_t SIArray_HashCode(SIValue siarray) {$/;"	f
SIArray_Length	datatypes/array.c	/^uint32_t SIArray_Length(SIValue siarray) {$/;"	f
SIArray_New	datatypes/array.c	/^SIValue SIArray_New(uint32_t initialCapacity) {$/;"	f
SIArray_ToString	datatypes/array.c	/^void SIArray_ToString(SIValue list, char **buf, size_t *bufferLen, size_t *bytesWritten) {$/;"	f
SIEdge_HashCode	value.c	/^XXH64_hash_t SIEdge_HashCode(const SIValue v) {$/;"	f
SIGN	value.h	/^#define SIGN(/;"	d
SINGLE_EDGE	graph/graph.h	/^#define SINGLE_EDGE(/;"	d
SINGLE_EDGE_ID	graph/graph.h	/^#define SINGLE_EDGE_ID(/;"	d
SINode_HashCode	value.c	/^XXH64_hash_t SINode_HashCode(const SIValue v) {$/;"	f
SIPROUND	util/siphash.c	/^#define SIPROUND /;"	d	file:
SIPathBuilder_AppendEdge	datatypes/path/sipath_builder.c	/^void SIPathBuilder_AppendEdge(SIValue p, SIValue e, bool RTLEdge) {$/;"	f
SIPathBuilder_AppendNode	datatypes/path/sipath_builder.c	/^void SIPathBuilder_AppendNode(SIValue p, SIValue n) {$/;"	f
SIPathBuilder_AppendPath	datatypes/path/sipath_builder.c	/^void SIPathBuilder_AppendPath(SIValue path, SIValue new_path, bool RTLEdge) {$/;"	f
SIPathBuilder_New	datatypes/path/sipath_builder.c	/^SIValue SIPathBuilder_New(uint entity_count) {$/;"	f
SIPath_Clone	datatypes/path/sipath.c	/^SIValue SIPath_Clone(SIValue p) {$/;"	f
SIPath_Compare	datatypes/path/sipath.c	/^int SIPath_Compare(SIValue p1, SIValue p2) {$/;"	f
SIPath_EdgeCount	datatypes/path/sipath.c	/^size_t SIPath_EdgeCount(SIValue p) {$/;"	f
SIPath_Free	datatypes/path/sipath.c	/^void SIPath_Free(SIValue p) {$/;"	f
SIPath_GetNode	datatypes/path/sipath.c	/^SIValue SIPath_GetNode(SIValue p, size_t i) {$/;"	f
SIPath_GetRelationship	datatypes/path/sipath.c	/^SIValue SIPath_GetRelationship(SIValue p, size_t i) {$/;"	f
SIPath_HashCode	datatypes/path/sipath.c	/^XXH64_hash_t SIPath_HashCode(SIValue p) {$/;"	f
SIPath_Head	datatypes/path/sipath.c	/^SIValue SIPath_Head(SIValue p) {$/;"	f
SIPath_Last	datatypes/path/sipath.c	/^SIValue SIPath_Last(SIValue p) {$/;"	f
SIPath_Length	datatypes/path/sipath.c	/^size_t SIPath_Length(SIValue p) {$/;"	f
SIPath_New	datatypes/path/sipath.c	/^SIValue SIPath_New(Path *p) {$/;"	f
SIPath_NodeCount	datatypes/path/sipath.c	/^size_t SIPath_NodeCount(SIValue p) {$/;"	f
SIPath_Nodes	datatypes/path/sipath.c	/^SIValue SIPath_Nodes(SIValue p) {$/;"	f
SIPath_Relationships	datatypes/path/sipath.c	/^SIValue SIPath_Relationships(SIValue p) {$/;"	f
SIPath_ToList	datatypes/path/sipath.c	/^SIValue SIPath_ToList(SIValue p) {$/;"	f
SIPath_ToString	datatypes/path/sipath.c	/^void SIPath_ToString(SIValue p, char **buf, size_t *bufferLen, size_t *bytesWritten) {$/;"	f
SIType	value.h	/^} SIType;$/;"	t	typeref:enum:__anon96
SIType_ToString	value.c	/^const char *SIType_ToString(SIType t) {$/;"	f
SIValue	value.h	/^typedef struct SIValue {$/;"	s
SIValue	value.h	/^} SIValue;$/;"	t	typeref:struct:SIValue
SIValue_Add	value.c	/^SIValue SIValue_Add(const SIValue a, const SIValue b) {$/;"	f
SIValue_Compare	value.c	/^int SIValue_Compare(const SIValue a, const SIValue b, int *disjointOrNull) {$/;"	f
SIValue_ConcatList	value.c	/^static SIValue SIValue_ConcatList(const SIValue a, const SIValue b) {$/;"	f	file:
SIValue_ConcatString	value.c	/^static SIValue SIValue_ConcatString(const SIValue a, const SIValue b) {$/;"	f	file:
SIValue_Divide	value.c	/^SIValue SIValue_Divide(const SIValue a, const SIValue b) {$/;"	f
SIValue_Free	value.c	/^void SIValue_Free(SIValue v) {$/;"	f
SIValue_FromString	value.c	/^SIValue SIValue_FromString(const char *s) {$/;"	f
SIValue_HashCode	value.c	/^XXH64_hash_t SIValue_HashCode(SIValue v) {$/;"	f
SIValue_HashUpdate	value.c	/^void SIValue_HashUpdate(SIValue v, XXH64_state_t *state) {$/;"	f
SIValue_IsFalse	value.c	/^inline bool SIValue_IsFalse(SIValue v) {$/;"	f
SIValue_IsNull	value.c	/^inline bool SIValue_IsNull(SIValue v) {$/;"	f
SIValue_IsNullPtr	value.c	/^inline bool SIValue_IsNullPtr(SIValue *v) {$/;"	f
SIValue_IsTrue	value.c	/^inline bool SIValue_IsTrue(SIValue v) {$/;"	f
SIValue_MakeVolatile	value.c	/^void SIValue_MakeVolatile(SIValue *v) {$/;"	f
SIValue_Modulo	value.c	/^SIValue SIValue_Modulo(const SIValue a, const SIValue n) {$/;"	f
SIValue_Multiply	value.c	/^SIValue SIValue_Multiply(const SIValue a, const SIValue b) {$/;"	f
SIValue_Persist	value.c	/^void SIValue_Persist(SIValue *v) {$/;"	f
SIValue_SetAllocationType	value.c	/^inline void SIValue_SetAllocationType(SIValue *v, SIAllocation allocation) {$/;"	f
SIValue_StringJoin	value.c	/^void SIValue_StringJoin(SIValue *strings, unsigned int string_count, const char *delimiter,$/;"	f
SIValue_StringJoinLen	value.c	/^size_t SIValue_StringJoinLen(SIValue *strings, unsigned int string_count, const char *delimiter) {$/;"	f
SIValue_Subtract	value.c	/^SIValue SIValue_Subtract(const SIValue a, const SIValue b) {$/;"	f
SIValue_ToDouble	value.c	/^int SIValue_ToDouble(const SIValue *v, double *d) {$/;"	f
SIValue_ToString	value.c	/^void SIValue_ToString(SIValue v, char **buf, size_t *bufferLen, size_t *bytesWritten) {$/;"	f
SI_ALL	value.h	/^#define SI_ALL /;"	d
SI_Array	value.c	/^SIValue SI_Array(u_int64_t initialCapacity) {$/;"	f
SI_BoolVal	value.c	/^SIValue SI_BoolVal(int b) {$/;"	f
SI_CloneValue	value.c	/^SIValue SI_CloneValue(const SIValue v) {$/;"	f
SI_ConstStringVal	value.c	/^SIValue SI_ConstStringVal(char *s) {$/;"	f
SI_ConstValue	value.c	/^SIValue SI_ConstValue(const SIValue v) {$/;"	f
SI_DoubleVal	value.c	/^SIValue SI_DoubleVal(double d) {$/;"	f
SI_DuplicateStringVal	value.c	/^SIValue SI_DuplicateStringVal(const char *s) {$/;"	f
SI_Edge	value.c	/^SIValue SI_Edge(void *e) {$/;"	f
SI_EmptyArray	value.c	/^SIValue SI_EmptyArray() {$/;"	f
SI_EmptyMap	value.c	/^SIValue SI_EmptyMap() {$/;"	f
SI_GET_NUMERIC	value.h	/^#define SI_GET_NUMERIC(/;"	d
SI_GRAPHENTITY	value.h	/^#define SI_GRAPHENTITY /;"	d
SI_INDEXABLE	value.h	/^#define SI_INDEXABLE /;"	d
SI_LongVal	value.c	/^SIValue SI_LongVal(int64_t i) {$/;"	f
SI_Map	value.c	/^SIValue SI_Map(u_int64_t initialCapacity) {$/;"	f
SI_NUMERIC	value.h	/^#define SI_NUMERIC /;"	d
SI_Node	value.c	/^SIValue SI_Node(void *n) {$/;"	f
SI_NullVal	value.c	/^SIValue SI_NullVal(void) {$/;"	f
SI_Path	value.c	/^SIValue SI_Path(void *p) {$/;"	f
SI_Point	value.c	/^SIValue SI_Point(float latitude, float longitude) {$/;"	f
SI_PtrVal	value.c	/^SIValue SI_PtrVal(void *v) {$/;"	f
SI_ShallowCloneValue	value.c	/^SIValue SI_ShallowCloneValue(const SIValue v) {$/;"	f
SI_ShareValue	value.c	/^SIValue SI_ShareValue(const SIValue v) {$/;"	f
SI_TYPE	value.h	/^#define SI_TYPE(/;"	d
SI_TransferOwnership	value.c	/^SIValue SI_TransferOwnership(SIValue *v) {$/;"	f
SI_TransferStringVal	value.c	/^SIValue SI_TransferStringVal(char *s) {$/;"	f
SI_VALID_PROPERTY_VALUE	value.h	/^#define SI_VALID_PROPERTY_VALUE /;"	d
SI_VALUES_ARE_COMPARABLE	value.h	/^#define SI_VALUES_ARE_COMPARABLE(/;"	d
SLOW_LOG_SIZE	slow_log/slow_log.h	/^#define SLOW_LOG_SIZE /;"	d
SOURCEDIR	Makefile	/^SOURCEDIR:=$(shell pwd -P)$/;"	m
SRCCOLOR	Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
STAT_NOT_SET	resultset/resultset_statistics.h	/^#define STAT_NOT_SET /;"	d
SYNC_AND_MINIMIZE_SPACE	graph/graph.h	/^	SYNC_AND_MINIMIZE_SPACE,$/;"	e	enum:__anon83
ScanToString	execution_plan/ops/shared/print_functions.c	/^int ScanToString(const OpBase *op, char *buf, uint buf_len, const char *alias, const char *label) {$/;"	f
Schema	schema/schema.h	/^} Schema;$/;"	t	typeref:struct:__anon101
SchemaType	schema/schema.h	/^} SchemaType;$/;"	t	typeref:enum:__anon100
Schema_AddIndex	schema/schema.c	/^int Schema_AddIndex(Index **idx, Schema *s, const char *field, IndexType type) {$/;"	f
Schema_AddNodeToIndices	schema/schema.c	/^void Schema_AddNodeToIndices(const Schema *s, const Node *n) {$/;"	f
Schema_Free	schema/schema.c	/^void Schema_Free(Schema *schema) {$/;"	f
Schema_GetIndex	schema/schema.c	/^Index *Schema_GetIndex(const Schema *s, Attribute_ID *attribute_id, IndexType type) {$/;"	f
Schema_GetName	schema/schema.c	/^const char *Schema_GetName(const Schema *s) {$/;"	f
Schema_HasIndices	schema/schema.c	/^bool Schema_HasIndices(const Schema *s) {$/;"	f
Schema_IndexCount	schema/schema.c	/^unsigned short Schema_IndexCount(const Schema *s) {$/;"	f
Schema_New	schema/schema.c	/^Schema *Schema_New(const char *name, int id) {$/;"	f
Schema_RemoveIndex	schema/schema.c	/^int Schema_RemoveIndex(Schema *s, const char *field, IndexType type) {$/;"	f
ScoredExp	execution_plan/optimizations/traverse_order_utils.h	/^} ScoredExp;$/;"	t	typeref:struct:__anon37
SemiApplyClone	execution_plan/ops/op_semi_apply.c	/^static inline OpBase *SemiApplyClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
SemiApplyConsume	execution_plan/ops/op_semi_apply.c	/^static Record SemiApplyConsume(OpBase *opBase) {$/;"	f	file:
SemiApplyFree	execution_plan/ops/op_semi_apply.c	/^static void SemiApplyFree(OpBase *opBase) {$/;"	f	file:
SemiApplyInit	execution_plan/ops/op_semi_apply.c	/^static OpResult SemiApplyInit(OpBase *opBase) {$/;"	f	file:
SemiApplyReset	execution_plan/ops/op_semi_apply.c	/^static OpResult SemiApplyReset(OpBase *opBase) {$/;"	f	file:
Serializer_Graph_GetDeletedEdgesList	serializers/graph_extensions.c	/^uint64_t *Serializer_Graph_GetDeletedEdgesList(Graph *g) {$/;"	f
Serializer_Graph_GetDeletedNodesList	serializers/graph_extensions.c	/^uint64_t *Serializer_Graph_GetDeletedNodesList(Graph *g) {$/;"	f
Serializer_Graph_MarkEdgeDeleted	serializers/graph_extensions.c	/^inline void Serializer_Graph_MarkEdgeDeleted(Graph *g, EdgeID id) {$/;"	f
Serializer_Graph_MarkNodeDeleted	serializers/graph_extensions.c	/^inline void Serializer_Graph_MarkNodeDeleted(Graph *g, NodeID id) {$/;"	f
Serializer_Graph_SetEdge	serializers/graph_extensions.c	/^void Serializer_Graph_SetEdge(Graph *g, EdgeID edge_id, NodeID src, NodeID dest, int r, Edge *e) {$/;"	f
Serializer_Graph_SetNode	serializers/graph_extensions.c	/^void Serializer_Graph_SetNode(Graph *g, NodeID id, int label, Node *n) {$/;"	f
Set_Add	datatypes/set.c	/^bool Set_Add(set *s, SIValue v) {$/;"	f
Set_Contains	datatypes/set.c	/^bool Set_Contains(set *s, SIValue v) {$/;"	f
Set_Free	datatypes/set.c	/^void Set_Free(set *s) {$/;"	f
Set_New	datatypes/set.c	/^set *Set_New(void) {$/;"	f
Set_Remove	datatypes/set.c	/^void Set_Remove(set *s, SIValue v) {$/;"	f
Set_Size	datatypes/set.c	/^uint64_t Set_Size(set *s) {$/;"	f
ShortestPathCtx	arithmetic/path_funcs/path_funcs.h	/^} ShortestPathCtx;$/;"	t	typeref:struct:__anon121
ShortestPath_Clone	arithmetic/path_funcs/path_funcs.c	/^void *ShortestPath_Clone(void *orig) {$/;"	f
ShortestPath_Free	arithmetic/path_funcs/path_funcs.c	/^void ShortestPath_Free(void *ctx_ptr) {$/;"	f
SkipClone	execution_plan/ops/op_skip.c	/^static inline OpBase *SkipClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
SkipConsume	execution_plan/ops/op_skip.c	/^static Record SkipConsume(OpBase *opBase) {$/;"	f	file:
SkipFree	execution_plan/ops/op_skip.c	/^static void SkipFree(OpBase *opBase) {$/;"	f	file:
SkipReset	execution_plan/ops/op_skip.c	/^static OpResult SkipReset(OpBase *ctx) {$/;"	f	file:
SlowLog	slow_log/slow_log.h	/^} SlowLog;$/;"	t	typeref:struct:__anon78
SlowLogItem	slow_log/slow_log.h	/^} SlowLogItem;$/;"	t	typeref:struct:__anon77
SlowLog_Add	slow_log/slow_log.c	/^void SlowLog_Add(SlowLog *slowlog, const char *cmd, const char *query,$/;"	f
SlowLog_Free	slow_log/slow_log.c	/^void SlowLog_Free(SlowLog *slowlog) {$/;"	f
SlowLog_New	slow_log/slow_log.c	/^SlowLog *SlowLog_New() {$/;"	f
SlowLog_Replay	slow_log/slow_log.c	/^void SlowLog_Replay(const SlowLog *slowlog, RedisModuleCtx *ctx) {$/;"	f
SortClone	execution_plan/ops/op_sort.c	/^static OpBase *SortClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
SortConsume	execution_plan/ops/op_sort.c	/^static Record SortConsume(OpBase *opBase) {$/;"	f	file:
SortFree	execution_plan/ops/op_sort.c	/^static void SortFree(OpBase *ctx) {$/;"	f	file:
SortInit	execution_plan/ops/op_sort.c	/^static OpResult SortInit(OpBase *opBase) {$/;"	f	file:
SortReset	execution_plan/ops/op_sort.c	/^static OpResult SortReset(OpBase *ctx) {$/;"	f	file:
StDevFinalize	arithmetic/aggregate_funcs/agg_funcs.c	/^void StDevFinalize(void *ctx_ptr) {$/;"	f
StDevGenericFinalize	arithmetic/aggregate_funcs/agg_funcs.c	/^void StDevGenericFinalize(AggregateCtx *ctx, int is_sampled) {$/;"	f
StDevPFinalize	arithmetic/aggregate_funcs/agg_funcs.c	/^void StDevPFinalize(void *ctx_ptr) {$/;"	f
StDev_Free	arithmetic/aggregate_funcs/agg_funcs.c	/^void StDev_Free(void *ctx_ptr) {$/;"	f
Step	procedures/proc_ctx.h	/^	ProcStep Step;              \/\/$/;"	m	struct:ProcedureCtx
StringRange	util/range/string_range.h	/^} StringRange;$/;"	t	typeref:struct:__anon29
StringRange_ContainsValue	util/range/string_range.c	/^bool StringRange_ContainsValue(const StringRange *range, const char *v) {$/;"	f
StringRange_Free	util/range/string_range.c	/^void StringRange_Free(StringRange *range) {$/;"	f
StringRange_IsValid	util/range/string_range.c	/^bool StringRange_IsValid(const StringRange *range) {$/;"	f
StringRange_New	util/range/string_range.c	/^StringRange *StringRange_New(void) {$/;"	f
StringRange_TightenRange	util/range/string_range.c	/^void StringRange_TightenRange(StringRange *range, int op, const char *v) {$/;"	f
StringRange_ToString	util/range/string_range.c	/^void StringRange_ToString(const StringRange *range) {$/;"	f
SyncMatrixFunc	graph/graph.h	/^typedef void (*SyncMatrixFunc)(const Graph *, RG_Matrix);$/;"	t
SynchronizeMatrix	graph/graph.h	/^	SyncMatrixFunc SynchronizeMatrix;   \/\/ Function pointer to matrix synchronization routine.$/;"	m	struct:Graph
THPOOL_DEBUG	util/thpool/thpool.c	/^#define THPOOL_DEBUG /;"	d	file:
THPOOL_QUEUE_FULL	util/thpool/pools.h	/^#define THPOOL_QUEUE_FULL /;"	d
THREAD_COUNT	configuration/config.c	/^#define THREAD_COUNT /;"	d	file:
TIMEOUT	configuration/config.c	/^#define TIMEOUT /;"	d	file:
TR	arithmetic/path_funcs/path_funcs.h	/^	GrB_Matrix TR;               \/* Transpose of traversed relationship matrix *\/$/;"	m	struct:__anon121
TRAVERSE_OPS	execution_plan/ops/op.h	/^static const OPType TRAVERSE_OPS[] = {OPType_CONDITIONAL_TRAVERSE, OPType_CONDITIONAL_VAR_LEN_TRAVERSE};$/;"	v
TRAVERSE_OP_COUNT	execution_plan/ops/op.h	/^#define TRAVERSE_OP_COUNT /;"	d
TYPE	bulk_insert/bulk_insert.c	/^} TYPE;$/;"	t	typeref:enum:__anon151	file:
T_ARRAY	value.h	/^	T_ARRAY = (1 << 3),$/;"	e	enum:__anon96
T_BOOL	value.h	/^	T_BOOL = (1 << 12), \/\/ shares 'longval' representation in SIValue union$/;"	e	enum:__anon96
T_DATE	value.h	/^	T_DATE = (1 << 7),$/;"	e	enum:__anon96
T_DATETIME	value.h	/^	T_DATETIME = (1 << 5),$/;"	e	enum:__anon96
T_DOUBLE	value.h	/^	T_DOUBLE = (1 << 14),$/;"	e	enum:__anon96
T_DURATION	value.h	/^	T_DURATION = (1 << 10),$/;"	e	enum:__anon96
T_EDGE	value.h	/^	T_EDGE = (1 << 2),$/;"	e	enum:__anon96
T_INT64	value.h	/^	T_INT64 = (1 << 13),$/;"	e	enum:__anon96
T_LOCALDATETIME	value.h	/^	T_LOCALDATETIME = (1 << 6),$/;"	e	enum:__anon96
T_LOCALTIME	value.h	/^	T_LOCALTIME = (1 << 9),$/;"	e	enum:__anon96
T_MAP	value.h	/^	T_MAP = (1 << 0),$/;"	e	enum:__anon96
T_NODE	value.h	/^	T_NODE = (1 << 1),$/;"	e	enum:__anon96
T_NULL	value.h	/^	T_NULL = (1 << 15),$/;"	e	enum:__anon96
T_PATH	value.h	/^	T_PATH = (1 << 4),$/;"	e	enum:__anon96
T_POINT	value.h	/^	T_POINT = (1 << 17), \/\/ TODO: verify type order of point$/;"	e	enum:__anon96
T_PTR	value.h	/^	T_PTR = (1 << 16),$/;"	e	enum:__anon96
T_STRING	value.h	/^	T_STRING = (1 << 11),$/;"	e	enum:__anon96
T_TIME	value.h	/^	T_TIME = (1 << 8),$/;"	e	enum:__anon96
TemporalValue_NewTimestamp	datatypes/temporal_value.c	/^int64_t TemporalValue_NewTimestamp() {$/;"	f
ThreadPools_AddWorkBulkLoader	util/thpool/pools.c	/^int ThreadPools_AddWorkBulkLoader$/;"	f
ThreadPools_AddWorkReader	util/thpool/pools.c	/^int ThreadPools_AddWorkReader$/;"	f
ThreadPools_AddWorkWriter	util/thpool/pools.c	/^int ThreadPools_AddWorkWriter$/;"	f
ThreadPools_CreatePools	util/thpool/pools.c	/^int ThreadPools_CreatePools$/;"	f
ThreadPools_GetThreadID	util/thpool/pools.c	/^int ThreadPools_GetThreadID$/;"	f
ThreadPools_Pause	util/thpool/pools.c	/^void ThreadPools_Pause$/;"	f
ThreadPools_Resume	util/thpool/pools.c	/^void ThreadPools_Resume$/;"	f
ThreadPools_Set_max_pending_work	util/thpool/pools.c	/^void ThreadPools_Set_max_pending_work(uint64_t val) {$/;"	f
ThreadPools_ThreadCount	util/thpool/pools.c	/^uint ThreadPools_ThreadCount$/;"	f
TraversalToString	execution_plan/ops/shared/print_functions.c	/^int TraversalToString(const OpBase *op, char *buf, uint buf_len, AlgebraicExpression *ae) {$/;"	f
TraverseOrder_BoundVariableScore	execution_plan/optimizations/traverse_order_utils.c	/^int TraverseOrder_BoundVariableScore(AlgebraicExpression *exp,$/;"	f
TraverseOrder_FilterExistenceScore	execution_plan/optimizations/traverse_order_utils.c	/^int TraverseOrder_FilterExistenceScore(AlgebraicExpression *exp,$/;"	f
TraverseOrder_LabelsScore	execution_plan/optimizations/traverse_order_utils.c	/^int TraverseOrder_LabelsScore(AlgebraicExpression *exp, const QueryGraph *qg) {$/;"	f
TraverseOrder_ScoreExpressions	execution_plan/optimizations/traverse_order_utils.c	/^void TraverseOrder_ScoreExpressions$/;"	f
Traverse_CollectEdges	execution_plan/ops/shared/traverse_functions.c	/^void Traverse_CollectEdges(EdgeTraverseCtx *edge_ctx, NodeID src, NodeID dest) {$/;"	f
Traverse_FreeEdgeCtx	execution_plan/ops/shared/traverse_functions.c	/^void Traverse_FreeEdgeCtx(EdgeTraverseCtx *edge_ctx) {$/;"	f
Traverse_NewEdgeCtx	execution_plan/ops/shared/traverse_functions.c	/^EdgeTraverseCtx *Traverse_NewEdgeCtx(AlgebraicExpression *ae, QGEdge *e, int idx) {$/;"	f
Traverse_ResetEdgeCtx	execution_plan/ops/shared/traverse_functions.c	/^void Traverse_ResetEdgeCtx(EdgeTraverseCtx *edge_ctx) {$/;"	f
Traverse_SetEdge	execution_plan/ops/shared/traverse_functions.c	/^bool Traverse_SetEdge(EdgeTraverseCtx *edge_ctx, Record r) {$/;"	f
U32TO8_LE	util/siphash.c	/^#define U32TO8_LE(/;"	d	file:
U64TO8_LE	util/siphash.c	/^#define U64TO8_LE(/;"	d	file:
U8TO64_LE	util/siphash.c	/^#define U8TO64_LE(/;"	d	file:
U8TO64_LE_NOCASE	util/siphash.c	/^#define U8TO64_LE_NOCASE(/;"	d	file:
UNALIGNED_LE_CPU	util/siphash.c	/^#define UNALIGNED_LE_CPU$/;"	d	file:
UNLIMITED	ast/ast.h	/^#define UNLIMITED /;"	d
UNUSED	RG.h	/^#define UNUSED(/;"	d
UNUSED	RG.h	/^#undef UNUSED$/;"	d
UNUSED	util/sds/sds.c	/^#define UNUSED(/;"	d	file:
UPDATE_MERGE	ast/ast_shared.h	/^	UPDATE_MERGE   = 1,    \/\/ merge new properties into existing property map$/;"	e	enum:__anon134
UPDATE_MODE	ast/ast_shared.h	/^} UPDATE_MODE;$/;"	t	typeref:enum:__anon134
UPDATE_REPLACE	ast/ast_shared.h	/^	UPDATE_REPLACE = 2,    \/\/ replace existing property map with new properties$/;"	e	enum:__anon134
UPDATE_UNSET	ast/ast_shared.h	/^	UPDATE_UNSET   = 0,    \/\/ default, should not be encountered$/;"	e	enum:__anon134
UTIL_ARR_H_	util/arr.h	/^#define UTIL_ARR_H_$/;"	d
UUID_New	util/uuid.c	/^char *UUID_New() {$/;"	f
UnsignedRange	util/range/unsigned_range.h	/^} UnsignedRange;$/;"	t	typeref:struct:__anon31
UnsignedRange_Clone	util/range/unsigned_range.c	/^UnsignedRange *UnsignedRange_Clone(const UnsignedRange *range) {$/;"	f
UnsignedRange_ContainsValue	util/range/unsigned_range.c	/^bool UnsignedRange_ContainsValue(const UnsignedRange *range, uint64_t v) {$/;"	f
UnsignedRange_Free	util/range/unsigned_range.c	/^void UnsignedRange_Free(UnsignedRange *range) {$/;"	f
UnsignedRange_IsValid	util/range/unsigned_range.c	/^bool UnsignedRange_IsValid(const UnsignedRange *range) {$/;"	f
UnsignedRange_New	util/range/unsigned_range.c	/^UnsignedRange *UnsignedRange_New(void) {$/;"	f
UnsignedRange_TightenRange	util/range/unsigned_range.c	/^void UnsignedRange_TightenRange(UnsignedRange *range, int op, uint64_t v) {$/;"	f
UnsignedRange_ToString	util/range/unsigned_range.c	/^void UnsignedRange_ToString(const UnsignedRange *range) {$/;"	f
UnwindClone	execution_plan/ops/op_unwind.c	/^static inline OpBase *UnwindClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
UnwindConsume	execution_plan/ops/op_unwind.c	/^static Record UnwindConsume(OpBase *opBase) {$/;"	f	file:
UnwindFree	execution_plan/ops/op_unwind.c	/^static void UnwindFree(OpBase *ctx) {$/;"	f	file:
UnwindInit	execution_plan/ops/op_unwind.c	/^static OpResult UnwindInit(OpBase *opBase) {$/;"	f	file:
UnwindReset	execution_plan/ops/op_unwind.c	/^static OpResult UnwindReset(OpBase *ctx) {$/;"	f	file:
UpdateClone	execution_plan/ops/op_update.c	/^static OpBase *UpdateClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
UpdateConsume	execution_plan/ops/op_update.c	/^static Record UpdateConsume(OpBase *opBase) {$/;"	f	file:
UpdateCtx_Clear	ast/ast_shared.c	/^void UpdateCtx_Clear(EntityUpdateEvalCtx *ctx) {$/;"	f
UpdateCtx_Clone	ast/ast_shared.c	/^EntityUpdateEvalCtx *UpdateCtx_Clone(const EntityUpdateEvalCtx *orig) {$/;"	f
UpdateCtx_Free	ast/ast_shared.c	/^void UpdateCtx_Free(EntityUpdateEvalCtx *ctx) {$/;"	f
UpdateCtx_New	ast/ast_shared.c	/^EntityUpdateEvalCtx *UpdateCtx_New(UPDATE_MODE mode, uint prop_count, const char *alias) {$/;"	f
UpdateCtx_SetMode	ast/ast_shared.c	/^void UpdateCtx_SetMode(EntityUpdateEvalCtx *ctx, UPDATE_MODE mode) {$/;"	f
UpdateFree	execution_plan/ops/op_update.c	/^static void UpdateFree(OpBase *ctx) {$/;"	f	file:
UpdateInit	execution_plan/ops/op_update.c	/^static OpResult UpdateInit(OpBase *opBase) {$/;"	f	file:
UpdateReset	execution_plan/ops/op_update.c	/^static OpResult UpdateReset(OpBase *ctx) {$/;"	f	file:
V5_T_BOOL	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_BOOL = 0x010, \/\/ shares 'longval' representation in SIValue union$/;"	e	enum:__anon104	file:
V5_T_CONSTSTRING	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_CONSTSTRING = 0x100, \/\/ only used in deserialization routine$/;"	e	enum:__anon104	file:
V5_T_DOUBLE	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_DOUBLE = 0x040,$/;"	e	enum:__anon104	file:
V5_T_EDGE	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_EDGE = 0x400,$/;"	e	enum:__anon104	file:
V5_T_INT64	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_INT64 = 0x004,$/;"	e	enum:__anon104	file:
V5_T_NODE	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_NODE = 0x200,$/;"	e	enum:__anon104	file:
V5_T_NULL	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_NULL = 0,$/;"	e	enum:__anon104	file:
V5_T_PTR	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_PTR = 0x080,$/;"	e	enum:__anon104	file:
V5_T_STRING	serializers/decoders/prev/v5/decode_graph.c	/^	V5_T_STRING = 0x001,$/;"	e	enum:__anon104	file:
VALUE_ARRAY	resultset/formatters/resultset_formatter.h	/^	VALUE_ARRAY = 6,$/;"	e	enum:__anon17
VALUE_BOOLEAN	resultset/formatters/resultset_formatter.h	/^	VALUE_BOOLEAN = 4,$/;"	e	enum:__anon17
VALUE_DOUBLE	resultset/formatters/resultset_formatter.h	/^	VALUE_DOUBLE = 5,$/;"	e	enum:__anon17
VALUE_EDGE	resultset/formatters/resultset_formatter.h	/^	VALUE_EDGE = 7,$/;"	e	enum:__anon17
VALUE_INTEGER	resultset/formatters/resultset_formatter.h	/^	VALUE_INTEGER = 3,$/;"	e	enum:__anon17
VALUE_MAP	resultset/formatters/resultset_formatter.h	/^	VALUE_MAP = 10,$/;"	e	enum:__anon17
VALUE_NODE	resultset/formatters/resultset_formatter.h	/^	VALUE_NODE = 8,$/;"	e	enum:__anon17
VALUE_NULL	resultset/formatters/resultset_formatter.h	/^	VALUE_NULL = 1,$/;"	e	enum:__anon17
VALUE_PATH	resultset/formatters/resultset_formatter.h	/^	VALUE_PATH = 9,$/;"	e	enum:__anon17
VALUE_POINT	resultset/formatters/resultset_formatter.h	/^	VALUE_POINT = 11$/;"	e	enum:__anon17
VALUE_STRING	resultset/formatters/resultset_formatter.h	/^	VALUE_STRING = 2,$/;"	e	enum:__anon17
VALUE_UNKNOWN	resultset/formatters/resultset_formatter.h	/^	VALUE_UNKNOWN = 0,$/;"	e	enum:__anon17
VAR_ARG_LEN	arithmetic/func_desc.h	/^#define VAR_ARG_LEN /;"	d
VKEY_ENTITY_COUNT_UNLIMITED	configuration/config.h	/^#define VKEY_ENTITY_COUNT_UNLIMITED /;"	d
VKEY_MAX_ENTITY_COUNT	configuration/config.c	/^#define VKEY_MAX_ENTITY_COUNT /;"	d	file:
VKEY_MAX_ENTITY_COUNT_DEFAULT	configuration/config.c	/^#define VKEY_MAX_ENTITY_COUNT_DEFAULT /;"	d	file:
ValueFree	util/cache/cache_list.h	/^	CacheItemFreeFunc ValueFree;    \/\/ Value free function.$/;"	m	struct:__anon20
ValueHashJoinClone	execution_plan/ops/op_value_hash_join.c	/^static inline OpBase *ValueHashJoinClone(const ExecutionPlan *plan, const OpBase *opBase) {$/;"	f	file:
ValueHashJoinConsume	execution_plan/ops/op_value_hash_join.c	/^static Record ValueHashJoinConsume(OpBase *opBase) {$/;"	f	file:
ValueHashJoinFree	execution_plan/ops/op_value_hash_join.c	/^static void ValueHashJoinFree(OpBase *ctx) {$/;"	f	file:
ValueHashJoinInit	execution_plan/ops/op_value_hash_join.c	/^static OpResult ValueHashJoinInit(OpBase *ctx) {$/;"	f	file:
ValueHashJoinReset	execution_plan/ops/op_value_hash_join.c	/^static OpResult ValueHashJoinReset(OpBase *ctx) {$/;"	f	file:
ValueHashJoinToString	execution_plan/ops/op_value_hash_join.c	/^static int ValueHashJoinToString(const OpBase *ctx, char *buff, uint buff_len) {$/;"	f	file:
ValueType	resultset/formatters/resultset_formatter.h	/^} ValueType;$/;"	t	typeref:enum:__anon17
XXHASH_DIR	Makefile	/^XXHASH_DIR = ..\/deps\/xxHash$/;"	m
_AR_EXP_CloneOp	arithmetic/arithmetic_expression.c	/^static AR_ExpNode *_AR_EXP_CloneOp(AR_ExpNode *exp) {$/;"	f	file:
_AR_EXP_CloneOperand	arithmetic/arithmetic_expression.c	/^static AR_ExpNode *_AR_EXP_CloneOperand(AR_ExpNode *exp) {$/;"	f	file:
_AR_EXP_ContainsNestedAgg	arithmetic/arithmetic_expression_construct.c	/^static bool _AR_EXP_ContainsNestedAgg(const AR_ExpNode *exp) {$/;"	f	file:
_AR_EXP_Evaluate	arithmetic/arithmetic_expression.c	/^static AR_EXP_Result _AR_EXP_Evaluate(AR_ExpNode *root, const Record r,$/;"	f	file:
_AR_EXP_EvaluateBorrowRecord	arithmetic/arithmetic_expression.c	/^static inline AR_EXP_Result _AR_EXP_EvaluateBorrowRecord(AR_ExpNode *node, const Record r,$/;"	f	file:
_AR_EXP_EvaluateFunctionCall	arithmetic/arithmetic_expression.c	/^static AR_EXP_Result _AR_EXP_EvaluateFunctionCall(AR_ExpNode *node,$/;"	f	file:
_AR_EXP_EvaluateParam	arithmetic/arithmetic_expression.c	/^static AR_EXP_Result _AR_EXP_EvaluateParam(AR_ExpNode *node, SIValue *result) {$/;"	f	file:
_AR_EXP_EvaluateVariadic	arithmetic/arithmetic_expression.c	/^static AR_EXP_Result _AR_EXP_EvaluateVariadic(AR_ExpNode *node, const Record r, SIValue *result) {$/;"	f	file:
_AR_EXP_Finalize	arithmetic/arithmetic_expression.c	/^void _AR_EXP_Finalize(AR_ExpNode *root) {$/;"	f
_AR_EXP_FreeOpInternals	arithmetic/arithmetic_expression.c	/^static inline void _AR_EXP_FreeOpInternals(AR_ExpNode *op_node) {$/;"	f	file:
_AR_EXP_FreeResultsArray	arithmetic/arithmetic_expression.c	/^static inline void _AR_EXP_FreeResultsArray(SIValue *results, int count) {$/;"	f	file:
_AR_EXP_FromASTNode	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromASTNode(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromApplyAllExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromApplyAllExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromApplyExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromApplyExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromBinaryOpExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromBinaryOpExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromCaseExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromCaseExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromComparisonExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromComparisonExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromFalseExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromFalseExpression() {$/;"	f	file:
_AR_EXP_FromFloatExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromFloatExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromIdentifier	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromIdentifier(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromIdentifierExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromIdentifierExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromIntegerExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromIntegerExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromNullExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromNullExpression() {$/;"	f	file:
_AR_EXP_FromPropertyExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromPropertyExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromStringExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromStringExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_FromTrueExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromTrueExpression() {$/;"	f	file:
_AR_EXP_FromUnaryOpExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_EXP_FromUnaryOpExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_EXP_InitializeOperand	arithmetic/arithmetic_expression.c	/^static inline AR_ExpNode *_AR_EXP_InitializeOperand(AR_OperandNodeType type) {$/;"	f	file:
_AR_EXP_InplaceRepurposeConstant	arithmetic/arithmetic_expression.c	/^static void _AR_EXP_InplaceRepurposeConstant(AR_ExpNode *node, SIValue v) {$/;"	f	file:
_AR_EXP_NewOpNode	arithmetic/arithmetic_expression.c	/^static AR_ExpNode *_AR_EXP_NewOpNode(const char *func_name, uint child_count) {$/;"	f	file:
_AR_EXP_OpResolveVariables	arithmetic/arithmetic_expression.c	/^static void _AR_EXP_OpResolveVariables(AR_ExpNode *node, const Record r) {$/;"	f	file:
_AR_EXP_OperandResolveVariables	arithmetic/arithmetic_expression.c	/^void _AR_EXP_OperandResolveVariables(AR_ExpNode *node, const Record r) {$/;"	f
_AR_EXP_ResolveVariables	arithmetic/arithmetic_expression.c	/^static void _AR_EXP_ResolveVariables(AR_ExpNode *root, const Record r) {$/;"	f	file:
_AR_EXP_ToString	arithmetic/arithmetic_expression.c	/^void _AR_EXP_ToString(const AR_ExpNode *root, char **str, size_t *str_size,$/;"	f
_AR_EXP_UpdateEntityIdx	arithmetic/arithmetic_expression.c	/^static bool _AR_EXP_UpdateEntityIdx(AR_OperandNode *node, const Record r) {$/;"	f	file:
_AR_EXP_ValidateInvocation	arithmetic/arithmetic_expression.c	/^static bool _AR_EXP_ValidateInvocation(AR_FuncDesc *fdesc, SIValue *argv, uint argc) {$/;"	f	file:
_AR_ExpFromCollectionExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromCollectionExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_ExpFromMapExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromMapExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_ExpFromMapProjection	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromMapProjection(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_ExpFromNamedPath	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromNamedPath(const cypher_astnode_t *path) {$/;"	f	file:
_AR_ExpFromShortestPath	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromShortestPath(const cypher_astnode_t *path) {$/;"	f	file:
_AR_ExpFromSliceExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromSliceExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_ExpFromSubscriptExpression	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpFromSubscriptExpression(const cypher_astnode_t *expr) {$/;"	f	file:
_AR_ExpNodeFromComprehensionFunction	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpNodeFromComprehensionFunction(const cypher_astnode_t *comp_exp,$/;"	f	file:
_AR_ExpNodeFromGraphEntity	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpNodeFromGraphEntity(const cypher_astnode_t *entity) {$/;"	f	file:
_AR_ExpNodeFromParameter	arithmetic/arithmetic_expression_construct.c	/^static AR_ExpNode *_AR_ExpNodeFromParameter(const cypher_astnode_t *param) {$/;"	f	file:
_AR_NodeDegree	arithmetic/entity_funcs/entity_funcs.c	/^SIValue _AR_NodeDegree(SIValue *argv, int argc, GRAPH_EDGE_DIR dir) {$/;"	f
_ASTClause_BuildReferenceMap	ast/ast_build_reference_map.c	/^static void _ASTClause_BuildReferenceMap(AST *ast, const cypher_astnode_t *clause) {$/;"	f	file:
_ASTOpToString	arithmetic/arithmetic_expression_construct.c	/^static inline const char *_ASTOpToString(AST_Operator op) {$/;"	f	file:
_AST_ConvertGraphPatternToFilter	ast/ast_build_filter_tree.c	/^void _AST_ConvertGraphPatternToFilter(const AST *ast, FT_FilterNode **root,$/;"	f
_AST_ExtractQueryString	ast/ast.c	/^const char *_AST_ExtractQueryString(const cypher_parse_result_t *partial_result) {$/;"	f
_AST_Extract_Params	ast/ast.c	/^static void _AST_Extract_Params(const cypher_parse_result_t *parse_result) {$/;"	f	file:
_AST_GetDefinedIdentifiers	ast/ast_validations.c	/^static void _AST_GetDefinedIdentifiers(const cypher_astnode_t *node, rax *identifiers) {$/;"	f	file:
_AST_GetIdentifiers	ast/ast_validations.c	/^static void _AST_GetIdentifiers(const cypher_astnode_t *node, rax *identifiers) {$/;"	f	file:
_AST_GetProcCallAliases	ast/ast_validations.c	/^static void _AST_GetProcCallAliases(const cypher_astnode_t *node, rax *identifiers) {$/;"	f	file:
_AST_GetReferredIdentifiers	ast/ast_validations.c	/^static void _AST_GetReferredIdentifiers(const cypher_astnode_t *node, rax *identifiers) {$/;"	f	file:
_AST_GetReturnAliases	ast/ast_validations.c	/^static void _AST_GetReturnAliases(const cypher_astnode_t *node, rax *aliases) {$/;"	f	file:
_AST_GetReturnProjections	ast/ast_validations.c	/^static rax *_AST_GetReturnProjections(const cypher_astnode_t *return_clause) {$/;"	f	file:
_AST_GetTypedNodes	ast/ast.c	/^static void _AST_GetTypedNodes(const cypher_astnode_t  ***nodes, const cypher_astnode_t *root,$/;"	f	file:
_AST_GetWithAliases	ast/ast_validations.c	/^static void _AST_GetWithAliases(const cypher_astnode_t *node, rax *aliases) {$/;"	f	file:
_AST_GetWithReferences	ast/ast_validations.c	/^static void _AST_GetWithReferences(const cypher_astnode_t *node, rax *identifiers) {$/;"	f	file:
_AST_MapCreateClauseReferences	ast/ast_build_reference_map.c	/^static void _AST_MapCreateClauseReferences(AST *ast, const cypher_astnode_t *create_clause) {$/;"	f	file:
_AST_MapDeleteClauseReferences	ast/ast_build_reference_map.c	/^static void _AST_MapDeleteClauseReferences(AST *ast, const cypher_astnode_t *delete_clause) {$/;"	f	file:
_AST_MapExpression	ast/ast_build_reference_map.c	/^static void _AST_MapExpression(AST *ast, const cypher_astnode_t *exp) {$/;"	f	file:
_AST_MapMatchClauseReferences	ast/ast_build_reference_map.c	/^static void _AST_MapMatchClauseReferences(AST *ast, const cypher_astnode_t *match_clause) {$/;"	f	file:
_AST_MapMergeClauseReference	ast/ast_build_reference_map.c	/^static void _AST_MapMergeClauseReference(AST *ast, const cypher_astnode_t *merge_clause) {$/;"	f	file:
_AST_MapMergePropertiesReferences	ast/ast_build_reference_map.c	/^static void _AST_MapMergePropertiesReferences(AST *ast, const cypher_astnode_t *set_item) {$/;"	f	file:
_AST_MapOrderByReferences	ast/ast_build_reference_map.c	/^static void _AST_MapOrderByReferences(AST *ast, const cypher_astnode_t *order_by) {$/;"	f	file:
_AST_MapProjectAll	ast/ast_build_reference_map.c	/^static void _AST_MapProjectAll(AST *ast, const cypher_astnode_t *project_clause) {$/;"	f	file:
_AST_MapProjectionAlias	ast/ast_build_reference_map.c	/^static inline void _AST_MapProjectionAlias(AST *ast, const cypher_astnode_t *projection) {$/;"	f	file:
_AST_MapProjectionClause	ast/ast_build_reference_map.c	/^static void _AST_MapProjectionClause(AST *ast_segment, const cypher_astnode_t *projection) {$/;"	f	file:
_AST_MapReferencedEdge	ast/ast_build_reference_map.c	/^static void _AST_MapReferencedEdge(AST *ast, const cypher_astnode_t *edge, bool force_mapping) {$/;"	f	file:
_AST_MapReferencedEntitiesInPath	ast/ast_build_reference_map.c	/^static void _AST_MapReferencedEntitiesInPath(AST *ast, const cypher_astnode_t *path) {$/;"	f	file:
_AST_MapReferencedNode	ast/ast_build_reference_map.c	/^static void _AST_MapReferencedNode(AST *ast, const cypher_astnode_t *node, bool force_mapping) {$/;"	f	file:
_AST_MapReturnReferredEntities	ast/ast_build_reference_map.c	/^static void _AST_MapReturnReferredEntities(AST *ast_segment,$/;"	f	file:
_AST_MapSetAllPropertiesReferences	ast/ast_build_reference_map.c	/^static void _AST_MapSetAllPropertiesReferences(AST *ast, const cypher_astnode_t *set_item) {$/;"	f	file:
_AST_MapSetClauseReferences	ast/ast_build_reference_map.c	/^static void _AST_MapSetClauseReferences(AST *ast, const cypher_astnode_t *set_clause) {$/;"	f	file:
_AST_MapSetItemReferences	ast/ast_build_reference_map.c	/^static void _AST_MapSetItemReferences(AST *ast, const cypher_astnode_t *set_item) {$/;"	f	file:
_AST_MapSetPropertyReferences	ast/ast_build_reference_map.c	/^static void _AST_MapSetPropertyReferences(AST *ast, const cypher_astnode_t *set_item) {$/;"	f	file:
_AST_MapWithReferredEntities	ast/ast_build_reference_map.c	/^static void _AST_MapWithReferredEntities(AST *ast_segment, const cypher_astnode_t *with_clause) {$/;"	f	file:
_AST_NewProjectAllContext	ast/enrichment/annotate_project_all.c	/^static AnnotationCtx *_AST_NewProjectAllContext(void) {$/;"	f	file:
_AST_NewProjectNamedPathContext	ast/enrichment/annotate_projected_named_paths.c	/^static AnnotationCtx *_AST_NewProjectNamedPathContext(void) {$/;"	f	file:
_AST_Path_GetDefinedIdentifiers	ast/ast_validations.c	/^static void _AST_Path_GetDefinedIdentifiers(const cypher_astnode_t *path, rax *identifiers) {$/;"	f	file:
_AST_Pattern_GetDefinedIdentifiers	ast/ast_validations.c	/^static void _AST_Pattern_GetDefinedIdentifiers(const cypher_astnode_t *pattern, rax *identifiers) {$/;"	f	file:
_AST_RegisterCallOutputs	ast/ast_validations.c	/^static void _AST_RegisterCallOutputs(const cypher_astnode_t *call_clause, rax *identifiers) {$/;"	f	file:
_AST_ReportErrors	ast/ast_validations.c	/^static void _AST_ReportErrors(const cypher_parse_result_t *result) {$/;"	f	file:
_AST_UpdateRefMap	ast/ast_build_reference_map.c	/^static inline void _AST_UpdateRefMap(AST *ast, const char *name) {$/;"	f	file:
_AST_ValidateUnionQuery	ast/ast_validations.c	/^static AST_Validation _AST_ValidateUnionQuery(AST *mock_ast) {$/;"	f	file:
_AST_Validate_ParseResultRoot	ast/ast_validations.c	/^static AST_Validation _AST_Validate_ParseResultRoot(const cypher_parse_result_t *result,$/;"	f	file:
_AST_parse_result_root	ast/ast.c	/^static const cypher_astnode_t *_AST_parse_result_root(const cypher_parse_result_t *parse_result) {$/;"	f	file:
_AddProperties	execution_plan/ops/shared/create_functions.c	/^static inline void _AddProperties(ResultSetStatistics *stats, GraphEntity *ge,$/;"	f	file:
_AlgebraicExpression_AddToTheLeft	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_AddToTheLeft$/;"	f
_AlgebraicExpression_AddToTheRight	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_AddToTheRight$/;"	f
_AlgebraicExpression_ApplyTranspose	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _AlgebraicExpression_ApplyTranspose(AlgebraicExpression *root) {$/;"	f	file:
_AlgebraicExpression_CloneOperand	arithmetic/algebraic_expression/algebraic_expression.c	/^static AlgebraicExpression *_AlgebraicExpression_CloneOperand$/;"	f	file:
_AlgebraicExpression_CloneOperation	arithmetic/algebraic_expression/algebraic_expression.c	/^static AlgebraicExpression *_AlgebraicExpression_CloneOperation$/;"	f	file:
_AlgebraicExpression_CollectOperands	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _AlgebraicExpression_CollectOperands(AlgebraicExpression *root,$/;"	f	file:
_AlgebraicExpression_ContainsVariableLengthEdge	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static bool _AlgebraicExpression_ContainsVariableLengthEdge$/;"	f	file:
_AlgebraicExpression_Eval	arithmetic/algebraic_expression/algebraic_expression_eval.c	/^GrB_Matrix _AlgebraicExpression_Eval(const AlgebraicExpression *exp, GrB_Matrix res) {$/;"	f
_AlgebraicExpression_FlattenMultiplications	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _AlgebraicExpression_FlattenMultiplications(AlgebraicExpression *root) {$/;"	f	file:
_AlgebraicExpression_FreeOperand	arithmetic/algebraic_expression/utils.c	/^void _AlgebraicExpression_FreeOperand$/;"	f
_AlgebraicExpression_FreeOperation	arithmetic/algebraic_expression/utils.c	/^void _AlgebraicExpression_FreeOperation$/;"	f
_AlgebraicExpression_FromPath	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static AlgebraicExpression *_AlgebraicExpression_FromPath$/;"	f	file:
_AlgebraicExpression_FromString	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^AlgebraicExpression *_AlgebraicExpression_FromString$/;"	f
_AlgebraicExpression_GetOperand	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_GetOperand$/;"	f
_AlgebraicExpression_InplaceRepurpose	arithmetic/algebraic_expression/utils.c	/^void _AlgebraicExpression_InplaceRepurpose$/;"	f
_AlgebraicExpression_IsAdditionNode	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static inline bool _AlgebraicExpression_IsAdditionNode(const AlgebraicExpression *node) {$/;"	f	file:
_AlgebraicExpression_IsMultiplicationNode	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static inline bool _AlgebraicExpression_IsMultiplicationNode(const AlgebraicExpression *node) {$/;"	f	file:
_AlgebraicExpression_IsolateVariableLenExps	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static AlgebraicExpression **_AlgebraicExpression_IsolateVariableLenExps($/;"	f	file:
_AlgebraicExpression_LocateOperand	arithmetic/algebraic_expression/algebraic_expression.c	/^bool _AlgebraicExpression_LocateOperand$/;"	f
_AlgebraicExpression_MulOverAdd	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _AlgebraicExpression_MulOverAdd(AlgebraicExpression **root) {$/;"	f	file:
_AlgebraicExpression_MultiplyToTheLeft	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_MultiplyToTheLeft$/;"	f
_AlgebraicExpression_MultiplyToTheRight	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_MultiplyToTheRight$/;"	f
_AlgebraicExpression_OperandFromEdge	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static AlgebraicExpression *_AlgebraicExpression_OperandFromEdge$/;"	f	file:
_AlgebraicExpression_OperandFromNode	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static AlgebraicExpression *_AlgebraicExpression_OperandFromNode$/;"	f	file:
_AlgebraicExpression_Operand_Source	arithmetic/algebraic_expression/algebraic_expression.c	/^static const char *_AlgebraicExpression_Operand_Source$/;"	f	file:
_AlgebraicExpression_OperationRemoveChild	arithmetic/algebraic_expression/utils.c	/^void _AlgebraicExpression_OperationRemoveChild$/;"	f
_AlgebraicExpression_OperationRemoveDest	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_OperationRemoveDest$/;"	f
_AlgebraicExpression_OperationRemoveSource	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *_AlgebraicExpression_OperationRemoveSource$/;"	f
_AlgebraicExpression_Operation_Source	arithmetic/algebraic_expression/algebraic_expression.c	/^static const char *_AlgebraicExpression_Operation_Source$/;"	f	file:
_AlgebraicExpression_PopulateOperand	arithmetic/algebraic_expression/utils.c	/^static void _AlgebraicExpression_PopulateOperand(AlgebraicExpression *operand,$/;"	f	file:
_AlgebraicExpression_PopulateOperands	arithmetic/algebraic_expression/utils.c	/^void _AlgebraicExpression_PopulateOperands(AlgebraicExpression *root, const GraphContext *gc) {$/;"	f
_AlgebraicExpression_PopulateTransposedOperand	arithmetic/algebraic_expression/utils.c	/^static void _AlgebraicExpression_PopulateTransposedOperand(AlgebraicExpression *operand,$/;"	f	file:
_AlgebraicExpression_PrintTree	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^static void _AlgebraicExpression_PrintTree$/;"	f	file:
_AlgebraicExpression_RemoveOperand	arithmetic/algebraic_expression/algebraic_expression.c	/^static AlgebraicExpression *_AlgebraicExpression_RemoveOperand$/;"	f	file:
_AlgebraicExpression_Source	arithmetic/algebraic_expression/algebraic_expression.c	/^static const char *_AlgebraicExpression_Source$/;"	f	file:
_AlgebraicExpression_ToString	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^void _AlgebraicExpression_ToString$/;"	f
_AlgebraicExpression_TransposeOperand	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _AlgebraicExpression_TransposeOperand(AlgebraicExpression *operand) {$/;"	f	file:
_AliasIsReturned	ast/ast_validations.c	/^static inline bool _AliasIsReturned(rax *projections, const char *identifier) {$/;"	f	file:
_AllPathsCtx_AddConnectionToLevel	algorithms/all_paths.c	/^static void _AllPathsCtx_AddConnectionToLevel(AllPathsCtx *ctx, uint level, Node *node,$/;"	f	file:
_AllPathsCtx_LevelNotEmpty	algorithms/all_paths.c	/^static bool _AllPathsCtx_LevelNotEmpty(const AllPathsCtx *ctx, uint level) {$/;"	f	file:
_ApplyOpFromPathExpression	execution_plan/execution_plan_build/reduce_to_apply.c	/^static OpBase *_ApplyOpFromPathExpression(ExecutionPlan *plan, const char **vars,$/;"	f	file:
_BuildCallArguments	execution_plan/execution_plan_build/build_call_op.c	/^static AR_ExpNode **_BuildCallArguments(const cypher_astnode_t *call_clause) {$/;"	f	file:
_BuildCallProjections	execution_plan/execution_plan_build/build_call_op.c	/^static AR_ExpNode **_BuildCallProjections(const cypher_astnode_t *call_clause) {$/;"	f	file:
_BuildOrderExpressions	execution_plan/execution_plan_build/build_projection_ops.c	/^static AR_ExpNode **_BuildOrderExpressions(AR_ExpNode **projections,$/;"	f	file:
_BuildProjectionExpressions	execution_plan/execution_plan_build/build_projection_ops.c	/^AR_ExpNode **_BuildProjectionExpressions(const cypher_astnode_t *clause) {$/;"	f
_Build_Private_Data	procedures/proc_bfs.c	/^static BFSCtx *_Build_Private_Data() {$/;"	f	file:
_BulkDeleteEdges	graph/graph.c	/^static void _BulkDeleteEdges(Graph *g, Edge *edges, size_t edge_count) {$/;"	f	file:
_BulkDeleteNodes	graph/graph.c	/^static void _BulkDeleteNodes(Graph *g, Node *nodes, uint node_count,$/;"	f	file:
_BulkInsert_ProcessFile	bulk_insert/bulk_insert.c	/^static int _BulkInsert_ProcessFile(GraphContext *gc, const char *data,$/;"	f	file:
_BulkInsert_ProcessTokens	bulk_insert/bulk_insert.c	/^static int _BulkInsert_ProcessTokens(GraphContext *gc, int token_count,$/;"	f	file:
_BulkInsert_ReadHeader	bulk_insert/bulk_insert.c	/^static Attribute_ID *_BulkInsert_ReadHeader(GraphContext *gc, SchemaType t,$/;"	f	file:
_BulkInsert_ReadProperty	bulk_insert/bulk_insert.c	/^static SIValue _BulkInsert_ReadProperty(const char *data, size_t *data_idx) {$/;"	f	file:
_CacheEvictLRU	util/cache/cache.c	/^static CacheEntry *_CacheEvictLRU(Cache *cache) {$/;"	f	file:
_Cache_SetValue	util/cache/cache.c	/^static bool _Cache_SetValue(Cache *cache, const char *key, void *value,$/;"	f	file:
_ClearKeySpaceMetaKeys	module_event_handlers.c	/^static void _ClearKeySpaceMetaKeys(RedisModuleCtx *ctx, bool decode) {$/;"	f	file:
_CloneOpTree	execution_plan/execution_plan_clone.c	/^static OpBase *_CloneOpTree(OpBase *template_parent, OpBase *template_current,$/;"	f	file:
_ClonePlanInternals	execution_plan/execution_plan_clone.c	/^static ExecutionPlan *_ClonePlanInternals(const ExecutionPlan *template) {$/;"	f	file:
_CollectIdentifiers	ast/ast_validations.c	/^static void _CollectIdentifiers(const cypher_astnode_t *root, rax *projections) {$/;"	f	file:
_CommitEdges	execution_plan/ops/shared/create_functions.c	/^static void _CommitEdges(PendingCreations *pending) {$/;"	f	file:
_CommitNodes	execution_plan/ops/shared/create_functions.c	/^static void _CommitNodes(PendingCreations *pending) {$/;"	f	file:
_ComputeGroupKey	execution_plan/ops/op_aggregate.c	/^static void _ComputeGroupKey(OpAggregate *op, Record r) {$/;"	f	file:
_ComputeGroupKeyStr	execution_plan/ops/op_aggregate.c	/^static void _ComputeGroupKeyStr(OpAggregate *op, char **key) {$/;"	f	file:
_Concat_Filters	execution_plan/optimizations/utilize_indices.c	/^static FT_FilterNode *_Concat_Filters(OpFilter **filter_ops) {$/;"	f	file:
_Config_ParseInteger	configuration/config.c	/^static inline bool _Config_ParseInteger(const char *integer_str, long long *value) {$/;"	f	file:
_Config_ParsePositiveInteger	configuration/config.c	/^static inline bool _Config_ParsePositiveInteger(const char *integer_str, long long *value) {$/;"	f	file:
_Config_ParseYesNo	configuration/config.c	/^static inline bool _Config_ParseYesNo(const char *str, bool *value) {$/;"	f	file:
_Config_SetToDefaults	configuration/config.c	/^void _Config_SetToDefaults(void) {$/;"	f
_Config_get	commands/cmd_config.c	/^void _Config_get(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
_Config_get_all	commands/cmd_config.c	/^void _Config_get_all(RedisModuleCtx *ctx) {$/;"	f
_Config_set	commands/cmd_config.c	/^void _Config_set(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f
_ConstructIterator	execution_plan/ops/op_node_by_label_scan.c	/^static GrB_Info _ConstructIterator(NodeByLabelScan *op, Schema *schema) {$/;"	f	file:
_ConstructPropertyMap	ast/ast_build_op_contexts.c	/^static void _ConstructPropertyMap(PropertySetCtx *map, uint map_size,$/;"	f	file:
_ConvertSIType	serializers/decoders/prev/v5/decode_graph.c	/^static SIType _ConvertSIType(PrevSIType prev_type) {$/;"	f	file:
_ConvertSetItem	ast/ast_build_op_contexts.c	/^static void _ConvertSetItem(GraphContext *gc, rax *updates, const cypher_astnode_t *set_item) {$/;"	f	file:
_CreateBoundBranch	execution_plan/execution_plan_build/reduce_to_apply.c	/^static void _CreateBoundBranch(OpBase *op, ExecutionPlan *plan, const char **vars) {$/;"	f	file:
_CreateEdges	execution_plan/ops/op_create.c	/^static void _CreateEdges(OpCreate *op, Record r) {$/;"	f	file:
_CreateEntities	execution_plan/ops/op_merge_create.c	/^static bool _CreateEntities(OpMergeCreate *op, Record r) {$/;"	f	file:
_CreateFilterSubtree	ast/ast_build_filter_tree.c	/^FT_FilterNode *_CreateFilterSubtree(AST_Operator op, const cypher_astnode_t *lhs,$/;"	f
_CreateGraphMetaKeys	module_event_handlers.c	/^static void _CreateGraphMetaKeys(RedisModuleCtx *ctx, GraphContext *gc) {$/;"	f	file:
_CreateGroup	execution_plan/ops/op_aggregate.c	/^static Group *_CreateGroup(OpAggregate *op, Record r) {$/;"	f	file:
_CreateKeySpaceMetaKeys	module_event_handlers.c	/^static void _CreateKeySpaceMetaKeys(RedisModuleCtx *ctx) {$/;"	f	file:
_CreateNodes	execution_plan/ops/op_create.c	/^static void _CreateNodes(OpCreate *op, Record r) {$/;"	f	file:
_CreatePredicateFilterNode	ast/ast_build_filter_tree.c	/^FT_FilterNode *_CreatePredicateFilterNode(AST_Operator op, const cypher_astnode_t *lhs,$/;"	f
_CypherWhitelist_ValidateQuery	ast/cypher_whitelist.c	/^static AST_Validation _CypherWhitelist_ValidateQuery(const cypher_astnode_t *elem) {$/;"	f	file:
_DFS	algorithms/dfs.c	/^bool _DFS(QGNode *n, int level, bool close_cycle, int current_level, rax *visited, rax *used_edges,$/;"	f
_DFSMaxDepth	algorithms/longest_path.c	/^static int _DFSMaxDepth(QGNode *n) {$/;"	f	file:
_DataBlock_AddBlocks	util/datablock/datablock.c	/^static void _DataBlock_AddBlocks(DataBlock *dataBlock, uint blockCount) {$/;"	f	file:
_DataBlock_IndexOutOfBounds	util/datablock/datablock.c	/^static inline bool _DataBlock_IndexOutOfBounds(const DataBlock *dataBlock, uint64_t idx) {$/;"	f	file:
_DecodeHeader	serializers/decoders/current/v9/decode_graph.c	/^static GraphContext *_DecodeHeader(RedisModuleIO *rdb) {$/;"	f	file:
_DecodeHeader	serializers/decoders/prev/v7/decode_graph.c	/^static GraphContext *_DecodeHeader(RedisModuleIO *rdb) {$/;"	f	file:
_DecodeHeader	serializers/decoders/prev/v8/decode_graph.c	/^static GraphContext *_DecodeHeader(RedisModuleIO *rdb) {$/;"	f	file:
_DelegateWriter	commands/cmd_query.c	/^static void _DelegateWriter(GraphQueryCtx *gq_ctx) {$/;"	f	file:
_DeleteEntities	execution_plan/ops/op_delete.c	/^void _DeleteEntities(OpDelete *op) {$/;"	f
_DeleteGraphMetaKeys	module_event_handlers.c	/^static void _DeleteGraphMetaKeys(RedisModuleCtx *ctx, GraphContext *gc, bool decode) {$/;"	f	file:
_Edge_ReverseDirection	datatypes/path/sipath_builder.c	/^static Edge _Edge_ReverseDirection(Edge *e) {$/;"	f	file:
_EmitIndex	procedures/proc_list_indexes.c	/^static bool _EmitIndex(IndexesContext *ctx, const Schema *s, IndexType type) {$/;"	f	file:
_EnableMultiEdgeSupport	serializers/decoders/current/v9/decode_graph.c	/^static void _EnableMultiEdgeSupport(Graph *g) {$/;"	f	file:
_EnableMultiEdgeSupport	serializers/decoders/prev/v8/decode_graph.c	/^static void _EnableMultiEdgeSupport(Graph *g) {$/;"	f	file:
_ErrorCtx_SetError	errors.c	/^static void _ErrorCtx_SetError(const char *err_fmt, va_list args) {$/;"	f	file:
_Eval_Add	arithmetic/algebraic_expression/algebraic_expression_eval.c	/^static GrB_Matrix _Eval_Add(const AlgebraicExpression *exp, GrB_Matrix res) {$/;"	f	file:
_Eval_Mul	arithmetic/algebraic_expression/algebraic_expression_eval.c	/^static GrB_Matrix _Eval_Mul(const AlgebraicExpression *exp, GrB_Matrix res) {$/;"	f	file:
_Eval_Transpose	arithmetic/algebraic_expression/algebraic_expression_eval.c	/^static GrB_Matrix _Eval_Transpose$/;"	f	file:
_ExecuteQuery	commands/cmd_query.c	/^static void _ExecuteQuery(void *args) {$/;"	f	file:
_ExecutionCtx_New	commands/execution_ctx.c	/^static ExecutionCtx *_ExecutionCtx_New(AST *ast, ExecutionPlan *plan,$/;"	f	file:
_ExecutionCtx_ParseAST	commands/execution_ctx.c	/^static AST *_ExecutionCtx_ParseAST(const char *query_string,$/;"	f	file:
_ExecutionPlanInit	execution_plan/execution_plan.c	/^static void _ExecutionPlanInit(OpBase *root) {$/;"	f	file:
_ExecutionPlan_Clone	execution_plan/execution_plan_clone.c	/^static ExecutionPlan *_ExecutionPlan_Clone(const ExecutionPlan *template) {$/;"	f	file:
_ExecutionPlan_CollectOpsMatchingType	execution_plan/execution_plan_build/execution_plan_modify.c	/^static void _ExecutionPlan_CollectOpsMatchingType(OpBase *root, const OPType *types, int type_count,$/;"	f	file:
_ExecutionPlan_Drain	execution_plan/execution_plan.c	/^static void _ExecutionPlan_Drain(OpBase *root) {$/;"	f	file:
_ExecutionPlan_FinalizeProfiling	execution_plan/execution_plan.c	/^static void _ExecutionPlan_FinalizeProfiling(OpBase *root) {$/;"	f	file:
_ExecutionPlan_FindLastWriter	execution_plan/execution_plan.c	/^static OpBase *_ExecutionPlan_FindLastWriter(OpBase *root) {$/;"	f	file:
_ExecutionPlan_FreeInternals	execution_plan/execution_plan.c	/^static void _ExecutionPlan_FreeInternals(ExecutionPlan *plan) {$/;"	f	file:
_ExecutionPlan_FreeOpTree	execution_plan/execution_plan.c	/^static ExecutionPlan *_ExecutionPlan_FreeOpTree(OpBase *op) {$/;"	f	file:
_ExecutionPlan_InitProfiling	execution_plan/execution_plan.c	/^static void _ExecutionPlan_InitProfiling(OpBase *root) {$/;"	f	file:
_ExecutionPlan_InitRecordPool	execution_plan/execution_plan.c	/^static inline void _ExecutionPlan_InitRecordPool(ExecutionPlan *plan) {$/;"	f	file:
_ExecutionPlan_LocateTaps	execution_plan/execution_plan_build/execution_plan_modify.c	/^void _ExecutionPlan_LocateTaps(OpBase *root, OpBase ***taps) {$/;"	f
_ExecutionPlan_ParentReplaceChild	execution_plan/execution_plan_build/execution_plan_modify.c	/^static void _ExecutionPlan_ParentReplaceChild(OpBase *parent, OpBase *old_child,$/;"	f	file:
_ExecutionPlan_PlaceApplyOps	execution_plan/execution_plan_build/execution_plan_construct.c	/^static void _ExecutionPlan_PlaceApplyOps(ExecutionPlan *plan) {$/;"	f	file:
_ExecutionPlan_Print	execution_plan/execution_plan_debug.c	/^void _ExecutionPlan_Print(const OpBase *op, RedisModuleCtx *ctx, char *buffer, int buffer_len,$/;"	f
_ExecutionPlan_ProcessQueryGraph	execution_plan/execution_plan_build/build_match_op_tree.c	/^static void _ExecutionPlan_ProcessQueryGraph(ExecutionPlan *plan, QueryGraph *qg,$/;"	f	file:
_ExecutionPlan_UnionPlans	execution_plan/execution_plan.c	/^static ExecutionPlan *_ExecutionPlan_UnionPlans(AST *ast) {$/;"	f	file:
_FT_Append	ast/ast_build_filter_tree.c	/^void _FT_Append(FT_FilterNode **root_ptr, FT_FilterNode *child) {$/;"	f
_FilterCtx_Free	execution_plan/optimizations/optimize_cartesian_product.c	/^static inline void _FilterCtx_Free(FilterCtx *ctx) {$/;"	f	file:
_FilterNode_FromAST	ast/ast_build_filter_tree.c	/^FT_FilterNode *_FilterNode_FromAST(const cypher_astnode_t *expr) {$/;"	f
_FilterTreeConditionToQueryNode	filter_tree/ft_to_rsq.c	/^static bool _FilterTreeConditionToQueryNode$/;"	f	file:
_FilterTreePredicateToQueryNode	filter_tree/ft_to_rsq.c	/^static bool _FilterTreePredicateToQueryNode$/;"	f	file:
_FilterTreeToDistanceQueryNode	filter_tree/ft_to_rsq.c	/^static RSQNode *_FilterTreeToDistanceQueryNode$/;"	f	file:
_FilterTreeToInQueryNode	filter_tree/ft_to_rsq.c	/^static RSQNode *_FilterTreeToInQueryNode$/;"	f	file:
_FilterTreeToQueryNode	filter_tree/ft_to_rsq.c	/^static bool _FilterTreeToQueryNode$/;"	f	file:
_FilterTree_ApplyNegate	filter_tree/filter_tree.c	/^void _FilterTree_ApplyNegate(FT_FilterNode **root, uint negate_count) {$/;"	f
_FilterTree_Clone_Cond	filter_tree/filter_tree.c	/^static inline FT_FilterNode *_FilterTree_Clone_Cond(const FT_FilterNode *node) {$/;"	f	file:
_FilterTree_Clone_Exp	filter_tree/filter_tree.c	/^static inline FT_FilterNode *_FilterTree_Clone_Exp(const FT_FilterNode *node) {$/;"	f	file:
_FilterTree_Clone_Pred	filter_tree/filter_tree.c	/^static inline FT_FilterNode *_FilterTree_Clone_Pred(const FT_FilterNode *node) {$/;"	f	file:
_FilterTree_CollectAttributes	filter_tree/filter_tree.c	/^void _FilterTree_CollectAttributes(const FT_FilterNode *root, rax *attributes) {$/;"	f
_FilterTree_CollectModified	filter_tree/filter_tree.c	/^void _FilterTree_CollectModified(const FT_FilterNode *root, rax *modified) {$/;"	f
_FilterTree_Compact_And	filter_tree/filter_tree.c	/^static bool _FilterTree_Compact_And(FT_FilterNode *node) {$/;"	f	file:
_FilterTree_Compact_Cond	filter_tree/filter_tree.c	/^static inline bool _FilterTree_Compact_Cond(FT_FilterNode *node) {$/;"	f	file:
_FilterTree_Compact_Exp	filter_tree/filter_tree.c	/^static inline bool _FilterTree_Compact_Exp(FT_FilterNode *node) {$/;"	f	file:
_FilterTree_Compact_Or	filter_tree/filter_tree.c	/^static bool _FilterTree_Compact_Or(FT_FilterNode *node) {$/;"	f	file:
_FilterTree_Compact_Pred	filter_tree/filter_tree.c	/^static bool _FilterTree_Compact_Pred(FT_FilterNode *node) {$/;"	f	file:
_FilterTree_ContainsFunc	filter_tree/filter_tree.c	/^bool _FilterTree_ContainsFunc(const FT_FilterNode *root, const char *func, FT_FilterNode **node) {$/;"	f
_FilterTree_DeMorgan	filter_tree/filter_tree.c	/^void _FilterTree_DeMorgan(FT_FilterNode **root, uint negate_count) {$/;"	f
_FilterTree_In_Place_Set_Exp	filter_tree/filter_tree.c	/^static inline void _FilterTree_In_Place_Set_Exp(FT_FilterNode *node, SIValue v) {$/;"	f	file:
_FilterTree_Print	filter_tree/filter_tree.c	/^void _FilterTree_Print(const FT_FilterNode *root, int ident) {$/;"	f
_FilterTree_ResolveVariables	filter_tree/filter_tree.c	/^static void _FilterTree_ResolveVariables(FT_FilterNode *root, const Record r) {$/;"	f	file:
_FilterTree_SubTrees	filter_tree/filter_tree.c	/^void _FilterTree_SubTrees(FT_FilterNode *root, FT_FilterNode ***sub_trees) {$/;"	f
_FilterTree_ValidExpressionNode	filter_tree/filter_tree.c	/^static inline bool _FilterTree_ValidExpressionNode(const FT_FilterNode *root) {$/;"	f	file:
_FlushDBHandler	module_event_handlers.c	/^static void _FlushDBHandler(RedisModuleCtx *ctx, RedisModuleEvent eid, uint64_t subevent,$/;"	f	file:
_FreeProjectAllAnnotationCallback	ast/enrichment/annotate_project_all.c	/^static void _FreeProjectAllAnnotationCallback(void *unused, const cypher_astnode_t *node,$/;"	f	file:
_GetExecutionTypeFromAST	commands/execution_ctx.c	/^static ExecutionType _GetExecutionTypeFromAST(AST *ast) {$/;"	f	file:
_GetGroup	execution_plan/ops/op_aggregate.c	/^static Group *_GetGroup(OpAggregate *op, Record r) {$/;"	f	file:
_GetOrCreateGraphContext	serializers/decoders/current/v9/decode_graph.c	/^static GraphContext *_GetOrCreateGraphContext(char *graph_name) {$/;"	f	file:
_GetOrCreateGraphContext	serializers/decoders/prev/v7/decode_graph.c	/^static GraphContext *_GetOrCreateGraphContext(char *graph_name) {$/;"	f	file:
_GetOrCreateGraphContext	serializers/decoders/prev/v8/decode_graph.c	/^static GraphContext *_GetOrCreateGraphContext(char *graph_name) {$/;"	f	file:
_GraphContextType_AofRewrite	serializers/graphcontext_type.c	/^static void _GraphContextType_AofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f	file:
_GraphContextType_AuxLoad	serializers/graphcontext_type.c	/^static int _GraphContextType_AuxLoad(RedisModuleIO *rdb, int encver, int when) {$/;"	f	file:
_GraphContextType_AuxSave	serializers/graphcontext_type.c	/^static void _GraphContextType_AuxSave(RedisModuleIO *rdb, int when) {$/;"	f	file:
_GraphContextType_Free	serializers/graphcontext_type.c	/^static void _GraphContextType_Free(void *value) {$/;"	f	file:
_GraphContextType_RdbLoad	serializers/graphcontext_type.c	/^static void *_GraphContextType_RdbLoad(RedisModuleIO *rdb, int encver) {$/;"	f	file:
_GraphContextType_RdbSave	serializers/graphcontext_type.c	/^static void _GraphContextType_RdbSave(RedisModuleIO *rdb, void *value) {$/;"	f	file:
_GraphContext_Create	graph/graphcontext.c	/^static GraphContext *_GraphContext_Create(RedisModuleCtx *ctx, const char *graph_name,$/;"	f	file:
_GraphContext_DecreaseRefCount	graph/graphcontext.c	/^static inline void _GraphContext_DecreaseRefCount(GraphContext *gc) {$/;"	f	file:
_GraphContext_Free	graph/graphcontext.c	/^static void _GraphContext_Free(void *arg) {$/;"	f	file:
_GraphContext_GetLabelID	graph/graphcontext.c	/^int _GraphContext_GetLabelID(const GraphContext *gc, const char *label, SchemaType t) {$/;"	f
_GraphContext_IncreaseRefCount	graph/graphcontext.c	/^static inline void _GraphContext_IncreaseRefCount(GraphContext *gc) {$/;"	f	file:
_GraphContext_IsModuleReplicating	graph/graphcontext.c	/^static bool _GraphContext_IsModuleReplicating(void) {$/;"	f	file:
_GraphContext_NameContainsTag	module_event_handlers.c	/^static bool _GraphContext_NameContainsTag(const GraphContext *gc) {$/;"	f	file:
_GraphContext_RequiredMetaKeys	module_event_handlers.c	/^static uint64_t _GraphContext_RequiredMetaKeys(const GraphContext *gc) {$/;"	f	file:
_GraphContext_UpdateVersion	graph/graphcontext.c	/^static void _GraphContext_UpdateVersion(GraphContext *gc, const char *str) {$/;"	f	file:
_GraphEncodeContext_ResetHeader	serializers/encode_context.c	/^static void _GraphEncodeContext_ResetHeader(GraphEncodeContext *ctx) {$/;"	f	file:
_GraphEntity_RemoveProperty	graph/entities/graph_entity.c	/^static bool _GraphEntity_RemoveProperty(const GraphEntity *e, Attribute_ID attr_id) {$/;"	f	file:
_GraphMetaType_AofRewrite	serializers/graphmeta_type.c	/^static void _GraphMetaType_AofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f	file:
_GraphMetaType_Free	serializers/graphmeta_type.c	/^static void _GraphMetaType_Free(void *value) {$/;"	f	file:
_GraphMetaType_RdbLoad	serializers/graphmeta_type.c	/^static void *_GraphMetaType_RdbLoad(RedisModuleIO *rdb, int encver) {$/;"	f	file:
_GraphMetaType_RdbSave	serializers/graphmeta_type.c	/^static void _GraphMetaType_RdbSave(RedisModuleIO *rdb, void *value) {$/;"	f	file:
_Graph_ApplyPending	graph/graph.c	/^static inline void _Graph_ApplyPending(GrB_Matrix m) {$/;"	f	file:
_Graph_BulkInsert	commands/cmd_bulk_insert.c	/^static void _Graph_BulkInsert(void *args) {$/;"	f	file:
_Graph_Bulk_Begin	commands/cmd_bulk_insert.c	/^static int _Graph_Bulk_Begin(RedisModuleCtx *ctx, RedisModuleString ***argv,$/;"	f	file:
_Graph_EdgeCap	graph/graph.c	/^size_t _Graph_EdgeCap(const Graph *g) {$/;"	f
_Graph_FreeRelationMatrices	graph/graph.c	/^static void _Graph_FreeRelationMatrices(Graph *g) {$/;"	f	file:
_Graph_GetEdgesConnectingNodes	graph/graph.c	/^void _Graph_GetEdgesConnectingNodes(const Graph *g, NodeID src, NodeID dest, int r, Edge **edges) {$/;"	f
_Graph_GetEntity	graph/graph.c	/^static inline Entity *_Graph_GetEntity(const DataBlock *entities, EntityID id) {$/;"	f	file:
_Graph_NodeCap	graph/graph.c	/^size_t _Graph_NodeCap(const Graph *g) {$/;"	f
_Graph_SetAdjacencyMatrixDirty	graph/graph.c	/^static inline void _Graph_SetAdjacencyMatrixDirty(const Graph *g) {$/;"	f	file:
_Graph_SetLabelMatrixDirty	graph/graph.c	/^static inline void _Graph_SetLabelMatrixDirty(const Graph *g, int label_idx) {$/;"	f	file:
_Graph_SetRelationMatrixDirty	graph/graph.c	/^static inline void _Graph_SetRelationMatrixDirty(const Graph *g, int relation_idx) {$/;"	f	file:
_Graph_UpdateMatrixDimensions	graph/graph.c	/^static inline void _Graph_UpdateMatrixDimensions(Graph *g, size_t node_count) {$/;"	f	file:
_HT_dictExpandIfNeeded	util/dict.c	/^static int _HT_dictExpandIfNeeded(dict *d)$/;"	f	file:
_HT_dictNextPower	util/dict.c	/^static unsigned long _HT_dictNextPower(unsigned long size)$/;"	f	file:
_IncrementalHashEntity	execution_plan/ops/op_merge_create.c	/^static void _IncrementalHashEntity(XXH64_state_t *state, const char *label,$/;"	f	file:
_InitGraphDataStructure	serializers/decoders/current/v9/decode_graph.c	/^static void _InitGraphDataStructure(Graph *g, uint64_t node_count, uint64_t edge_count,$/;"	f	file:
_InitGraphDataStructure	serializers/decoders/prev/v7/decode_graph.c	/^static void _InitGraphDataStructure(Graph *g, uint64_t node_count, uint64_t edge_count,$/;"	f	file:
_InitGraphDataStructure	serializers/decoders/prev/v8/decode_graph.c	/^static void _InitGraphDataStructure(Graph *g, uint64_t node_count, uint64_t edge_count,$/;"	f	file:
_InitializeUpdates	execution_plan/ops/op_merge.c	/^static void _InitializeUpdates(OpMerge *op, rax *updates, raxIterator *it) {$/;"	f	file:
_InplaceRepurposeOperandToOperation	arithmetic/algebraic_expression/utils.c	/^void _InplaceRepurposeOperandToOperation$/;"	f
_Intermediate_Paths	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static QGEdge ***_Intermediate_Paths$/;"	f	file:
_IsEventPersistenceEnd	module_event_handlers.c	/^static bool _IsEventPersistenceEnd(RedisModuleEvent eid, uint64_t subevent) {$/;"	f	file:
_IsEventPersistenceStart	module_event_handlers.c	/^static bool _IsEventPersistenceStart(RedisModuleEvent eid, uint64_t subevent) {$/;"	f	file:
_JsonEncoder_Array	util/json_encoder.c	/^static sds _JsonEncoder_Array(SIValue list, sds s) {$/;"	f	file:
_JsonEncoder_Edge	util/json_encoder.c	/^static sds _JsonEncoder_Edge(Edge *e, sds s) {$/;"	f	file:
_JsonEncoder_GraphEntity	util/json_encoder.c	/^static sds _JsonEncoder_GraphEntity(GraphEntity *ge, sds s, GraphEntityType type) {$/;"	f	file:
_JsonEncoder_Map	util/json_encoder.c	/^static sds _JsonEncoder_Map(SIValue map, sds s) {$/;"	f	file:
_JsonEncoder_Node	util/json_encoder.c	/^static sds _JsonEncoder_Node(const Node *n, sds s) {$/;"	f	file:
_JsonEncoder_Path	util/json_encoder.c	/^static sds _JsonEncoder_Path(SIValue p, sds s) {$/;"	f	file:
_JsonEncoder_Properties	util/json_encoder.c	/^static sds _JsonEncoder_Properties(const GraphEntity *ge, sds s) {$/;"	f	file:
_JsonEncoder_SIValue	util/json_encoder.c	/^sds _JsonEncoder_SIValue(SIValue v, sds s) {$/;"	f
_JsonEncoder_String	util/json_encoder.c	/^static inline sds _JsonEncoder_String(SIValue v, sds s) {$/;"	f	file:
_LabelScanToConditionalTraverse	execution_plan/optimizations/reduce_scans.c	/^static OpBase *_LabelScanToConditionalTraverse(NodeByLabelScan *op) {$/;"	f	file:
_LocateOp	execution_plan/ops/op_merge.c	/^static OpBase *_LocateOp(OpBase *root, OPType type) {$/;"	f	file:
_MatrixNOP	graph/graph.c	/^void _MatrixNOP(const Graph *g, RG_Matrix matrix) {$/;"	f
_MatrixResizeToCapacity	graph/graph.c	/^void _MatrixResizeToCapacity(const Graph *g, RG_Matrix matrix) {$/;"	f
_MatrixSynchronize	graph/graph.c	/^void _MatrixSynchronize(const Graph *g, RG_Matrix rg_matrix) {$/;"	f
_ModuleEventHandler_TryClearKeyspace	module_event_handlers.c	/^static void _ModuleEventHandler_TryClearKeyspace(void) {$/;"	f	file:
_MultiEdgeMatrix	serializers/encode_context.c	/^static bool _MultiEdgeMatrix(GrB_Matrix R, GrB_Monoid min_monoid) {$/;"	f	file:
_NegateExpression	filter_tree/filter_tree.c	/^static void _NegateExpression(AR_ExpNode **exp) {$/;"	f	file:
_NegateOperator	filter_tree/filter_tree.c	/^static AST_Operator _NegateOperator(AST_Operator op) {$/;"	f	file:
_NewEdgeCreateCtx	ast/ast_build_op_contexts.c	/^static inline EdgeCreateCtx _NewEdgeCreateCtx(GraphContext *gc, const QGEdge *e,$/;"	f	file:
_NewMockASTSegment	ast/ast_validations.c	/^static AST *_NewMockASTSegment(const cypher_astnode_t *root, uint start_offset, uint end_offset) {$/;"	f	file:
_NewNodeCreateCtx	ast/ast_build_op_contexts.c	/^static inline NodeCreateCtx _NewNodeCreateCtx(GraphContext *gc, const QGNode *n,$/;"	f	file:
_NodeToString	execution_plan/ops/shared/print_functions.c	/^static inline int _NodeToString(char *buf, uint buf_len, const char *alias, const char *label) {$/;"	f	file:
_NumericRangeToQueryNode	filter_tree/ft_to_rsq.c	/^static RSQNode *_NumericRangeToQueryNode$/;"	f	file:
_ObjectPool_AddBlocks	util/object_pool/object_pool.c	/^static void _ObjectPool_AddBlocks(ObjectPool *pool, uint blockCount) {$/;"	f	file:
_ObjectPool_ReuseItem	util/object_pool/object_pool.c	/^static void *_ObjectPool_ReuseItem(ObjectPool *pool) {$/;"	f	file:
_OpApplyMultiplexer_SortChildren	execution_plan/ops/op_apply_multiplexer.c	/^static void _OpApplyMultiplexer_SortChildren(OpBase *op) {$/;"	f	file:
_OpBaseSwapChildren	execution_plan/execution_plan_build/reduce_to_apply.c	/^static inline void _OpBaseSwapChildren(OpBase *op, int a, int b) {$/;"	f	file:
_OpBase_AddChild	execution_plan/execution_plan_build/execution_plan_modify.c	/^static void _OpBase_AddChild(OpBase *parent, OpBase *child) {$/;"	f	file:
_OpBase_RemoveChild	execution_plan/execution_plan_build/execution_plan_modify.c	/^static void _OpBase_RemoveChild(OpBase *parent, OpBase *child) {$/;"	f	file:
_OpBase_StatsToString	execution_plan/ops/op.c	/^static int _OpBase_StatsToString(const OpBase *op, char *buff, uint buff_len) {$/;"	f	file:
_POSIX_C_SOURCE	util/simple_timer.h	/^#define _POSIX_C_SOURCE /;"	d
_ParameterFreeCallback	query_ctx.c	/^static void _ParameterFreeCallback(void *param_val) {$/;"	f	file:
_PassUnresolvedFilters	execution_plan/ops/op_index_scan.c	/^static inline bool _PassUnresolvedFilters(const IndexScan *op, Record r) {$/;"	f	file:
_PersistenceEventHandler	module_event_handlers.c	/^static void _PersistenceEventHandler(RedisModuleCtx *ctx, RedisModuleEvent eid, uint64_t subevent,$/;"	f	file:
_PopulateComprehensionCtx	arithmetic/comprehension_funcs/comprehension_funcs.c	/^static void _PopulateComprehensionCtx(ListComprehensionCtx *ctx, Record outer_record) {$/;"	f	file:
_PopulateProjectAll	execution_plan/execution_plan_build/build_projection_ops.c	/^static AR_ExpNode **_PopulateProjectAll(const cypher_astnode_t *clause) {$/;"	f	file:
_PrepareModuleGlobals	module.c	/^static void _PrepareModuleGlobals(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	file:
_PropertyMap_Clone	ast/ast_shared.c	/^static PropertyMap *_PropertyMap_Clone(PropertyMap *map) {$/;"	f	file:
_PullFromStreams	execution_plan/ops/op_cartesian_product.c	/^static int _PullFromStreams(CartesianProduct *op) {$/;"	f	file:
_PushDownPathFilters	execution_plan/execution_plan_build/execution_plan_construct.c	/^static inline void _PushDownPathFilters(ExecutionPlan *plan,$/;"	f	file:
_Pushdown_TransposeAddition	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _Pushdown_TransposeAddition$/;"	f	file:
_Pushdown_TransposeExp	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _Pushdown_TransposeExp$/;"	f	file:
_Pushdown_TransposeMultiplication	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _Pushdown_TransposeMultiplication$/;"	f	file:
_Pushdown_TransposeOperand	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _Pushdown_TransposeOperand$/;"	f	file:
_Pushdown_TransposeOperation	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _Pushdown_TransposeOperation$/;"	f	file:
_Pushdown_TransposeTranspose	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static void _Pushdown_TransposeTranspose$/;"	f	file:
_QGNode_RemoveEdge	graph/entities/qg_node.c	/^static void _QGNode_RemoveEdge(QGEdge **edges, QGEdge *e) {$/;"	f	file:
_QSORT_MAX_THRESH	util/qsort.h	/^#define _QSORT_MAX_THRESH /;"	d
_QSORT_POP	util/qsort.h	/^#define _QSORT_POP(/;"	d
_QSORT_PUSH	util/qsort.h	/^#define _QSORT_PUSH(/;"	d
_QSORT_STACK_NOT_EMPTY	util/qsort.h	/^#define _QSORT_STACK_NOT_EMPTY /;"	d
_QSORT_STACK_SIZE	util/qsort.h	/^#define _QSORT_STACK_SIZE /;"	d
_QSORT_SWAP	util/qsort.h	/^#define _QSORT_SWAP(/;"	d
_QueryCtx_GetCtx	query_ctx.c	/^static inline QueryCtx *_QueryCtx_GetCtx(void) {$/;"	f	file:
_QueryCtx_ThreadSafeContextLock	query_ctx.c	/^static void _QueryCtx_ThreadSafeContextLock(QueryCtx *ctx) {$/;"	f	file:
_QueryCtx_ThreadSafeContextUnlock	query_ctx.c	/^static void _QueryCtx_ThreadSafeContextUnlock(QueryCtx *ctx) {$/;"	f	file:
_QueryCtx_UnlockCommit	query_ctx.c	/^static void _QueryCtx_UnlockCommit(QueryCtx *ctx) {$/;"	f	file:
_QueryGraphAddEdge	graph/query_graph.c	/^static void _QueryGraphAddEdge(QueryGraph *qg, const cypher_astnode_t *ast_entity,$/;"	f	file:
_QueryGraphAddNode	graph/query_graph.c	/^static void _QueryGraphAddNode(QueryGraph *qg, const cypher_astnode_t *ast_entity) {$/;"	f	file:
_QueryGraphSetNodeLabel	graph/query_graph.c	/^static void _QueryGraphSetNodeLabel(QGNode *n, const cypher_astnode_t *ast_entity) {$/;"	f	file:
_QueryGraph_ExtractEdge	graph/query_graph.c	/^static void _QueryGraph_ExtractEdge(const QueryGraph *qg, QueryGraph *graph,$/;"	f	file:
_QueryGraph_ExtractNode	graph/query_graph.c	/^static void _QueryGraph_ExtractNode(const QueryGraph *qg, QueryGraph *graph,$/;"	f	file:
_QueryGraph_ExtractPath	graph/query_graph.c	/^static void _QueryGraph_ExtractPath(const QueryGraph *qg, QueryGraph *graph,$/;"	f	file:
_REDISMODULE_CTX_FLAGS_NEXT	redismodule.h	/^#define _REDISMODULE_CTX_FLAGS_NEXT /;"	d
_REDISMODULE_EVENT_NEXT	redismodule.h	/^#define _REDISMODULE_EVENT_NEXT /;"	d
_REDISMODULE_EVENT_REPLROLECHANGED_NEXT	redismodule.h	/^#define _REDISMODULE_EVENT_REPLROLECHANGED_NEXT /;"	d
_REDISMODULE_NOTIFY_NEXT	redismodule.h	/^#define _REDISMODULE_NOTIFY_NEXT /;"	d
_REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT /;"	d
_REDISMODULE_SUBEVENT_CRON_LOOP_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_CRON_LOOP_NEXT /;"	d
_REDISMODULE_SUBEVENT_FLUSHDB_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_FLUSHDB_NEXT /;"	d
_REDISMODULE_SUBEVENT_LOADING_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_LOADING_NEXT /;"	d
_REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT /;"	d
_REDISMODULE_SUBEVENT_MASTER_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_MASTER_NEXT /;"	d
_REDISMODULE_SUBEVENT_MODULE_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_MODULE_NEXT /;"	d
_REDISMODULE_SUBEVENT_PERSISTENCE_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_PERSISTENCE_NEXT /;"	d
_REDISMODULE_SUBEVENT_REPLICA_CHANGE_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_REPLICA_CHANGE_NEXT /;"	d
_REDISMODULE_SUBEVENT_SHUTDOWN_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_SHUTDOWN_NEXT /;"	d
_REDISMODULE_SUBEVENT_SWAPDB_NEXT	redismodule.h	/^#define _REDISMODULE_SUBEVENT_SWAPDB_NEXT /;"	d
_RG_Matrix	graph/graph.h	/^} _RG_Matrix;$/;"	t	typeref:struct:__anon84
_RG_Matrix_MultiEdgeEnabled	graph/graph.c	/^static inline bool _RG_Matrix_MultiEdgeEnabled(RG_Matrix matrix) {$/;"	f	file:
_RG_Matrix_Unlock	graph/graph.c	/^static inline void _RG_Matrix_Unlock(RG_Matrix matrix) {$/;"	f	file:
_RdbLoadAttributeKeys	serializers/decoders/current/v9/decode_graph_schema.c	/^static void _RdbLoadAttributeKeys(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadAttributeKeys	serializers/decoders/prev/v5/decode_graphcontext.c	/^static void _RdbLoadAttributeKeys(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadAttributeKeys	serializers/decoders/prev/v6/decode_graphcontext.c	/^static void _RdbLoadAttributeKeys(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadAttributeKeys	serializers/decoders/prev/v7/decode_graph_schema.c	/^static void _RdbLoadAttributeKeys(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadAttributeKeys	serializers/decoders/prev/v8/decode_graph_schema.c	/^static void _RdbLoadAttributeKeys(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadEdges	serializers/decoders/prev/v5/decode_graph.c	/^static void _RdbLoadEdges(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadEdges	serializers/decoders/prev/v6/decode_graph.c	/^static void _RdbLoadEdges(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadEntity	serializers/decoders/current/v9/decode_graph_entities.c	/^static void _RdbLoadEntity(RedisModuleIO *rdb, GraphContext *gc, GraphEntity *e) {$/;"	f	file:
_RdbLoadEntity	serializers/decoders/prev/v5/decode_graph.c	/^static void _RdbLoadEntity(RedisModuleIO *rdb, GraphContext *gc, GraphEntity *e) {$/;"	f	file:
_RdbLoadEntity	serializers/decoders/prev/v6/decode_graph.c	/^static void _RdbLoadEntity(RedisModuleIO *rdb, GraphContext *gc, GraphEntity *e) {$/;"	f	file:
_RdbLoadEntity	serializers/decoders/prev/v7/decode_graph_entities.c	/^static void _RdbLoadEntity(RedisModuleIO *rdb, GraphContext *gc, GraphEntity *e) {$/;"	f	file:
_RdbLoadEntity	serializers/decoders/prev/v8/decode_graph_entities.c	/^static void _RdbLoadEntity(RedisModuleIO *rdb, GraphContext *gc, GraphEntity *e) {$/;"	f	file:
_RdbLoadKeySchema	serializers/decoders/current/v9/decode_graph.c	/^static PayloadInfo *_RdbLoadKeySchema(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadKeySchema	serializers/decoders/prev/v7/decode_graph.c	/^static PayloadInfo *_RdbLoadKeySchema(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadKeySchema	serializers/decoders/prev/v8/decode_graph.c	/^static PayloadInfo *_RdbLoadKeySchema(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadNodes	serializers/decoders/prev/v5/decode_graph.c	/^static void _RdbLoadNodes(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadNodes	serializers/decoders/prev/v6/decode_graph.c	/^static void _RdbLoadNodes(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbLoadPoint	serializers/decoders/current/v9/decode_graph_entities.c	/^static SIValue _RdbLoadPoint(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIArray	serializers/decoders/current/v9/decode_graph_entities.c	/^static SIValue _RdbLoadSIArray(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIArray	serializers/decoders/prev/v6/decode_graph.c	/^SIValue _RdbLoadSIArray(RedisModuleIO *rdb) {$/;"	f
_RdbLoadSIArray	serializers/decoders/prev/v7/decode_graph_entities.c	/^static SIValue _RdbLoadSIArray(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIArray	serializers/decoders/prev/v8/decode_graph_entities.c	/^static SIValue _RdbLoadSIArray(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIValue	serializers/decoders/current/v9/decode_graph_entities.c	/^static SIValue _RdbLoadSIValue(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIValue	serializers/decoders/prev/v5/decode_graph.c	/^static SIValue _RdbLoadSIValue(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIValue	serializers/decoders/prev/v6/decode_graph.c	/^static SIValue _RdbLoadSIValue(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIValue	serializers/decoders/prev/v7/decode_graph_entities.c	/^static SIValue _RdbLoadSIValue(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSIValue	serializers/decoders/prev/v8/decode_graph_entities.c	/^static SIValue _RdbLoadSIValue(RedisModuleIO *rdb) {$/;"	f	file:
_RdbLoadSchema	serializers/decoders/current/v9/decode_graph_schema.c	/^static Schema *_RdbLoadSchema(RedisModuleIO *rdb, SchemaType type) {$/;"	f	file:
_RdbLoadSchema	serializers/decoders/prev/v7/decode_graph_schema.c	/^static Schema *_RdbLoadSchema(RedisModuleIO *rdb, SchemaType type) {$/;"	f	file:
_RdbLoadSchema	serializers/decoders/prev/v8/decode_graph_schema.c	/^static Schema *_RdbLoadSchema(RedisModuleIO *rdb, SchemaType type) {$/;"	f	file:
_RdbSaveAttributeKeys	serializers/encoder/v9/encode_schema.c	/^static void _RdbSaveAttributeKeys(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbSaveDeletedEntities_v9	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveDeletedEntities_v9(RedisModuleIO *rdb, GraphContext *gc,$/;"	f	file:
_RdbSaveEdge	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveEdge(RedisModuleIO *rdb, const Graph *g, const Edge *e, int r) {$/;"	f	file:
_RdbSaveEntity	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveEntity(RedisModuleIO *rdb, const Entity *e) {$/;"	f	file:
_RdbSaveHeader	serializers/encoder/v9/encode_graph.c	/^static void _RdbSaveHeader(RedisModuleIO *rdb, GraphEncodeContext *ctx) {$/;"	f	file:
_RdbSaveIndexData	serializers/encoder/v9/encode_schema.c	/^static inline void _RdbSaveIndexData(RedisModuleIO *rdb, Index *idx) {$/;"	f	file:
_RdbSaveKeySchema	serializers/encoder/v9/encode_graph.c	/^static PayloadInfo *_RdbSaveKeySchema(RedisModuleIO *rdb, GraphContext *gc) {$/;"	f	file:
_RdbSaveMultipleEdges	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveMultipleEdges(RedisModuleIO *rdb,                  \/\/ RDB IO.$/;"	f	file:
_RdbSaveNode_v9	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveNode_v9(RedisModuleIO *rdb, GraphContext *gc, GraphEntity *n) {$/;"	f	file:
_RdbSaveSIArray	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveSIArray(RedisModuleIO *rdb, const SIValue list) {$/;"	f	file:
_RdbSaveSIValue	serializers/encoder/v9/encode_graph_entities.c	/^static void _RdbSaveSIValue(RedisModuleIO *rdb, const SIValue *v) {$/;"	f	file:
_RdbSaveSchema	serializers/encoder/v9/encode_schema.c	/^static void _RdbSaveSchema(RedisModuleIO *rdb, Schema *s) {$/;"	f	file:
_Record	execution_plan/record.h	/^} _Record;$/;"	t	typeref:struct:__anon36
_RecordPropagateEntry	execution_plan/record.c	/^static void _RecordPropagateEntry(Record dest, Record src, uint idx) {$/;"	f	file:
_ReduceFilterToOp	execution_plan/execution_plan_build/reduce_to_apply.c	/^static OpBase *_ReduceFilterToOp(ExecutionPlan *plan, const char **vars,$/;"	f	file:
_RegisterDataTypes	module.c	/^static int _RegisterDataTypes(RedisModuleCtx *ctx) {$/;"	f	file:
_RegisterForkHooks	module_event_handlers.c	/^static void _RegisterForkHooks() {$/;"	f	file:
_RegisterServerEvents	module_event_handlers.c	/^static void _RegisterServerEvents(RedisModuleCtx *ctx) {$/;"	f	file:
_RemovePathFromGraph	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static void _RemovePathFromGraph(QueryGraph *g, QGEdge **path) {$/;"	f	file:
_RenameGraphHandler	module_event_handlers.c	/^static int _RenameGraphHandler(RedisModuleCtx *ctx, int type, const char *event,$/;"	f	file:
_ReplyWithRoundedDouble	slow_log/slow_log.c	/^static inline void _ReplyWithRoundedDouble(RedisModuleCtx *ctx, double d) {$/;"	f	file:
_ResetDecodeStates	module_event_handlers.c	/^static void _ResetDecodeStates() {$/;"	f	file:
_ResetIterator	execution_plan/ops/op_node_by_label_scan.c	/^static inline void _ResetIterator(NodeByLabelScan *op) {$/;"	f	file:
_ResetStreams	execution_plan/ops/op_cartesian_product.c	/^static void _ResetStreams(CartesianProduct *cp, int streamIdx) {$/;"	f	file:
_ResultSet_CompactReplyWithEdge	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithEdge(RedisModuleCtx *ctx, GraphContext *gc, Edge *e) {$/;"	f	file:
_ResultSet_CompactReplyWithMap	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithMap(RedisModuleCtx *ctx, GraphContext *gc, SIValue v) {$/;"	f	file:
_ResultSet_CompactReplyWithNode	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithNode(RedisModuleCtx *ctx, GraphContext *gc, Node *n) {$/;"	f	file:
_ResultSet_CompactReplyWithPath	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithPath(RedisModuleCtx *ctx, GraphContext *gc, SIValue path) {$/;"	f	file:
_ResultSet_CompactReplyWithPoint	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithPoint(RedisModuleCtx *ctx, GraphContext *gc, SIValue v) {$/;"	f	file:
_ResultSet_CompactReplyWithProperties	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithProperties(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f	file:
_ResultSet_CompactReplyWithSIArray	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithSIArray(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f	file:
_ResultSet_CompactReplyWithSIValue	resultset/formatters/resultset_replycompact.c	/^static void _ResultSet_CompactReplyWithSIValue(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f	file:
_ResultSet_ConsumeRecord	resultset/resultset.c	/^void _ResultSet_ConsumeRecord(ResultSet *set, Record r) {$/;"	f
_ResultSet_ReplayStats	resultset/resultset.c	/^static void _ResultSet_ReplayStats(RedisModuleCtx *ctx, ResultSet *set) {$/;"	f	file:
_ResultSet_ReplyWithPreamble	resultset/resultset.c	/^static void _ResultSet_ReplyWithPreamble(ResultSet *set) {$/;"	f	file:
_ResultSet_ReplyWithRoundedDouble	resultset/formatters/resultset_formatter.h	/^static inline void _ResultSet_ReplyWithRoundedDouble(RedisModuleCtx *ctx, double d) {$/;"	f
_ResultSet_ReplyWithValueType	resultset/formatters/resultset_replycompact.c	/^static inline void _ResultSet_ReplyWithValueType(RedisModuleCtx *ctx, const SIValue v) {$/;"	f	file:
_ResultSet_SetColumns	resultset/resultset.c	/^static void _ResultSet_SetColumns(ResultSet *set) {$/;"	f	file:
_ResultSet_VerboseReplyWithArray	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithArray(RedisModuleCtx *ctx, SIValue array) {$/;"	f	file:
_ResultSet_VerboseReplyWithEdge	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithEdge(RedisModuleCtx *ctx, GraphContext *gc, Edge *e) {$/;"	f	file:
_ResultSet_VerboseReplyWithMap	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithMap(RedisModuleCtx *ctx, SIValue map) {$/;"	f	file:
_ResultSet_VerboseReplyWithNode	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithNode(RedisModuleCtx *ctx, GraphContext *gc, Node *n) {$/;"	f	file:
_ResultSet_VerboseReplyWithPath	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithPath(RedisModuleCtx *ctx, SIValue path) {$/;"	f	file:
_ResultSet_VerboseReplyWithPoint	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithPoint(RedisModuleCtx *ctx, SIValue point) {$/;"	f	file:
_ResultSet_VerboseReplyWithProperties	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithProperties(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f	file:
_ResultSet_VerboseReplyWithSIValue	resultset/formatters/resultset_replyverbose.c	/^static void _ResultSet_VerboseReplyWithSIValue(RedisModuleCtx *ctx, GraphContext *gc,$/;"	f	file:
_RollbackPendingCreations	execution_plan/ops/op_merge_create.c	/^static void _RollbackPendingCreations(OpMergeCreate *op) {$/;"	f	file:
_SIPath_Reverse	datatypes/path/sipath_builder.c	/^static void _SIPath_Reverse(SIValue p) {$/;"	f	file:
_SIString_ToString	value.c	/^static inline void _SIString_ToString(SIValue str, char **buf, size_t *bufferLen,$/;"	f	file:
_Schema_RemoveExactMatchIndex	schema/schema.c	/^static int _Schema_RemoveExactMatchIndex(Schema *s, const char *field) {$/;"	f	file:
_Schema_RemoveFullTextIndex	schema/schema.c	/^static int _Schema_RemoveFullTextIndex(Schema *s) {$/;"	f	file:
_SeekNextNode	execution_plan/ops/op_node_by_id_seek.c	/^static inline Node _SeekNextNode(NodeByIdSeek *op) {$/;"	f	file:
_SemanticVersion	util/redis_version.c	/^static inline uint _SemanticVersion(uint major, uint minor, uint patch) {$/;"	f	file:
_SharedNode	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static QGNode *_SharedNode$/;"	f	file:
_ShutdownEventHandler	module_event_handlers.c	/^static void _ShutdownEventHandler(RedisModuleCtx *ctx, RedisModuleEvent eid, uint64_t subevent,$/;"	f	file:
_SlowLogItem_New	slow_log/slow_log.c	/^static SlowLogItem *_SlowLogItem_New$/;"	f	file:
_SlowLogItem_ToString	slow_log/slow_log.c	/^static size_t _SlowLogItem_ToString(const SlowLogItem *item, char **s) {$/;"	f	file:
_SlowLog_Contains	slow_log/slow_log.c	/^static bool _SlowLog_Contains(const SlowLog *slowlog, int t_id, const char *cmd, const char *query,$/;"	f	file:
_SlowLog_Item_Free	slow_log/slow_log.c	/^static void _SlowLog_Item_Free(SlowLogItem *item) {$/;"	f	file:
_SlowLog_RemoveItemFromLookup	slow_log/slow_log.c	/^static void _SlowLog_RemoveItemFromLookup(SlowLog *slowlog, int t_id, const SlowLogItem *item) {$/;"	f	file:
_StatePayloadInfo	serializers/encoder/v9/encode_graph.c	/^static PayloadInfo _StatePayloadInfo(GraphContext *gc, EncodeState state,$/;"	f	file:
_StringRangeToQueryNode	filter_tree/ft_to_rsq.c	/^static RSQNode *_StringRangeToQueryNode$/;"	f	file:
_THPOOL_	util/thpool/thpool.h	/^#define _THPOOL_$/;"	d
_Traverse_CollectEdges	execution_plan/ops/shared/traverse_functions.c	/^static void _Traverse_CollectEdges(EdgeTraverseCtx *edge_ctx, NodeID src, NodeID dest) {$/;"	f	file:
_Traverse_SetDirection	execution_plan/ops/shared/traverse_functions.c	/^static GRAPH_EDGE_DIR _Traverse_SetDirection(AlgebraicExpression *ae, const QGEdge *e) {$/;"	f	file:
_Traverse_SetRelationTypes	execution_plan/ops/shared/traverse_functions.c	/^static void _Traverse_SetRelationTypes(EdgeTraverseCtx *edge_ctx, QGEdge *e) {$/;"	f	file:
_UpdateCtx_AddProperty	ast/ast_build_op_contexts.c	/^static void _UpdateCtx_AddProperty(GraphContext *gc, EntityUpdateEvalCtx *ctx,$/;"	f	file:
_UpdateCtx_AddPropertyMap	ast/ast_build_op_contexts.c	/^static void _UpdateCtx_AddPropertyMap(GraphContext *gc, EntityUpdateEvalCtx *ctx,$/;"	f	file:
_UpdateEntity	execution_plan/ops/shared/update_functions.c	/^static int _UpdateEntity(PendingUpdateCtx *update) {$/;"	f	file:
_UpdateProperties	execution_plan/ops/op_merge.c	/^static void _UpdateProperties(PendingUpdateCtx **pending_updates, ResultSetStatistics *stats, raxIterator updates,$/;"	f	file:
_UpdateRecord	execution_plan/ops/op_index_scan.c	/^static inline void _UpdateRecord(IndexScan *op, Record r, EntityID node_id) {$/;"	f	file:
_UpdateRecord	execution_plan/ops/op_node_by_label_scan.c	/^static inline void _UpdateRecord(NodeByLabelScan *op, Record r, GrB_Index node_id) {$/;"	f	file:
_Update_MergePropertyMap	ast/ast_build_op_contexts.c	/^static void _Update_MergePropertyMap(GraphContext *gc, rax *updates,$/;"	f	file:
_Update_SetProperty	ast/ast_build_op_contexts.c	/^static void _Update_SetProperty(GraphContext *gc, rax *updates,$/;"	f	file:
_Update_SetPropertyMap	ast/ast_build_op_contexts.c	/^static void _Update_SetPropertyMap(GraphContext *gc, rax *updates,$/;"	f	file:
_UseIdOptimization	execution_plan/optimizations/seek_by_id.c	/^static void _UseIdOptimization(ExecutionPlan *plan, OpBase *scan_op) {$/;"	f	file:
_ValidateClauseOrder	ast/ast_validations.c	/^static AST_Validation _ValidateClauseOrder(const AST *ast) {$/;"	f	file:
_ValidateClauses	ast/ast_validations.c	/^static AST_Validation _ValidateClauses(const AST *ast) {$/;"	f	file:
_ValidateDuplicateParameters	ast/ast_validations.c	/^static AST_Validation _ValidateDuplicateParameters(const cypher_astnode_t *statement) {$/;"	f	file:
_ValidateFunctionCalls	ast/ast_validations.c	/^static AST_Validation _ValidateFunctionCalls(const cypher_astnode_t *node,$/;"	f	file:
_ValidateInlinedProperties	ast/ast_validations.c	/^static AST_Validation _ValidateInlinedProperties(const cypher_astnode_t *props) {$/;"	f	file:
_ValidateInlinedPropertiesOnPath	ast/ast_validations.c	/^static AST_Validation _ValidateInlinedPropertiesOnPath(const cypher_astnode_t *path) {$/;"	f	file:
_ValidateMapExp	ast/ast_validations.c	/^static AST_Validation _ValidateMapExp(const cypher_astnode_t *node) {$/;"	f	file:
_ValidateMergeNode	ast/ast_validations.c	/^static AST_Validation _ValidateMergeNode(const cypher_astnode_t *entity, rax *defined_aliases) {$/;"	f	file:
_ValidateMergeRelation	ast/ast_validations.c	/^static AST_Validation _ValidateMergeRelation(const cypher_astnode_t *entity, rax *defined_aliases) {$/;"	f	file:
_ValidateMultiHopTraversal	ast/ast_validations.c	/^static AST_Validation _ValidateMultiHopTraversal(rax *projections, const cypher_astnode_t *edge,$/;"	f	file:
_ValidateNodeAlias	ast/ast_validations.c	/^static AST_Validation _ValidateNodeAlias(const cypher_astnode_t *node, rax *edge_aliases) {$/;"	f	file:
_ValidateParamsOnly	ast/ast_validations.c	/^static AST_Validation _ValidateParamsOnly(const cypher_astnode_t *statement) {$/;"	f	file:
_ValidatePath	ast/ast_validations.c	/^static AST_Validation _ValidatePath(const cypher_astnode_t *path, rax *projections,$/;"	f	file:
_ValidatePattern	ast/ast_validations.c	/^static AST_Validation _ValidatePattern(rax *projections, const cypher_astnode_t *pattern,$/;"	f	file:
_ValidatePositiveInteger	ast/ast_validations.c	/^static inline AST_Validation _ValidatePositiveInteger(const char *input) {$/;"	f	file:
_ValidateQuerySequence	ast/ast_validations.c	/^static AST_Validation _ValidateQuerySequence(const AST *ast) {$/;"	f	file:
_ValidateQueryTermination	ast/ast_validations.c	/^static AST_Validation _ValidateQueryTermination(const AST *ast) {$/;"	f	file:
_ValidateReferredFunctions	ast/ast_validations.c	/^static AST_Validation _ValidateReferredFunctions(rax *referred_functions, bool include_aggregates) {$/;"	f	file:
_ValidateRelation	ast/ast_validations.c	/^static AST_Validation _ValidateRelation(rax *projections, const cypher_astnode_t *edge,$/;"	f	file:
_ValidateReusedAliases	ast/ast_validations.c	/^static AST_Validation _ValidateReusedAliases(rax *edge_aliases, const cypher_astnode_t *pattern) {$/;"	f	file:
_ValidateScopes	ast/ast_validations.c	/^static AST_Validation _ValidateScopes(AST *mock_ast) {$/;"	f	file:
_ValidateUnion_Clauses	ast/ast_validations.c	/^static AST_Validation _ValidateUnion_Clauses(const AST *ast) {$/;"	f	file:
_Validate_Aliases_Defined	ast/ast_validations.c	/^static AST_Validation _Validate_Aliases_Defined(const AST *ast) {$/;"	f	file:
_Validate_Aliases_DefinedInClause	ast/ast_validations.c	/^static AST_Validation _Validate_Aliases_DefinedInClause(const cypher_astnode_t *clause,$/;"	f	file:
_Validate_CALL_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_CALL_Clauses(const AST *ast) {$/;"	f	file:
_Validate_CREATE_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_CREATE_Clauses(const AST *ast) {$/;"	f	file:
_Validate_CREATE_Entities	ast/ast_validations.c	/^static AST_Validation _Validate_CREATE_Entities(const cypher_astnode_t *clause,$/;"	f	file:
_Validate_DELETE_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_DELETE_Clauses(const AST *ast) {$/;"	f	file:
_Validate_LIMIT_SKIP_Modifiers	ast/ast_validations.c	/^static AST_Validation _Validate_LIMIT_SKIP_Modifiers(const AST *ast) {$/;"	f	file:
_Validate_MATCH_Clause_Filters	ast/ast_validations.c	/^static AST_Validation _Validate_MATCH_Clause_Filters(const cypher_astnode_t *clause) {$/;"	f	file:
_Validate_MATCH_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_MATCH_Clauses(const AST *ast) {$/;"	f	file:
_Validate_MERGE_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_MERGE_Clauses(const AST *ast) {$/;"	f	file:
_Validate_Path_Locations	ast/ast_validations.c	/^static AST_Validation _Validate_Path_Locations(const cypher_astnode_t *root) {$/;"	f	file:
_Validate_RETURN_Clause	ast/ast_validations.c	/^static AST_Validation _Validate_RETURN_Clause(const AST *ast) {$/;"	f	file:
_Validate_ReusedEdges	ast/ast_validations.c	/^static AST_Validation _Validate_ReusedEdges(const cypher_astnode_t *node, rax *edge_aliases) {$/;"	f	file:
_Validate_SET_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_SET_Clauses(const AST *ast) {$/;"	f	file:
_Validate_UNWIND_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_UNWIND_Clauses(const AST *ast) {$/;"	f	file:
_Validate_WITH_Clauses	ast/ast_validations.c	/^static AST_Validation _Validate_WITH_Clauses(const AST *ast) {$/;"	f	file:
_VisitFunctions	ast/ast_validations.c	/^static AST_Validation _VisitFunctions(const cypher_astnode_t *node, rax *func_names) {$/;"	f	file:
__AR_EXP_ContainsNestedAgg	arithmetic/arithmetic_expression_construct.c	/^static bool __AR_EXP_ContainsNestedAgg(const AR_ExpNode *root, bool in_agg) {$/;"	f	file:
__AlgebraicExpression_GetOperand	arithmetic/algebraic_expression/utils.c	/^AlgebraicExpression *__AlgebraicExpression_GetOperand$/;"	f
__AlgebraicExpression_MulOverAdd	arithmetic/algebraic_expression/algebraic_expression_optimization.c	/^static bool __AlgebraicExpression_MulOverAdd(AlgebraicExpression **root) {$/;"	f	file:
__DFSMaxDepth	algorithms/longest_path.c	/^static void __DFSMaxDepth(QGNode *n, int level, int *max_depth, rax *visited, rax *used_edges) {$/;"	f	file:
__DICT_H	util/dict.h	/^#define __DICT_H$/;"	d
__Heap_offerx	util/heap.c	/^static void __Heap_offerx(heap_t * h, void *item)$/;"	f	file:
__REDISGRAPH_ALLOC__	util/rmalloc.h	/^#define __REDISGRAPH_ALLOC__$/;"	d
__SDS_H	util/sds/sds.h	/^#define __SDS_H$/;"	d
__aeRegisteredFuncs	arithmetic/func_desc.c	/^rax *__aeRegisteredFuncs = NULL;$/;"	v
__child_left	util/heap.c	/^static int __child_left(const int idx)$/;"	f	file:
__child_right	util/heap.c	/^static int __child_right(const int idx)$/;"	f	file:
__ensurecapacity	util/heap.c	/^static heap_t* __ensurecapacity(heap_t * h)$/;"	f	file:
__item_get_idx	util/heap.c	/^static int __item_get_idx(const heap_t * h, const void *item)$/;"	f	file:
__parent	util/heap.c	/^static int __parent(const int idx)$/;"	f	file:
__procedures	procedures/procedure.c	/^rax *__procedures = NULL;$/;"	v
__pushdown	util/heap.c	/^static void __pushdown(heap_t * h, unsigned int idx)$/;"	f	file:
__pushup	util/heap.c	/^static int __pushup(heap_t * h, unsigned int idx)$/;"	f	file:
__swap	util/heap.c	/^static void __swap(heap_t * h, const int i1, const int i2)$/;"	f	file:
_accumulate	execution_plan/ops/op_sort.c	/^static void _accumulate(OpSort *op, Record r) {$/;"	f	file:
_addNeighbors	algorithms/all_paths.c	/^static void _addNeighbors(AllPathsCtx *ctx, LevelConnection *frontier, uint32_t depth,$/;"	f	file:
_agg_AvgCtx	arithmetic/aggregate_funcs/agg_funcs.c	/^} _agg_AvgCtx;$/;"	t	typeref:struct:__anon125	file:
_agg_PercCtx	arithmetic/aggregate_funcs/agg_funcs.c	/^} _agg_PercCtx;$/;"	t	typeref:struct:__anon126	file:
_agg_StDevCtx	arithmetic/aggregate_funcs/agg_funcs.c	/^} _agg_StDevCtx;$/;"	t	typeref:struct:__anon127	file:
_aggregateRecord	execution_plan/ops/op_aggregate.c	/^static void _aggregateRecord(OpAggregate *op, Record r) {$/;"	f	file:
_annotate_delete_clause_projected_named_path	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_delete_clause_projected_named_path(AST *ast,$/;"	f	file:
_annotate_entity_names	ast/enrichment/annotate_entities.c	/^static void _annotate_entity_names(AST *ast, const cypher_astnode_t *node, uint *anon_count) {$/;"	f	file:
_annotate_match_clause_projected_named_path	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_match_clause_projected_named_path(AST *ast,$/;"	f	file:
_annotate_project_all	ast/enrichment/annotate_project_all.c	/^static void _annotate_project_all(AST *ast) {$/;"	f	file:
_annotate_projected_named_path	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_projected_named_path(AST *ast) {$/;"	f	file:
_annotate_relevant_projected_named_path_identifier	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_relevant_projected_named_path_identifier(AST *ast,$/;"	f	file:
_annotate_return_clause_projected_named_path	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_return_clause_projected_named_path(AST *ast,$/;"	f	file:
_annotate_unwind_clause_projected_named_path	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_unwind_clause_projected_named_path(AST *ast,$/;"	f	file:
_annotate_with_clause_projected_named_path	ast/enrichment/annotate_projected_named_paths.c	/^static void _annotate_with_clause_projected_named_path(AST *ast,$/;"	f	file:
_applicableFilter	execution_plan/optimizations/apply_join.c	/^static inline bool _applicableFilter(const FT_FilterNode *f) {$/;"	f	file:
_applicableFilter	execution_plan/optimizations/filter_variable_length_edges.c	/^static bool _applicableFilter(FT_FilterNode *ft, const char *src,$/;"	f	file:
_applicableFilter	execution_plan/optimizations/utilize_indices.c	/^bool _applicableFilter(const char* filtered_entity, Index *idx,$/;"	f
_applicableFilters	execution_plan/optimizations/utilize_indices.c	/^OpFilter **_applicableFilters(NodeByLabelScan *scanOp, Index *idx) {$/;"	f
_applicable_predicate	execution_plan/optimizations/utilize_indices.c	/^static bool _applicable_predicate(const char* filtered_entity,$/;"	f	file:
_applyFilter	filter_tree/filter_tree.c	/^int _applyFilter(SIValue *aVal, SIValue *bVal, AST_Operator op) {$/;"	f
_applyPredicateFilters	filter_tree/filter_tree.c	/^int _applyPredicateFilters(const FT_FilterNode *root, const Record r) {$/;"	f
_arrangement_set_expression	execution_plan/optimizations/traverse_order.c	/^static bool _arrangement_set_expression$/;"	f	file:
_astnode_type_whitelist	ast/cypher_whitelist.c	/^static rax *_astnode_type_whitelist = NULL;$/;"	v	file:
_attribute_rwlock	graph/graphcontext.h	/^	pthread_rwlock_t _attribute_rwlock;     \/\/ Read-write lock to protect access to the attribute maps.$/;"	m	struct:__anon91
_binarySearchLeftmost	execution_plan/ops/op_value_hash_join.c	/^static bool _binarySearchLeftmost(uint *idx, Record *array, uint array_len,$/;"	f	file:
_binarySearchRightmost	execution_plan/ops/op_value_hash_join.c	/^static bool _binarySearchRightmost(uint *idx, Record *array, uint array_len, int join_key_idx,$/;"	f	file:
_binary_op_delete_edges	graph/graph.c	/^static GrB_BinaryOp _binary_op_delete_edges = NULL;$/;"	v	file:
_binary_op_free_edge	graph/graph.c	/^void _binary_op_free_edge(void *z, const void *x, const void *y) {$/;"	f
_block_pos	util/datablock/datablock_iterator.h	/^	uint _block_pos;				\/\/ Position within a block.$/;"	m	struct:__anon25
_buildCreateOp	execution_plan/execution_plan_build/execution_plan_construct.c	/^static inline void _buildCreateOp(GraphContext *gc, AST *ast, ExecutionPlan *plan) {$/;"	f	file:
_buildDeleteOp	execution_plan/execution_plan_build/execution_plan_construct.c	/^static inline void _buildDeleteOp(ExecutionPlan *plan, const cypher_astnode_t *clause) {$/;"	f	file:
_buildMergeCreateStream	execution_plan/execution_plan_build/build_merge_op_tree.c	/^static void _buildMergeCreateStream(ExecutionPlan *plan, AST_MergeContext *merge_ctx,$/;"	f	file:
_buildOperatorsWhitelist	ast/cypher_whitelist.c	/^static void _buildOperatorsWhitelist(void) {$/;"	f	file:
_buildOptionalMatchOps	execution_plan/execution_plan_build/build_match_op_tree.c	/^static void _buildOptionalMatchOps(ExecutionPlan *plan, AST *ast, const cypher_astnode_t *clause) {$/;"	f	file:
_buildProjectionOps	execution_plan/execution_plan_build/build_projection_ops.c	/^static inline void _buildProjectionOps(ExecutionPlan *plan,$/;"	f	file:
_buildTypesWhitelist	ast/cypher_whitelist.c	/^static void _buildTypesWhitelist(void) {$/;"	f	file:
_buildUnwindOp	execution_plan/execution_plan_build/execution_plan_construct.c	/^static inline void _buildUnwindOp(ExecutionPlan *plan, const cypher_astnode_t *clause) {$/;"	f	file:
_buildUpdateOp	execution_plan/execution_plan_build/execution_plan_construct.c	/^static inline void _buildUpdateOp(GraphContext *gc, ExecutionPlan *plan,$/;"	f	file:
_build_aggregate_exps	execution_plan/ops/op_aggregate.c	/^static inline AR_ExpNode **_build_aggregate_exps(OpAggregate *op) {$/;"	f	file:
_build_group_key	execution_plan/ops/op_aggregate.c	/^static inline SIValue *_build_group_key(OpAggregate *op) {$/;"	f	file:
_build_hash_join_op	execution_plan/optimizations/apply_join.c	/^static OpBase *_build_hash_join_op(const ExecutionPlan *plan, OpBase *left_branch,$/;"	f	file:
_bulk_thpool	util/thpool/pools.c	/^static threadpool _bulk_thpool = NULL;     \/\/ bulk loader workers$/;"	v	file:
_cache_records	execution_plan/ops/op_value_hash_join.c	/^void _cache_records(OpValueHashJoin *op) {$/;"	f
_cache_rwlock	util/cache/cache.h	/^	pthread_rwlock_t _cache_rwlock;    \/\/ Read-write lock to protect access to the cache.$/;"	m	struct:Cache
_collect_aliases_in_path	ast/enrichment/annotate_project_all.c	/^static void _collect_aliases_in_path(const cypher_astnode_t *path, const char ***aliases) {$/;"	f	file:
_collect_aliases_in_pattern	ast/enrichment/annotate_project_all.c	/^static void _collect_aliases_in_pattern(const cypher_astnode_t *pattern, const char ***aliases) {$/;"	f	file:
_collect_aliases_in_scope	ast/enrichment/annotate_project_all.c	/^static const char **_collect_aliases_in_scope(AST *ast, uint scope_start, uint scope_end) {$/;"	f	file:
_collect_call_projections	ast/enrichment/annotate_project_all.c	/^static void _collect_call_projections(const cypher_astnode_t *call_clause, const char ***aliases) {$/;"	f	file:
_collect_projected_identifier	ast/enrichment/annotate_projected_named_paths.c	/^void _collect_projected_identifier(const cypher_astnode_t *ast_exp, rax *identifier_map) {$/;"	f
_collect_query_parameters_names	ast/ast_validations.c	/^static void _collect_query_parameters_names(const cypher_astnode_t *root, rax *keys) {$/;"	f	file:
_collect_with_projections	ast/enrichment/annotate_project_all.c	/^static void _collect_with_projections(const cypher_astnode_t *with_clause, const char ***aliases) {$/;"	f	file:
_combine_projection_arrays	execution_plan/execution_plan_build/build_projection_ops.c	/^static void _combine_projection_arrays(AR_ExpNode ***exps_ptr, AR_ExpNode **order_exps) {$/;"	f	file:
_compactFilter	execution_plan/optimizations/compact_filters.c	/^static inline bool _compactFilter(OpBase *op) {$/;"	f	file:
_compactFilters	execution_plan/optimizations/compact_filters.c	/^static void _compactFilters(ExecutionPlan *plan, OpBase *op) {$/;"	f	file:
_compose_ranges	filter_tree/ft_to_rsq.c	/^static void _compose_ranges$/;"	f	file:
_compute_hash	execution_plan/ops/op_distinct.c	/^static unsigned long long _compute_hash(OpDistinct *op, Record r) {$/;"	f	file:
_compute_key	slow_log/slow_log.c	/^static inline size_t _compute_key(char **s, const char *cmd, const char *query) {$/;"	f	file:
_concat_query_nodes	filter_tree/ft_to_rsq.c	/^static RSQNode *_concat_query_nodes$/;"	f	file:
_construct_output_mappings	execution_plan/ops/op_procedure_call.c	/^static void _construct_output_mappings(OpProcCall *op, SIValue *outputs) {$/;"	f	file:
_consume_function_call_expression	ast/ast.c	/^static void _consume_function_call_expression(const cypher_astnode_t *node,$/;"	f	file:
_convertBinaryOperator	ast/ast_build_filter_tree.c	/^static FT_FilterNode *_convertBinaryOperator(const cypher_astnode_t *op_node) {$/;"	f	file:
_convertComparison	ast/ast_build_filter_tree.c	/^static FT_FilterNode *_convertComparison(const cypher_astnode_t *comparison_node) {$/;"	f	file:
_convertInlinedProperties	ast/ast_build_filter_tree.c	/^static FT_FilterNode *_convertInlinedProperties(const AST *ast, const cypher_astnode_t *entity,$/;"	f	file:
_convertOperator	ast/ast_build_filter_tree.c	/^static FT_FilterNode *_convertOperator(const cypher_astnode_t *expr) {$/;"	f	file:
_convertPatternPath	ast/ast_build_filter_tree.c	/^static FT_FilterNode *_convertPatternPath(const cypher_astnode_t *entity) {$/;"	f	file:
_convertUnaryOperator	ast/ast_build_filter_tree.c	/^static FT_FilterNode *_convertUnaryOperator(const cypher_astnode_t *op_node) {$/;"	f	file:
_countEdges	execution_plan/optimizations/reduce_count.c	/^void _countEdges(void *z, const void *x) {$/;"	f
_countRelationshipEdges	execution_plan/optimizations/reduce_count.c	/^uint64_t _countRelationshipEdges(GrB_Matrix M) {$/;"	f
_create_anon_alias	ast/enrichment/annotate_entities.c	/^static inline char *_create_anon_alias(int anon_count) {$/;"	f	file:
_current_block	util/datablock/datablock_iterator.h	/^	Block *_current_block;			\/\/ Current block.$/;"	m	struct:__anon25
_current_pos	util/datablock/datablock_iterator.h	/^	uint64_t _current_pos;			\/\/ Iterator current position.$/;"	m	struct:__anon25
_dictClear	util/dict.c	/^static int _dictClear(dict *d, dictht *ht, void(callback)(void *)) {$/;"	f	file:
_dictGetStatsHt	util/dict.c	/^static size_t _dictGetStatsHt(char *buf, size_t bufsize, dictht *ht, int tableid) {$/;"	f	file:
_dictInit	util/dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	util/dict.c	/^static long _dictKeyIndex(dict *d, const void *key, uint64_t hash, dictEntry **existing)$/;"	f	file:
_dictRehashStep	util/dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	util/dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
_digit_count	ast/enrichment/annotate_entities.c	/^static inline int _digit_count(int n) {$/;"	f	file:
_edge_accum	graph/graph.c	/^void _edge_accum(void *_z, const void *_x, const void *_y) {$/;"	f
_end_pos	util/datablock/datablock_iterator.h	/^	uint64_t _end_pos;				\/\/ Iterator won't pass end position.$/;"	m	struct:__anon25
_eval_limit	execution_plan/ops/op_limit.c	/^static void _eval_limit(OpLimit *op, AR_ExpNode *limit_exp) {$/;"	f	file:
_eval_skip	execution_plan/ops/op_skip.c	/^static void _eval_skip(OpSkip *op, AR_ExpNode *skip_exp) {$/;"	f	file:
_evaluate_proc_args	execution_plan/ops/op_procedure_call.c	/^static void _evaluate_proc_args(OpProcCall *op) {$/;"	f	file:
_filterVariableLengthEdges	execution_plan/optimizations/filter_variable_length_edges.c	/^static void _filterVariableLengthEdges(ExecutionPlan *plan,$/;"	f	file:
_find_entities_solving_branches	execution_plan/optimizations/optimize_cartesian_product.c	/^static OpBase **_find_entities_solving_branches(rax *entities, OpBase *cp) {$/;"	f	file:
_getNodeAttribute	index/index.c	/^static int _getNodeAttribute(void *ctx, const char *fieldName, const void *id, char **strVal,$/;"	f	file:
_get_intersecting_record	execution_plan/ops/op_value_hash_join.c	/^static Record _get_intersecting_record(OpValueHashJoin *op) {$/;"	f	file:
_graph_edge_accum	graph/graph.c	/^static GrB_BinaryOp _graph_edge_accum = NULL;$/;"	v	file:
_handoff	execution_plan/ops/op_aggregate.c	/^static Record _handoff(OpAggregate *op) {$/;"	f	file:
_handoff	execution_plan/ops/op_create.c	/^static Record _handoff(OpCreate *op) {$/;"	f	file:
_handoff	execution_plan/ops/op_expand_into.c	/^static Record _handoff(OpExpandInto *op) {$/;"	f	file:
_handoff	execution_plan/ops/op_merge.c	/^static Record _handoff(OpMerge *op) {$/;"	f	file:
_handoff	execution_plan/ops/op_merge_create.c	/^static Record _handoff(OpMergeCreate *op) {$/;"	f	file:
_handoff	execution_plan/ops/op_sort.c	/^static inline Record _handoff(OpSort *op) {$/;"	f	file:
_handoff	execution_plan/ops/op_unwind.c	/^Record _handoff(OpUnwind *op) {$/;"	f
_handoff	execution_plan/ops/op_update.c	/^static Record _handoff(OpUpdate *op) {$/;"	f	file:
_heap_elem_compare	execution_plan/ops/op_sort.c	/^static int _heap_elem_compare(const void *A, const void *B, const void *udata) {$/;"	f	file:
_highly_connected_node	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static bool _highly_connected_node(const QueryGraph *qg, const char *alias) {$/;"	f	file:
_idFilter	execution_plan/optimizations/seek_by_id.c	/^static bool _idFilter(FT_FilterNode *f, AST_Operator *rel, EntityID *id, bool *reverse) {$/;"	f	file:
_identifyEdgeCountPattern	execution_plan/optimizations/reduce_count.c	/^static bool _identifyEdgeCountPattern(OpBase *root, OpResult **opResult, OpAggregate **opAggregate,$/;"	f	file:
_identifyNodeCountPattern	execution_plan/optimizations/reduce_count.c	/^static int _identifyNodeCountPattern(OpBase *root, OpResult **opResult, OpAggregate **opAggregate,$/;"	f	file:
_identifyResultAndAggregateOps	execution_plan/optimizations/reduce_count.c	/^static int _identifyResultAndAggregateOps(OpBase *root, OpResult **opResult,$/;"	f	file:
_implicit_result	execution_plan/execution_plan.c	/^static inline void _implicit_result(ExecutionPlan *plan) {$/;"	f	file:
_index_operation	commands/cmd_query.c	/^static void _index_operation(RedisModuleCtx *ctx, GraphContext *gc, AST *ast,$/;"	f	file:
_initList	execution_plan/ops/op_unwind.c	/^static void _initList(OpUnwind *op) {$/;"	f	file:
_initialized	util/redis_version.c	/^static bool _initialized = false;$/;"	v	file:
_isInSubExecutionPlan	execution_plan/optimizations/reduce_traversal.c	/^static inline bool _isInSubExecutionPlan(OpBase *op) {$/;"	f	file:
_is_keyword	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^bool _is_keyword(const char c) {$/;"	f
_leftMostNode	arithmetic/algebraic_expression/algebraic_expression.c	/^static AlgebraicExpression *_leftMostNode(AlgebraicExpression *exp) {$/;"	f	file:
_locate_filters	execution_plan/optimizations/apply_join.c	/^static OpFilter **_locate_filters(OpBase *cp) {$/;"	f	file:
_locate_filters_and_entities	execution_plan/optimizations/optimize_cartesian_product.c	/^static FilterCtx *_locate_filters_and_entities(OpBase *cp) {$/;"	f	file:
_mapValueType	resultset/formatters/resultset_replycompact.c	/^static inline ValueType _mapValueType(const SIValue v) {$/;"	f	file:
_migrate_expressions	execution_plan/ops/op_aggregate.c	/^static void _migrate_expressions(OpAggregate *op, AR_ExpNode **exps) {$/;"	f	file:
_nmalloc_decrement	util/rmalloc.c	/^static inline void _nmalloc_decrement(int64_t n_bytes) {$/;"	f	file:
_nmalloc_increment	util/rmalloc.c	/^static inline void _nmalloc_increment(int64_t n_bytes) {$/;"	f	file:
_normalizePath	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static void _normalizePath$/;"	f	file:
_normalize_filter	execution_plan/optimizations/utilize_indices.c	/^static void _normalize_filter(const char *filtered_entity,$/;"	f	file:
_operator_whitelist	ast/cypher_whitelist.c	/^static rax *_operator_whitelist = NULL;$/;"	v	file:
_optimize_cartesian_product	execution_plan/optimizations/optimize_cartesian_product.c	/^static void _optimize_cartesian_product(ExecutionPlan *plan, OpBase *cp) {$/;"	f	file:
_order_expressions	execution_plan/optimizations/traverse_order.c	/^static void _order_expressions$/;"	f	file:
_outOfBounds	execution_plan/ops/op_node_by_id_seek.c	/^static inline bool _outOfBounds(NodeByIdSeek *op) {$/;"	f	file:
_populateIndex	index/index.c	/^static void _populateIndex(Index *idx) {$/;"	f	file:
_populate_filter_matrix	execution_plan/ops/op_conditional_traverse.c	/^static void _populate_filter_matrix(OpCondTraverse *op) {$/;"	f	file:
_populate_filter_matrix	execution_plan/ops/op_expand_into.c	/^static void _populate_filter_matrix(OpExpandInto *op) {$/;"	f	file:
_predicateTreeToRange	filter_tree/ft_to_rsq.c	/^static bool _predicateTreeToRange$/;"	f	file:
_prepareIterateAll	ast/ast.c	/^static inline void _prepareIterateAll(rax *map, raxIterator *iter) {$/;"	f	file:
_prepareIterateAll	ast/ast_validations.c	/^inline static void _prepareIterateAll(rax *map, raxIterator *iter) {$/;"	f	file:
_procRegister	procedures/procedure.c	/^static void _procRegister(const char *procedure, ProcGenerator gen) {$/;"	f	file:
_process_segment	execution_plan/execution_plan.c	/^static ExecutionPlan *_process_segment(AST *ast, uint segment_start_idx,$/;"	f	file:
_process_segments	execution_plan/execution_plan.c	/^static ExecutionPlan **_process_segments(AST *ast) {$/;"	f	file:
_process_yield	procedures/proc_bfs.c	/^static void _process_yield(BFSCtx *ctx, const char **yield) {$/;"	f	file:
_pullFromBranchStream	execution_plan/ops/op_apply_multiplexer.c	/^static Record _pullFromBranchStream(OpApplyMultiplexer *op, int branch_index) {$/;"	f	file:
_pullFromMatchStream	execution_plan/ops/op_semi_apply.c	/^static inline Record _pullFromMatchStream(OpSemiApply *op) {$/;"	f	file:
_pullFromStream	execution_plan/ops/op_merge.c	/^static inline Record _pullFromStream(OpBase *branch) {$/;"	f	file:
_ranges_to_query_nodes	filter_tree/ft_to_rsq.c	/^static RSQNode *_ranges_to_query_nodes$/;"	f	file:
_read_flags	commands/cmd_dispatcher.c	/^static int _read_flags(RedisModuleString **argv, int argc, bool *compact,$/;"	f	file:
_readers_thpool	util/thpool/pools.c	/^static threadpool _readers_thpool = NULL;  \/\/ readers$/;"	v	file:
_readonly_cmd_mode	commands/cmd_query.c	/^inline static bool _readonly_cmd_mode(CommandCtx *ctx) {$/;"	f	file:
_record_compare	execution_plan/ops/op_sort.c	/^static int _record_compare(Record a, Record b, const OpSort *op) {$/;"	f	file:
_record_islt	execution_plan/ops/op_sort.c	/^static bool _record_islt(Record a, Record b, const OpSort *op) {$/;"	f	file:
_record_islt	execution_plan/ops/op_value_hash_join.c	/^static bool _record_islt(Record l, Record r, uint idx) {$/;"	f	file:
_redis_version	util/redis_version.c	/^static Redis_Version _redis_version;$/;"	v	file:
_reduceEdgeCount	execution_plan/optimizations/reduce_count.c	/^void _reduceEdgeCount(ExecutionPlan *plan) {$/;"	f
_reduceFilter	execution_plan/optimizations/reduce_filters.c	/^void _reduceFilter(OpBase *op) {$/;"	f
_reduceFilters	execution_plan/optimizations/reduce_filters.c	/^void _reduceFilters(OpBase *op) {$/;"	f
_reduceNodeCount	execution_plan/optimizations/reduce_count.c	/^bool _reduceNodeCount(ExecutionPlan *plan) {$/;"	f
_reduceScans	execution_plan/optimizations/reduce_scans.c	/^static void _reduceScans(ExecutionPlan *plan, OpBase *scan) {$/;"	f	file:
_reduce_cp_to_hashjoin	execution_plan/optimizations/apply_join.c	/^static void _reduce_cp_to_hashjoin(ExecutionPlan *plan, OpBase *cp) {$/;"	f	file:
_referred_entity	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static inline bool _referred_entity(const char *alias) {$/;"	f	file:
_rejectOnVersionMismatch	commands/cmd_dispatcher.c	/^static void _rejectOnVersionMismatch(RedisModuleCtx *ctx, uint version) {$/;"	f	file:
_relate_exp_to_stream	execution_plan/optimizations/apply_join.c	/^static int _relate_exp_to_stream(AR_ExpNode *exp, rax **stream_entities, int stream_count) {$/;"	f	file:
_removeRedundantTraversal	execution_plan/optimizations/reduce_traversal.c	/^static void _removeRedundantTraversal(ExecutionPlan *plan, OpCondTraverse *traverse) {$/;"	f	file:
_removeTrueFilter	execution_plan/optimizations/compact_filters.c	/^static void _removeTrueFilter(ExecutionPlan *plan, OpBase *op) {$/;"	f	file:
_resolve_winning_sequence	execution_plan/optimizations/traverse_order.c	/^static void _resolve_winning_sequence$/;"	f	file:
_reversePath	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static void _reversePath$/;"	f	file:
_rightMostNode	arithmetic/algebraic_expression/algebraic_expression.c	/^static AlgebraicExpression *_rightMostNode(AlgebraicExpression *exp) {$/;"	f	file:
_rwlock	graph/graph.h	/^	pthread_rwlock_t _rwlock;           \/\/ Read-write lock scoped to this specific graph$/;"	m	struct:Graph
_setTraverseDirection	execution_plan/ops/op_cond_var_len_traverse.c	/^static inline void _setTraverseDirection(CondVarLenTraverse *op, const QGEdge *e) {$/;"	f	file:
_set_intersection_idx	execution_plan/ops/op_value_hash_join.c	/^static bool _set_intersection_idx(OpValueHashJoin *op, SIValue v) {$/;"	f	file:
_setupTraversedRelations	execution_plan/ops/op_cond_var_len_traverse.c	/^static void _setupTraversedRelations(CondVarLenTraverse *op) {$/;"	f	file:
_shouldAcquireLocks	serializers/encoder/v9/encode_graph.c	/^static inline bool _shouldAcquireLocks(void) {$/;"	f	file:
_should_divide_expression	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static inline bool _should_divide_expression(QGEdge **path, int idx, const QueryGraph *qg) {$/;"	f	file:
_should_populate_edge	arithmetic/algebraic_expression/algebraic_expression_construction.c	/^static inline bool _should_populate_edge(QGEdge *e) {$/;"	f	file:
_should_transpose_entry_point	execution_plan/optimizations/traverse_order.c	/^static bool _should_transpose_entry_point$/;"	f	file:
_slowlog_elem_compare	slow_log/slow_log.c	/^static int _slowlog_elem_compare(const void *A, const void *B, const void *udata) {$/;"	f	file:
_sort_cached_records	execution_plan/ops/op_value_hash_join.c	/^void _sort_cached_records(OpValueHashJoin *op) {$/;"	f
_start_block	util/datablock/datablock_iterator.h	/^	Block *_start_block;			\/\/ First block accessed by iterator.$/;"	m	struct:__anon25
_start_pos	util/datablock/datablock_iterator.h	/^	uint64_t _start_pos;			\/\/ Iterator initial position.$/;"	m	struct:__anon25
_step	util/datablock/datablock_iterator.h	/^	uint _step;						\/\/ Increase current_pos by step each iteration.$/;"	m	struct:__anon25
_t_adjacency_matrix	graph/graph.h	/^	RG_Matrix _t_adjacency_matrix;      \/\/ Transposed Adjacency matrix.$/;"	m	struct:Graph
_tie_segments	execution_plan/execution_plan.c	/^static ExecutionPlan *_tie_segments(ExecutionPlan **segments,$/;"	f	file:
_tlsErrorCtx	errors.c	/^pthread_key_t _tlsErrorCtx; \/\/ Error-handling context held in thread-local storage.$/;"	v
_tlsQueryCtxKey	query_ctx.c	/^pthread_key_t _tlsQueryCtxKey;  \/\/ Thread local storage query context key.$/;"	v
_traverse	execution_plan/ops/op_conditional_traverse.c	/^void _traverse(OpCondTraverse *op) {$/;"	f
_traverse	execution_plan/ops/op_expand_into.c	/^static void _traverse(OpExpandInto *op) {$/;"	f	file:
_uniqueArray	ast/enrichment/annotate_project_all.c	/^static void _uniqueArray(const char **arr) {$/;"	f	file:
_updateOffsets	execution_plan/ops/op_distinct.c	/^static void _updateOffsets(OpDistinct *op, Record r) {$/;"	f	file:
_valid_expressions	execution_plan/optimizations/traverse_order.c	/^static AlgebraicExpression **_valid_expressions$/;"	f	file:
_validateInExpression	execution_plan/optimizations/utilize_indices.c	/^static bool _validateInExpression(AR_ExpNode *exp) {$/;"	f	file:
_validateIndex	ast/ast_validations.c	/^static AST_Validation _validateIndex(const cypher_astnode_t *root) {$/;"	f	file:
_validateList	ast/ast_validations.c	/^static AST_Validation _validateList(const cypher_astnode_t *root) {$/;"	f	file:
_validateSubscriptOps	ast/ast_validations.c	/^static AST_Validation _validateSubscriptOps(const cypher_astnode_t *root) {$/;"	f	file:
_validate_command_arity	commands/cmd_dispatcher.c	/^static inline bool _validate_command_arity(GRAPH_Commands cmd, int arity) {$/;"	f	file:
_validate_numeric	arithmetic/numeric_funcs/numeric_funcs.c	/^static inline int _validate_numeric(const SIValue v) {$/;"	f	file:
_verifyGraphVersion	commands/cmd_dispatcher.c	/^static bool _verifyGraphVersion(GraphContext *gc, uint version) {$/;"	f	file:
_writelocked	graph/graph.h	/^	bool _writelocked;                  \/\/ true if the read-write lock was acquired by a writer$/;"	m	struct:Graph
_writers_mutex	graph/graph.h	/^	pthread_mutex_t _writers_mutex;     \/\/ Mutex restrict single writer.$/;"	m	struct:Graph
_writers_thpool	util/thpool/pools.c	/^static threadpool _writers_thpool = NULL;  \/\/ writers$/;"	v	file:
_yield	execution_plan/ops/op_procedure_call.c	/^static Record _yield(OpProcCall *op) {$/;"	f	file:
_zero_matrix	graph/graph.h	/^	RG_Matrix _zero_matrix;             \/\/ Zero matrix.$/;"	m	struct:Graph
addr	redismodule.h	/^    char addr[46];          \/* IPv4 or IPv6 address. *\/$/;"	m	struct:RedisModuleClientInfo
adjacency_matrix	graph/graph.h	/^	RG_Matrix adjacency_matrix;         \/\/ Adjacency matrix, holds all graph connections.$/;"	m	struct:Graph
ae	execution_plan/ops/op_cond_var_len_traverse.h	/^	AlgebraicExpression *ae;        \/* ArithmeticExpression describing the op's traversal pattern. *\/$/;"	m	struct:__anon47
ae	execution_plan/ops/op_conditional_traverse.h	/^	AlgebraicExpression *ae;$/;"	m	struct:__anon40
ae	execution_plan/ops/op_expand_into.h	/^	AlgebraicExpression *ae;$/;"	m	struct:__anon54
aggregate	arithmetic/func_desc.h	/^	bool aggregate;            \/\/ True if the function is an aggregation.$/;"	m	struct:__anon123
aggregate_count	execution_plan/ops/op_aggregate.h	/^	uint aggregate_count;               \/* Number of aggregating expressions. *\/$/;"	m	struct:__anon64
aggregate_exps	execution_plan/ops/op_aggregate.h	/^	AR_ExpNode **aggregate_exps;        \/* Array of expressions that aggregate data for each key. *\/$/;"	m	struct:__anon64
aggregationFunctions	grouping/group.h	/^	AR_ExpNode **aggregationFunctions;   \/* Nodes containing aggregate functions to be evaluated. *\/$/;"	m	struct:__anon76
alias	ast/ast_shared.h	/^	const char *alias;          \/\/ Access-safe alias of the entity being updated$/;"	m	struct:__anon136
alias	ast/ast_shared.h	/^	const char *alias;          \/\/ edge alias$/;"	m	struct:__anon137
alias	ast/ast_shared.h	/^	const char *alias;          \/\/ node alias$/;"	m	struct:__anon138
alias	execution_plan/ops/op_all_node_scan.h	/^	const char *alias;          \/* Alias of the node being scanned by this op. *\/$/;"	m	struct:__anon50
alias	execution_plan/ops/op_node_by_id_seek.h	/^	const char *alias;      \/\/ Alias of the node being scanned by this op.$/;"	m	struct:__anon39
alias	execution_plan/ops/shared/scan_functions.h	/^	const char *alias;   \/\/ Alias of the node being traversed.$/;"	m	struct:__anon56
alias	graph/entities/qg_edge.h	/^	const char *alias;      \/* User-provided alias attached to edge. *\/$/;"	m	struct:QGEdge
alias	graph/entities/qg_node.h	/^	const char *alias;         \/\/ User-provided alias associated with this node$/;"	m	struct:__anon85
aliases	execution_plan/ops/op_distinct.h	/^	const char **aliases;  \/\/ expression aliases to distinct by$/;"	m	struct:__anon51
alive	util/cron.c	/^	bool alive;                   \/\/ indicates cron is active$/;"	m	struct:__anon28	file:
allPathsCtx	execution_plan/ops/op_cond_var_len_traverse.h	/^	AllPathsCtx *allPathsCtx;$/;"	m	struct:__anon47
alloc	util/sds/sds.h	/^  uint16_t alloc;      \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16
alloc	util/sds/sds.h	/^  uint32_t alloc;      \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32
alloc	util/sds/sds.h	/^  uint64_t alloc;      \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64
alloc	util/sds/sds.h	/^  uint8_t alloc;       \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8
allocation	value.h	/^	SIAllocation allocation;$/;"	m	struct:SIValue
allow_multi_edge	graph/graph.h	/^	bool allow_multi_edge;              \/\/ Entry i,j can contain multiple edges$/;"	m	struct:__anon84
anot_ctx_collection	ast/ast.h	/^	AST_AnnotationCtxCollection *anot_ctx_collection;   \/\/ Holds annotations contexts.$/;"	m	struct:__anon140
aof_rewrite	redismodule.h	/^    RedisModuleTypeRewriteFunc aof_rewrite;$/;"	m	struct:RedisModuleTypeMethods
applyJoin	execution_plan/optimizations/apply_join.c	/^void applyJoin(ExecutionPlan *plan) {$/;"	f
applyLimit	execution_plan/optimizations/apply_limit.c	/^void applyLimit(ExecutionPlan *plan) {$/;"	f
applySkip	execution_plan/optimizations/apply_skip.c	/^void applySkip(ExecutionPlan *plan) {$/;"	f
arg	util/thpool/thpool.c	/^	void *arg;                   \/* function's argument       *\/$/;"	m	struct:job	file:
arg_count	execution_plan/ops/op_procedure_call.h	/^    uint arg_count;             \/\/ Number of arguments.$/;"	m	struct:__anon70
arg_exps	execution_plan/ops/op_procedure_call.h	/^    AR_ExpNode **arg_exps;      \/\/ Expression representing arguments to procedure.$/;"	m	struct:__anon70
argc	commands/cmd_bulk_insert.c	/^	int argc;                      \/\/ number of arguments$/;"	m	struct:__anon143	file:
argc	commands/cmd_bulk_insert.h	/^	int argc;$/;"	m	struct:__anon145
argc	procedures/proc_ctx.h	/^	unsigned int argc;          \/\/ Number of arguments procedure accepts.$/;"	m	struct:ProcedureCtx
args	execution_plan/ops/op_procedure_call.h	/^    SIValue *args;              \/\/ Computed arguments.$/;"	m	struct:__anon70
argv	commands/cmd_bulk_insert.c	/^	RedisModuleString **argv;      \/\/ arguments$/;"	m	struct:__anon143	file:
argv	commands/cmd_bulk_insert.h	/^	RedisModuleString **argv;$/;"	m	struct:__anon145
arr	util/cache/cache.h	/^	CacheEntry *arr;                   \/\/ Array of cache elements.$/;"	m	struct:Cache
array	util/heap.c	/^    void * array[];$/;"	m	struct:heap_s	file:
array	value.h	/^		struct SIValue *array;$/;"	m	union:SIValue::__anon98	typeref:struct:SIValue::__anon98::SIValue
array_alloc_fn	util/arr.h	/^#define array_alloc_fn /;"	d
array_append	util/arr.h	/^#define array_append(/;"	d
array_clear	util/arr.h	/^#define array_clear(/;"	d
array_clone	util/arr.h	/^#define array_clone(/;"	d
array_clone_with_cb	util/arr.h	/^#define array_clone_with_cb(/;"	d
array_del	util/arr.h	/^#define array_del(/;"	d
array_del_fast	util/arr.h	/^#define array_del_fast(/;"	d
array_elem	util/arr.h	/^#define array_elem(/;"	d
array_ensure_append	util/arr.h	/^#define array_ensure_append(/;"	d
array_ensure_at	util/arr.h	/^#define array_ensure_at(/;"	d
array_ensure_cap	util/arr.h	/^static inline array_t array_ensure_cap(array_t arr, uint32_t cap) {$/;"	f
array_ensure_len	util/arr.h	/^static inline array_t array_ensure_len(array_t arr, size_t len) {$/;"	f
array_ensure_prepend	util/arr.h	/^#define array_ensure_prepend(/;"	d
array_ensure_tail	util/arr.h	/^#define array_ensure_tail(/;"	d
array_foreach	util/arr.h	/^#define array_foreach(/;"	d
array_free	util/arr.h	/^static void array_free(array_t arr) {$/;"	f
array_free_ex	util/arr.h	/^#define array_free_ex(/;"	d
array_free_fn	util/arr.h	/^#define array_free_fn /;"	d
array_grow	util/arr.h	/^static inline array_t array_grow(array_t arr, size_t n) {$/;"	f
array_hdr	util/arr.h	/^#define array_hdr(/;"	d
array_hdr_t	util/arr.h	/^} array_hdr_t;$/;"	t	typeref:struct:__anon21
array_len	util/arr.h	/^static inline uint32_t array_len(array_t arr) {$/;"	f
array_new	util/arr.h	/^#define array_new(/;"	d
array_new_sz	util/arr.h	/^static array_t array_new_sz(uint32_t elem_sz, uint32_t cap, uint32_t len) {$/;"	f
array_newlen	util/arr.h	/^#define array_newlen(/;"	d
array_pop	util/arr.h	/^#define array_pop(/;"	d
array_realloc_fn	util/arr.h	/^#define array_realloc_fn /;"	d
array_reverse	util/arr.h	/^#define array_reverse(/;"	d
array_sizeof	util/arr.h	/^#define array_sizeof(/;"	d
array_t	util/arr.h	/^typedef void *array_t;$/;"	t
array_tail	util/arr.h	/^#define array_tail(/;"	d
array_trimm	util/arr.h	/^static inline void *array_trimm(array_t arr, uint32_t len, uint32_t cap) {$/;"	f
array_trimm_cap	util/arr.h	/^#define array_trimm_cap(/;"	d
array_trimm_len	util/arr.h	/^#define array_trimm_len(/;"	d
ast	commands/execution_ctx.h	/^	AST *ast;                   \/\/ AST$/;"	m	struct:__anon150
ast	query_ctx.h	/^	AST *ast;       \/\/ The scoped AST associated with this query.$/;"	m	struct:__anon152
ast_segment	execution_plan/execution_plan.h	/^	AST *ast_segment;                   \/\/ The segment which the current ExecutionPlan segment is built from.$/;"	m	struct:ExecutionPlan
async_delete	configuration/config.c	/^	bool async_delete;                 \/\/ If true, graph deletion is done asynchronously.$/;"	m	struct:__anon13	file:
attr_id	execution_plan/ops/shared/update_functions.h	/^	Attribute_ID attr_id;  \/\/ ID of attribute to update$/;"	m	struct:__anon57
attr_keys	execution_plan/ops/shared/create_functions.h	/^	const Attribute_ID *attr_keys; \/\/ IDs of property keys to be added.$/;"	m	struct:__anon59
attributes	graph/graphcontext.h	/^	rax *attributes;                        \/\/ From strings to attribute IDs$/;"	m	struct:__anon91
aux_field_counter	module_event_handlers.c	/^uint aux_field_counter = 0 ;$/;"	v
aux_load	redismodule.h	/^    RedisModuleTypeAuxLoadFunc aux_load;$/;"	m	struct:RedisModuleTypeMethods
aux_save	redismodule.h	/^    RedisModuleTypeAuxSaveFunc aux_save;$/;"	m	struct:RedisModuleTypeMethods
aux_save_triggers	redismodule.h	/^    int aux_save_triggers;$/;"	m	struct:RedisModuleTypeMethods
bc	commands/cmd_bulk_insert.c	/^	RedisModuleBlockedClient *bc;  \/\/ blocked client$/;"	m	struct:__anon143	file:
bc	commands/cmd_bulk_insert.h	/^	RedisModuleBlockedClient *bc;   \/\/ Blocked client.$/;"	m	struct:__anon145
bc	commands/cmd_context.h	/^	RedisModuleBlockedClient *bc;   \/\/ Blocked client.$/;"	m	struct:__anon148
bc	query_ctx.h	/^	RedisModuleBlockedClient *bc;   \/\/ Blocked client.$/;"	m	struct:__anon154
bclone	arithmetic/func_desc.h	/^	AR_Func_Clone bclone;      \/\/ [optional] Function pointer to function clone routine.$/;"	m	struct:__anon123
bfree	arithmetic/algebraic_expression.h	/^			bool bfree;             \/\/ If the matrix is scoped to this expression, it should be freed with it.$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
bfree	arithmetic/func_desc.h	/^	AR_Func_Free bfree;        \/\/ [optional] Function pointer to function cleanup routine.$/;"	m	struct:__anon123
bidirectional	graph/entities/qg_edge.h	/^	bool bidirectional;     \/* Edge doesn't have a direction. *\/$/;"	m	struct:QGEdge
blockCount	util/datablock/datablock.h	/^	uint blockCount;            \/\/ Number of blocks in datablock.$/;"	m	struct:__anon23
blockCount	util/object_pool/object_pool.h	/^	uint blockCount;            \/\/ Number of blocks in ObjectPool.$/;"	m	struct:__anon22
blocks	util/datablock/datablock.h	/^	Block **blocks;             \/\/ Array of blocks.$/;"	m	struct:__anon23
blocks	util/object_pool/object_pool.h	/^	Block **blocks;             \/\/ Array of blocks.$/;"	m	struct:__anon22
boolean_operator	execution_plan/ops/op_apply_multiplexer.h	/^	AST_Operator boolean_operator;  \/\/ Defines the operation logic - OR\/AND.$/;"	m	struct:OpApplyMultiplexer
bound_branch	execution_plan/ops/op_apply.h	/^	OpBase *bound_branch;           \/\/ Bound branch.$/;"	m	struct:__anon52
bound_branch	execution_plan/ops/op_apply_multiplexer.h	/^	OpBase *bound_branch;           \/\/ Bound branch root;$/;"	m	struct:OpApplyMultiplexer
bound_branch	execution_plan/ops/op_semi_apply.h	/^	OpBase *bound_branch;           \/\/ Bound branch root;$/;"	m	struct:OpSemiApply
bound_variable_stream	execution_plan/ops/op_merge.h	/^	OpBase *bound_variable_stream;      \/\/ Optional child stream to resolve previously bound variables.$/;"	m	struct:__anon71
branch_arguments	execution_plan/ops/op_apply_multiplexer.h	/^	Argument **branch_arguments;    \/\/ Branches taps.$/;"	m	struct:OpApplyMultiplexer
breakpoint	errors.h	/^	jmp_buf *breakpoint;        \/\/ The breakpoint to jump to in the case of an exception.$/;"	m	struct:__anon95
bsem	util/thpool/thpool.c	/^typedef struct bsem {$/;"	s	file:
bsem	util/thpool/thpool.c	/^} bsem;$/;"	t	typeref:struct:bsem	file:
bsem_init	util/thpool/thpool.c	/^static void bsem_init(bsem *bsem_p, int value) {$/;"	f	file:
bsem_post	util/thpool/thpool.c	/^static void bsem_post(bsem *bsem_p) {$/;"	f	file:
bsem_post_all	util/thpool/thpool.c	/^static void bsem_post_all(bsem *bsem_p) {$/;"	f	file:
bsem_reset	util/thpool/thpool.c	/^static void bsem_reset(bsem *bsem_p) {$/;"	f	file:
bsem_wait	util/thpool/thpool.c	/^static void bsem_wait(bsem *bsem_p) {$/;"	f	file:
buf	util/arr.h	/^	char buf[];$/;"	m	struct:__anon21
buf	util/sds/sds.h	/^  char buf[];$/;"	m	struct:sdshdr16
buf	util/sds/sds.h	/^  char buf[];$/;"	m	struct:sdshdr32
buf	util/sds/sds.h	/^  char buf[];$/;"	m	struct:sdshdr5
buf	util/sds/sds.h	/^  char buf[];$/;"	m	struct:sdshdr64
buf	util/sds/sds.h	/^  char buf[];$/;"	m	struct:sdshdr8
buffer	execution_plan/ops/op_sort.h	/^	Record *buffer;             \/\/ Holds all records.$/;"	m	struct:__anon49
buffer	util/cache/cache_list.h	/^	CacheListNode *buffer;          \/\/ Nodes array.$/;"	m	struct:__anon20
buffer_cap	util/cache/cache_list.h	/^	uint buffer_cap;                \/\/ Buffer size (fixed).$/;"	m	struct:__anon20
buffer_len	util/cache/cache_list.h	/^	uint buffer_len;                \/\/ Current occupied nodes in the buffer.$/;"	m	struct:__anon20
buildCallOp	execution_plan/execution_plan_build/build_call_op.c	/^void buildCallOp(AST *ast, ExecutionPlan *plan, const cypher_astnode_t *call_clause) {$/;"	f
buildLimitOp	execution_plan/execution_plan_build/build_limit_op.c	/^OpBase *buildLimitOp(ExecutionPlan *plan, const cypher_astnode_t *limit_clause) {$/;"	f
buildMatchOpTree	execution_plan/execution_plan_build/build_match_op_tree.c	/^void buildMatchOpTree(ExecutionPlan *plan, AST *ast, const cypher_astnode_t *clause) {$/;"	f
buildMergeOp	execution_plan/execution_plan_build/build_merge_op_tree.c	/^void buildMergeOp(ExecutionPlan *plan, AST *ast, const cypher_astnode_t *clause, GraphContext *gc) {$/;"	f
buildReturnOps	execution_plan/execution_plan_build/build_projection_ops.c	/^void buildReturnOps(ExecutionPlan *plan, const cypher_astnode_t *clause) {$/;"	f
buildSkipOp	execution_plan/execution_plan_build/build_skip_op.c	/^OpBase *buildSkipOp(ExecutionPlan *plan, const cypher_astnode_t *skip_clause) {$/;"	f
buildWithOps	execution_plan/execution_plan_build/build_projection_ops.c	/^void buildWithOps(ExecutionPlan *plan, const cypher_astnode_t *clause) {$/;"	f
cache	graph/graphcontext.h	/^	Cache *cache;                           \/\/ Global cache of execution plans.$/;"	m	struct:__anon91
cache_size	configuration/config.c	/^	uint64_t cache_size;               \/\/ The cache size for each thread, per graph.$/;"	m	struct:__anon13	file:
cached	commands/execution_ctx.h	/^	bool cached;                \/\/ cache hit\/miss$/;"	m	struct:__anon150
cached	resultset/resultset_statistics.h	/^	bool cached;                \/\/ indication for a cached query execution$/;"	m	struct:__anon19
cached_records	execution_plan/ops/op_value_hash_join.h	/^	Record *cached_records;             \/\/ Cached left hand side records.$/;"	m	struct:__anon41
canonical_entity_names	ast/ast.h	/^	rax *canonical_entity_names;                        \/\/ Storage for canonical graph entity names.$/;"	m	struct:__anon140
cap	util/arr.h	/^	uint32_t cap;$/;"	m	struct:__anon21
cap	util/cache/cache.h	/^	uint cap;                          \/\/ Cache capacity.$/;"	m	struct:Cache
cap	util/thpool/thpool.c	/^	uint64_t cap;                   \/* capacity of the queue     *\/$/;"	m	struct:jobqueue	file:
cb	configuration/config.c	/^	Config_on_change cb;               \/\/ callback function which being called when config param changed$/;"	m	struct:__anon13	file:
cb	util/cron.c	/^	CronTaskCB cb;          \/\/ callback to call when task is due$/;"	m	struct:__anon27	file:
cells	resultset/resultset.h	/^	DataBlock *cells;               \/* Accumulated cells *\/$/;"	m	struct:__anon14
childCount	execution_plan/ops/op.h	/^	int childCount;             \/\/ Number of children.$/;"	m	struct:OpBase
child_count	arithmetic/arithmetic_expression.h	/^	int child_count;                \/\/ Number of children$/;"	m	struct:__anon111
child_record	execution_plan/ops/op_all_node_scan.h	/^	Record child_record;        \/* The Record this op acts on if it is not a tap. *\/$/;"	m	struct:__anon50
child_record	execution_plan/ops/op_index_scan.h	/^	Record child_record;                \/\/ the Record this op acts on if it is not a tap$/;"	m	struct:__anon48
child_record	execution_plan/ops/op_node_by_id_seek.h	/^	Record child_record;    \/\/ The Record this op acts on if it is not a tap.$/;"	m	struct:__anon39
child_record	execution_plan/ops/op_node_by_label_scan.h	/^	Record child_record;        \/* The Record this op acts on if it is not a tap. *\/$/;"	m	struct:__anon61
children	arithmetic/algebraic_expression.h	/^			AlgebraicExpression **children; \/\/ Child nodes.$/;"	m	struct:AlgebraicExpression::__anon118::__anon120
children	arithmetic/arithmetic_expression.h	/^	struct AR_ExpNode **children;   \/\/ Child nodes$/;"	m	struct:__anon111	typeref:struct:__anon111::AR_ExpNode
children	execution_plan/ops/op.h	/^	struct OpBase **children;   \/\/ Child operations.$/;"	m	struct:OpBase	typeref:struct:OpBase::OpBase
clear_tasks	util/cron.c	/^static void clear_tasks() {$/;"	f	file:
clone	execution_plan/ops/op.h	/^	fpClone clone;              \/\/ Operation clone.$/;"	m	struct:OpBase
cmd	slow_log/slow_log.h	/^    char *cmd;          \/\/ Redis command.$/;"	m	struct:__anon77
cmp	util/heap.c	/^    int (*cmp) (const void *, const void *, const void *);$/;"	m	struct:heap_s	file:
cmp_timespec	util/cron.c	/^static int cmp_timespec(struct timespec a, struct timespec b) {$/;"	f	file:
column_count	resultset/resultset.h	/^	uint column_count;              \/* Number of columns in result set. *\/$/;"	m	struct:__anon14
columns	resultset/resultset.h	/^	const char **columns;           \/* Field names for each column of results. *\/$/;"	m	struct:__anon14
columns_record_map	resultset/resultset.h	/^	uint *columns_record_map;       \/* Mapping between column name and record index.*\/$/;"	m	struct:__anon14
command_ctx	commands/cmd_query.c	/^	CommandCtx *command_ctx;  \/\/ command context$/;"	m	struct:__anon146	file:
command_ctxs	commands/cmd_context.c	/^CommandCtx **command_ctxs = NULL;$/;"	v
command_name	commands/cmd_context.h	/^	char *command_name;             \/\/ Command to execute.$/;"	m	struct:__anon148
command_name	query_ctx.h	/^	const char *command_name;       \/\/ Command name.$/;"	m	struct:__anon154
compact	commands/cmd_context.h	/^	bool compact;                   \/\/ Whether this query was issued with the compact flag.$/;"	m	struct:__anon148
compactFilters	execution_plan/optimizations/compact_filters.c	/^void compactFilters(ExecutionPlan *plan) {$/;"	f
compar	algorithms/pagerank.c	/^int compar(const void *x, const void *y) {$/;"	f
compareCallback	util/dict.c	/^int compareCallback(void *privdata, const void *key1, const void *key2) {$/;"	f
cond	filter_tree/filter_tree.h	/^		FT_ConditionNode cond;$/;"	m	union:FT_FilterNode::__anon160
cond	util/thpool/thpool.c	/^	pthread_cond_t cond;$/;"	m	struct:bsem	file:
condv	util/cron.c	/^	pthread_cond_t condv;         \/\/ conditional variable$/;"	m	struct:__anon28	file:
condv_mutex	util/cron.c	/^	pthread_mutex_t condv_mutex;  \/\/ mutex control access to condv$/;"	m	struct:__anon28	file:
config	configuration/config.c	/^RG_Config config; \/\/ global module configuration$/;"	v
connected_components	execution_plan/execution_plan.h	/^	QueryGraph **connected_components;  \/\/ Array of all connected components in this segment.$/;"	m	struct:ExecutionPlan
constant	arithmetic/arithmetic_expression.h	/^		SIValue constant;$/;"	m	union:__anon112::__anon113
consume	execution_plan/ops/op.h	/^	fpConsume consume;          \/\/ Produce next record.$/;"	m	struct:OpBase
consumed	execution_plan/ops/op_limit.h	/^	unsigned int consumed;  \/\/ Number of records consumed so far.$/;"	m	struct:__anon53
copy_item	util/cache/cache.h	/^	CacheEntryCopyFunc copy_item;      \/\/ Callback function that copies cached value.$/;"	m	struct:Cache
count	arithmetic/aggregate_funcs/agg_funcs.c	/^	size_t count;$/;"	m	struct:__anon125	file:
count	slow_log/slow_log.h	/^     uint count;                \/\/ Length of lookup, min_heap and locks arrays.$/;"	m	struct:__anon78
count	util/heap.c	/^    unsigned int count;$/;"	m	struct:heap_s	file:
countMultipleEdges	execution_plan/optimizations/reduce_count.c	/^static GrB_UnaryOp countMultipleEdges = NULL;$/;"	v	file:
counter	util/cache/cache.h	/^	long long counter;                 \/\/ Atomic counter for number of reads.$/;"	m	struct:Cache
crashHandler	debug.c	/^void crashHandler(int sig, siginfo_t *info, void *ucontext) {$/;"	f
create_argument_tap	execution_plan/ops/op_merge.h	/^	Argument *create_argument_tap;      \/\/ Argument tap to populate Create stream with bound variables.$/;"	m	struct:__anon71
create_stream	execution_plan/ops/op_merge.h	/^	OpBase *create_stream;              \/\/ Child stream that will create the pattern if not found.$/;"	m	struct:__anon71
created_edges	execution_plan/ops/shared/create_functions.h	/^	Edge **created_edges;$/;"	m	struct:__anon60
created_nodes	execution_plan/ops/shared/create_functions.h	/^	Node **created_nodes;$/;"	m	struct:__anon60
cron	util/cron.c	/^static CRON *cron = NULL;$/;"	v	file:
ctx	commands/cmd_context.h	/^	RedisModuleCtx *ctx;            \/\/ Redis module context.$/;"	m	struct:__anon148
ctx	resultset/resultset.h	/^	RedisModuleCtx *ctx;            \/* Redis context. *\/$/;"	m	struct:__anon14
currentId	execution_plan/ops/op_node_by_id_seek.h	/^	NodeID currentId;       \/\/ Current ID fetched.$/;"	m	struct:__anon39
currentRecord	execution_plan/ops/op_unwind.h	/^	Record currentRecord; \/\/ record to clone and add a value extracted from the list.$/;"	m	struct:__anon46
current_relation_matrix_id	serializers/encode_context.h	/^	uint current_relation_matrix_id;            \/\/ Current encoded relationship matrix.$/;"	m	struct:__anon107
currently_decoding_graphs	module_event_handlers.c	/^uint currently_decoding_graphs = 0;$/;"	v
d	util/dict.h	/^        double d;$/;"	m	union:dictEntry::__anon26
d	util/dict.h	/^    dict *d;$/;"	m	struct:dictIterator
data	util/block.h	/^	unsigned char data[];   \/\/ Item array. MUST BE LAST MEMBER OF THE STRUCT!$/;"	m	struct:Block
datablock_iterator	serializers/encode_context.h	/^	DataBlockIterator *datablock_iterator;      \/\/ Datablock iterator to be saved in the context.$/;"	m	struct:__anon107
dataver	redismodule.h	/^    uint64_t dataver;   \/* Version of the structure we pass as 'data'. *\/$/;"	m	struct:RedisModuleEvent
db	redismodule.h	/^    uint16_t db;            \/* Selected DB. *\/$/;"	m	struct:RedisModuleClientInfo
dbnum	redismodule.h	/^    int32_t dbnum;          \/* Flushed database number, -1 for ALL. *\/$/;"	m	struct:RedisModuleFlushInfo
dbnum_first	redismodule.h	/^    int32_t dbnum_first;    \/* Swap Db first dbnum *\/$/;"	m	struct:RedisModuleSwapDbInfo
dbnum_second	redismodule.h	/^    int32_t dbnum_second;   \/* Swap Db second dbnum *\/$/;"	m	struct:RedisModuleSwapDbInfo
decoding_context	graph/graphcontext.h	/^	GraphDecodeContext *decoding_context;   \/\/ Decode context of the graph.$/;"	m	struct:__anon91
deleted	util/datablock/datablock.h	/^	unsigned char deleted: 1;  \/\/ A bit indicate if the current item is deleted or not.$/;"	m	struct:__anon24
deletedIdx	util/datablock/datablock.h	/^	uint64_t *deletedIdx;       \/\/ Array of free indicies.$/;"	m	struct:__anon23
deletedIdx	util/object_pool/object_pool.h	/^	uint64_t *deletedIdx;       \/\/ Array of free indices.$/;"	m	struct:__anon22
deleted_edges	execution_plan/ops/op_delete.h	/^	Edge *deleted_edges;    \/\/ Array of edges to be removed.$/;"	m	struct:__anon55
deleted_nodes	execution_plan/ops/op_delete.h	/^	Node *deleted_nodes;    \/\/ Array of nodes to be removed.$/;"	m	struct:__anon55
deplete_consume	execution_plan/execution_plan.c	/^static Record deplete_consume(struct OpBase *op) {$/;"	f	file:
depleted	procedures/proc_bfs.c	/^	bool depleted;                  \/\/ True if BFS has already been performed for this node.$/;"	m	struct:__anon11	file:
dest	arithmetic/algebraic_expression.h	/^			const char *dest;       \/\/ Alias given to operand's columns (destination node).$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
dest	ast/ast_shared.h	/^	const char *dest;           \/\/ destination node alias$/;"	m	struct:__anon137
dest	graph/entities/edge.h	/^	Node *dest;                 \/\/ Pointer to destination node$/;"	m	struct:Edge
dest	graph/entities/qg_edge.h	/^	QGNode *dest;           \/* Pointer to destination node. *\/$/;"	m	struct:QGEdge
destNodeID	graph/entities/edge.h	/^	NodeID destNodeID;          \/\/ Destination node ID$/;"	m	struct:Edge
destNodeIdx	execution_plan/ops/op_cond_var_len_traverse.h	/^	int destNodeIdx;                \/* Node set by operation. *\/$/;"	m	struct:__anon47
destNodeIdx	execution_plan/ops/op_conditional_traverse.h	/^	int destNodeIdx;            \/\/ Destination node index into record.$/;"	m	struct:__anon40
destNodeIdx	execution_plan/ops/op_expand_into.h	/^	int destNodeIdx;            \/\/ Destination node index into record.$/;"	m	struct:__anon54
dest_idx	ast/ast_shared.h	/^	int dest_idx;               \/\/ destination node record index$/;"	m	struct:__anon137
dest_label	execution_plan/ops/op_conditional_traverse.h	/^	const char *dest_label;     \/\/ Label of destination node if known.$/;"	m	struct:__anon40
dest_label_id	execution_plan/ops/op_conditional_traverse.h	/^	NodeID dest_label_id;       \/\/ ID of destination node label if known.$/;"	m	struct:__anon40
destructor	util/datablock/datablock.h	/^	fpDestructor destructor;    \/\/ Function pointer to a clean-up function of an item.$/;"	m	struct:__anon23
destructor	util/object_pool/object_pool.h	/^	void (*destructor)(void *); \/\/ Function pointer to a clean-up function of an item.$/;"	m	struct:__anon22
determine_command	commands/cmd_dispatcher.c	/^static GRAPH_Commands determine_command(const char *cmd_name) {$/;"	f	file:
diagonal	arithmetic/algebraic_expression.h	/^			bool diagonal;          \/\/ Diagonal matrix.$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
dict	util/dict.h	/^typedef struct dict {$/;"	s
dict	util/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictCompareKeys	util/dict.h	/^#define dictCompareKeys(/;"	d
dictEntry	util/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	util/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictFingerprint	util/dict.c	/^static long long dictFingerprint(dict *d) {$/;"	f	file:
dictFreeKey	util/dict.h	/^#define dictFreeKey(/;"	d
dictFreeVal	util/dict.h	/^#define dictFreeVal(/;"	d
dictGenericDelete	util/dict.c	/^static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree) {$/;"	f	file:
dictGetDoubleVal	util/dict.h	/^#define dictGetDoubleVal(/;"	d
dictGetKey	util/dict.h	/^#define dictGetKey(/;"	d
dictGetSignedIntegerVal	util/dict.h	/^#define dictGetSignedIntegerVal(/;"	d
dictGetUnsignedIntegerVal	util/dict.h	/^#define dictGetUnsignedIntegerVal(/;"	d
dictGetVal	util/dict.h	/^#define dictGetVal(/;"	d
dictHashKey	util/dict.h	/^#define dictHashKey(/;"	d
dictIsRehashing	util/dict.h	/^#define dictIsRehashing(/;"	d
dictIterator	util/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	util/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictScanBucketFunction	util/dict.h	/^typedef void (dictScanBucketFunction)(void *privdata, dictEntry **bucketref);$/;"	t
dictScanFunction	util/dict.h	/^typedef void (dictScanFunction)(void *privdata, const dictEntry *de);$/;"	t
dictSetDoubleVal	util/dict.h	/^#define dictSetDoubleVal(/;"	d
dictSetKey	util/dict.h	/^#define dictSetKey(/;"	d
dictSetSignedIntegerVal	util/dict.h	/^#define dictSetSignedIntegerVal(/;"	d
dictSetUnsignedIntegerVal	util/dict.h	/^#define dictSetUnsignedIntegerVal(/;"	d
dictSetVal	util/dict.h	/^#define dictSetVal(/;"	d
dictSize	util/dict.h	/^#define dictSize(/;"	d
dictSlots	util/dict.h	/^#define dictSlots(/;"	d
dictType	util/dict.h	/^typedef struct dictType {$/;"	s
dictType	util/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_can_resize	util/dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	util/dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	util/dict.c	/^static uint8_t dict_hash_function_seed[16];$/;"	v	file:
dictht	util/dict.h	/^typedef struct dictht {$/;"	s
dictht	util/dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
digest	redismodule.h	/^    RedisModuleTypeDigestFunc digest;$/;"	m	struct:RedisModuleTypeMethods
dir	algorithms/all_paths.h	/^	GRAPH_EDGE_DIR dir;         \/\/ traverse direction.$/;"	m	struct:__anon93
direction	execution_plan/ops/shared/traverse_functions.h	/^	GRAPH_EDGE_DIR direction;   \/\/ The direction of the referenced edge being traversed.$/;"	m	struct:__anon58
directions	execution_plan/ops/op_sort.h	/^	int *directions;            \/\/ Array of sort directions(ascending \/ desending) for each item.$/;"	m	struct:__anon49
dirty	graph/graph.h	/^	bool dirty;                         \/\/ Indicates if matrix requires sync$/;"	m	struct:__anon84
doubleval	value.h	/^		double doubleval;$/;"	m	union:SIValue::__anon98
dst	algorithms/all_paths.h	/^	Node *dst;                  \/\/ Destination node, defaults to NULL in case of general all paths execution.$/;"	m	struct:__anon93
due	util/cron.c	/^	struct timespec due;    \/\/ absolute time for when task should run$/;"	m	struct:__anon27	typeref:struct:__anon27::timespec	file:
due_in_ms	util/cron.c	/^static struct timespec due_in_ms(uint ms) {$/;"	f	file:
e	execution_plan/record.h	/^		Edge e;$/;"	m	union:__anon34::__anon35
edge	algorithms/all_paths.h	/^	Edge edge;$/;"	m	struct:__anon92
edge	arithmetic/algebraic_expression.h	/^			const char *edge;       \/\/ Alias given to operand (edge).$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
edgeRecIdx	execution_plan/ops/shared/traverse_functions.h	/^	int edgeRecIdx;             \/\/ The Record index for the referenced edge.$/;"	m	struct:__anon58
edgeRelationCount	execution_plan/ops/op_cond_var_len_traverse.h	/^	int edgeRelationCount;          \/* Length of edgeRelationTypes. *\/$/;"	m	struct:__anon47
edgeRelationTypes	execution_plan/ops/op_cond_var_len_traverse.h	/^	int *edgeRelationTypes;         \/* Relation(s) we're traversing. *\/$/;"	m	struct:__anon47
edgeRelationTypes	execution_plan/ops/shared/traverse_functions.h	/^	int *edgeRelationTypes;     \/\/ The relation type IDs that should be collected.$/;"	m	struct:__anon58
edge_count	serializers/encode_context.h	/^	uint64_t edge_count;             \/\/ number of edges$/;"	m	struct:__anon106
edge_ctx	execution_plan/ops/op_conditional_traverse.h	/^	EdgeTraverseCtx *edge_ctx;  \/\/ Edge collection data if the edge needs to be set.$/;"	m	struct:__anon40
edge_ctx	execution_plan/ops/op_expand_into.h	/^	EdgeTraverseCtx *edge_ctx;  \/\/ Edge collection data if the edge needs to be set.$/;"	m	struct:__anon54
edge_idx	algorithms/all_paths.h	/^	uint edge_idx;              \/\/ Record index of the edge alias, only used for edge filtering.$/;"	m	struct:__anon93
edge_idx	ast/ast_shared.h	/^	int edge_idx;               \/\/ edge record index$/;"	m	struct:__anon137
edge_properties	execution_plan/ops/shared/create_functions.h	/^	PendingProperties **edge_properties;$/;"	m	struct:__anon60
edges	datatypes/path/path.h	/^	Edge *edges;    \/\/ Edges in path.$/;"	m	struct:__anon79
edges	execution_plan/ops/shared/traverse_functions.h	/^	Edge *edges;                \/\/ Flexible array of all matching edges for the current endpoints.$/;"	m	struct:__anon58
edges	graph/graph.h	/^	DataBlock *edges;                   \/\/ Graph edges stored in blocks.$/;"	m	struct:Graph
edges	graph/query_graph.h	/^	QGEdge **edges;             \/\/ Edges contained in QueryGraph$/;"	m	struct:__anon80
edgesIdx	execution_plan/ops/op_cond_var_len_traverse.h	/^	int edgesIdx;                   \/* Edges set by operation. *\/$/;"	m	struct:__anon47
edges_output_idx	procedures/proc_bfs.c	/^	int edges_output_idx;           \/\/ Offset of edges array in outputs$/;"	m	struct:__anon11	file:
edges_to_create	ast/ast_build_op_contexts.h	/^	EdgeCreateCtx *edges_to_create;$/;"	m	struct:__anon130
edges_to_create	execution_plan/ops/shared/create_functions.h	/^	EdgeCreateCtx *edges_to_create;$/;"	m	struct:__anon60
edges_to_merge	ast/ast_build_op_contexts.h	/^	EdgeCreateCtx *edges_to_merge;   \/\/ blueprints of edges in MERGE pattern$/;"	m	struct:__anon129
elem_sz	util/arr.h	/^	uint32_t elem_sz;$/;"	m	struct:__anon21
emitted_record	execution_plan/ops/op_optional.h	/^	bool emitted_record; \/\/ True if this operation has returned at least one Record.$/;"	m	struct:__anon74
encoding_context	graph/graphcontext.h	/^	GraphEncodeContext *encoding_context;   \/\/ Encode context of the graph.$/;"	m	struct:__anon91
endCrashReport	debug.c	/^static void endCrashReport(void) {$/;"	f	file:
end_benchmark	util/dict.c	/^#define end_benchmark(/;"	d	file:
end_of_list	ast/cypher_whitelist.c	/^#define end_of_list /;"	d	file:
entities	execution_plan/optimizations/optimize_cartesian_product.c	/^	rax *entities;      \/\/ Contains the entities that the filter references.$/;"	m	struct:__anon38	file:
entities_count	serializers/serializers_include.h	/^	uint64_t entities_count;  \/\/ Number of entities in the payload.$/;"	m	struct:__anon102
entity	graph/entities/edge.h	/^	Entity *entity;             \/\/ MUST be the first member$/;"	m	struct:Edge
entity	graph/entities/graph_entity.h	/^	Entity *entity;$/;"	m	struct:__anon89
entity	graph/entities/node.h	/^	Entity *entity;     \/\/ MUST be the first member of Node$/;"	m	struct:__anon90
entity_alias	arithmetic/arithmetic_expression.h	/^			const char *entity_alias;$/;"	m	struct:__anon112::__anon113::__anon114
entity_alias_idx	arithmetic/arithmetic_expression.h	/^			int entity_alias_idx;$/;"	m	struct:__anon112::__anon113::__anon114
entries	execution_plan/record.h	/^	Entry entries[];    \/\/ Array of entries.$/;"	m	struct:__anon36
entry	util/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
err	util/thpool/thpool.c	/^#define err(/;"	d	file:
error	errors.h	/^	char *error;                \/\/ The error message produced, if any.$/;"	m	struct:__anon95
eval_exp	arithmetic/comprehension_funcs/comprehension_funcs.h	/^	AR_ExpNode *eval_exp;      \/\/ [optional] The projection routine to build each return element.$/;"	m	struct:__anon122
exec_ctx	commands/cmd_query.c	/^	ExecutionCtx *exec_ctx;   \/\/ execution context$/;"	m	struct:__anon146	file:
exec_type	commands/execution_ctx.h	/^	ExecutionType exec_type;    \/\/ execution type: query, index create\/delete$/;"	m	struct:__anon150
exp	ast/ast_build_op_contexts.h	/^	AR_ExpNode *exp;$/;"	m	struct:__anon128
exp	ast/ast_shared.h	/^	struct AR_ExpNode *exp;$/;"	m	struct:__anon135	typeref:struct:__anon135::AR_ExpNode
exp	execution_plan/ops/op_unwind.h	/^	AR_ExpNode *exp;      \/\/ Arithmetic expression (evaluated as an SIArray).$/;"	m	struct:__anon46
exp	execution_plan/optimizations/traverse_order_utils.h	/^	AlgebraicExpression *exp;  \/\/ algebraic expression$/;"	m	struct:__anon37
exp	filter_tree/filter_tree.h	/^		FT_ExpressionNode exp;$/;"	m	union:FT_FilterNode::__anon160
exp	filter_tree/filter_tree.h	/^	AR_ExpNode *exp;    \/* Boolean expression to evaluate. *\/$/;"	m	struct:__anon157
exp_count	execution_plan/ops/op_delete.h	/^	uint exp_count;         \/\/ Number of expressions.$/;"	m	struct:__anon55
exp_count	execution_plan/ops/op_project.h	/^	uint exp_count;                 \/\/ Number of projected expressions.$/;"	m	struct:__anon73
expandInto	execution_plan/ops/op_cond_var_len_traverse.h	/^	bool expandInto;                \/* Both src and dest already resolved. *\/$/;"	m	struct:__anon47
exps	execution_plan/ops/op_delete.h	/^	AR_ExpNode **exps;      \/\/ Expressions evaluated to an entity about to be deleted.$/;"	m	struct:__anon55
exps	execution_plan/ops/op_project.h	/^	AR_ExpNode **exps;              \/\/ Projected expressions (including order exps).$/;"	m	struct:__anon73
exps	execution_plan/ops/op_sort.h	/^	AR_ExpNode **exps;          \/\/ Projected expressons.$/;"	m	struct:__anon49
extractOriginAndRadius	filter_tree/filter_tree_utils.c	/^bool extractOriginAndRadius(const FT_FilterNode *filter, SIValue *origin,$/;"	f
extract_symbols	Makefile	/^define extract_symbols$/;"	m
f	arithmetic/arithmetic_expression.h	/^	AR_FuncDesc *f;                 \/\/ Operation to perform on children$/;"	m	struct:__anon111
fdiff	algorithms/pagerank.c	/^void fdiff(void *z, const void *x, const void *y) {$/;"	f
fields	index/index.h	/^	char **fields;              \/\/ Indexed fields.$/;"	m	struct:__anon142
fields_count	index/index.h	/^	uint fields_count;          \/\/ Number of fields.$/;"	m	struct:__anon142
fields_ids	index/index.h	/^	Attribute_ID *fields_ids;   \/\/ Indexed field IDs.$/;"	m	struct:__anon142
filter	execution_plan/ops/op_index_scan.h	/^	FT_FilterNode *filter;              \/\/ filter from which to compose index query$/;"	m	struct:__anon48
filter	execution_plan/optimizations/optimize_cartesian_product.c	/^	OpFilter *filter;   \/\/ Filter operation$/;"	m	struct:__anon38	file:
filterTree	execution_plan/ops/op_filter.h	/^	FT_FilterNode *filterTree;$/;"	m	struct:__anon67
filterVariableLengthEdges	execution_plan/optimizations/filter_variable_length_edges.c	/^void filterVariableLengthEdges(ExecutionPlan *plan) {$/;"	f
finalize	arithmetic/func_desc.h	/^	AR_Func_Finalize finalize; \/\/ [optional] Function pointer to routine for finalizing aggregate value.$/;"	m	struct:__anon123
fingerprint	util/dict.h	/^    long long fingerprint;$/;"	m	struct:dictIterator
first_call	execution_plan/ops/op_procedure_call.h	/^    bool first_call;            \/\/ Indicate first call.$/;"	m	struct:__anon70
flags	redismodule.h	/^    uint64_t flags;         \/* REDISMODULE_CLIENTINFO_FLAG_* *\/$/;"	m	struct:RedisModuleClientInfo
flags	util/sds/sds.h	/^  unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16
flags	util/sds/sds.h	/^  unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32
flags	util/sds/sds.h	/^  unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64
flags	util/sds/sds.h	/^  unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8
flags	util/sds/sds.h	/^  unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5
format	resultset/resultset.h	/^	ResultSetFormatterType format;  \/* Result-set format; compact\/verbose\/nop. *\/$/;"	m	struct:__anon14
formatter	resultset/resultset.h	/^	ResultSetFormatter *formatter;  \/* ResultSet data formatter. *\/$/;"	m	struct:__anon14
found	execution_plan/ops/op_distinct.h	/^	rax *found;$/;"	m	struct:__anon51
fpClone	execution_plan/ops/op.h	/^typedef struct OpBase *(*fpClone)(const struct ExecutionPlan *, const struct OpBase *);$/;"	t	typeref:struct:fpClone
fpConsume	execution_plan/ops/op.h	/^typedef Record(*fpConsume)(struct OpBase *);$/;"	t
fpDestructor	util/datablock/datablock.h	/^typedef void (*fpDestructor)(void *);$/;"	t
fpFree	execution_plan/ops/op.h	/^typedef void (*fpFree)(struct OpBase *);$/;"	t
fpInit	execution_plan/ops/op.h	/^typedef OpResult(*fpInit)(struct OpBase *);$/;"	t
fpReset	execution_plan/ops/op.h	/^typedef OpResult(*fpReset)(struct OpBase *);$/;"	t
fpToString	execution_plan/ops/op.h	/^typedef int (*fpToString)(const struct OpBase *, char *, uint);$/;"	t
free	execution_plan/ops/op.h	/^	fpFree free;                \/\/ Free operation.$/;"	m	struct:OpBase
free	redismodule.h	/^    RedisModuleTypeFreeFunc free;$/;"	m	struct:RedisModuleTypeMethods
freeCallback	util/dict.c	/^void freeCallback(void *privdata, void *val) {$/;"	f
free_item	util/cache/cache.h	/^	CacheEntryFreeFunc free_item;      \/\/ Callback function that free cached value.$/;"	m	struct:Cache
free_matrices	arithmetic/path_funcs/path_funcs.h	/^	bool free_matrices;          \/* If true, R and TR will ultimately be freed *\/$/;"	m	struct:__anon121
free_root	ast/ast.h	/^	bool free_root;                                     \/\/ The root should only be freed if this is a sub-AST we constructed$/;"	m	struct:__anon140
front	util/thpool/thpool.c	/^	job *front;              		\/* pointer to front of queue *\/$/;"	m	struct:jobqueue	file:
ft	algorithms/all_paths.h	/^	FT_FilterNode *ft;          \/\/ FilterTree of predicates to be applied to traversed edges.$/;"	m	struct:__anon93
ft	arithmetic/comprehension_funcs/comprehension_funcs.h	/^	FT_FilterNode *ft;         \/\/ [optional] The predicate tree to evaluate each element against.$/;"	m	struct:__anon122
ft	execution_plan/ops/op_cond_var_len_traverse.h	/^	FT_FilterNode *ft;              \/* If not NULL, FilterTree applied to the traversed edge. *\/$/;"	m	struct:__anon47
fulltextIdx	schema/schema.h	/^	Index *fulltextIdx;   \/\/ Full-text index.$/;"	m	struct:__anon101
func	arithmetic/func_desc.h	/^	AR_Func func;              \/\/ Function pointer to scalar or aggregate function routine.$/;"	m	struct:__anon123
func_count	grouping/group.h	/^	uint func_count;                     \/* Number of aggregation function values. *\/$/;"	m	struct:__anon76
func_name	arithmetic/arithmetic_expression.h	/^	const char *func_name;          \/\/ Name of function$/;"	m	struct:__anon111
function	util/thpool/thpool.c	/^	void (*function)(void *arg); \/* function pointer          *\/$/;"	m	struct:job	file:
g	algorithms/all_paths.h	/^	Graph *g;                   \/\/ Graph to traverse.$/;"	m	struct:__anon93
g	execution_plan/ops/op_cond_var_len_traverse.h	/^	Graph *g;$/;"	m	struct:__anon47
g	execution_plan/ops/op_index_scan.h	/^	Graph *g;$/;"	m	struct:__anon48
g	execution_plan/ops/op_node_by_id_seek.h	/^	Graph *g;               \/\/ Graph object.$/;"	m	struct:__anon39
g	execution_plan/ops/op_node_by_label_scan.h	/^	Graph *g;$/;"	m	struct:__anon61
g	graph/graphcontext.h	/^	Graph *g;                               \/\/ Container for all matrices and entity properties$/;"	m	struct:__anon91
g	procedures/proc_bfs.c	/^	Graph *g;                       \/\/ Graph scanned.$/;"	m	struct:__anon11	file:
g	procedures/proc_fulltext_query.c	/^	Graph *g;$/;"	m	struct:__anon5	file:
g	procedures/proc_pagerank.c	/^	Graph *g;                       \/\/ Graph.$/;"	m	struct:__anon2	file:
gc	execution_plan/ops/op_delete.h	/^	GraphContext *gc;$/;"	m	struct:__anon55
gc	execution_plan/ops/op_update.h	/^	GraphContext *gc;$/;"	m	struct:__anon66
gc	procedures/proc_labels.c	/^	GraphContext *gc;   \/\/ Graph context.$/;"	m	struct:__anon6	file:
gc	procedures/proc_list_indexes.c	/^	GraphContext *gc;           \/\/ graph context$/;"	m	struct:__anon1	file:
gc	procedures/proc_property_keys.c	/^	GraphContext *gc;   \/\/ Graph context.$/;"	m	struct:__anon3	file:
gc	procedures/proc_relations.c	/^	GraphContext *gc;   \/\/ Graph context.$/;"	m	struct:__anon4	file:
gc	query_ctx.h	/^	GraphContext *gc;                           \/\/ The GraphContext associated with this query's graph.$/;"	m	struct:__anon155
gc	resultset/resultset.h	/^	GraphContext *gc;               \/* Context used for mapping attribute strings and IDs *\/$/;"	m	struct:__anon14
ge	execution_plan/ops/shared/update_functions.h	/^	GraphEntity *ge;       \/\/ entity to be updated$/;"	m	struct:__anon57
get_command_handler	commands/cmd_dispatcher.c	/^static Command_Handler get_command_handler(GRAPH_Commands cmd) {$/;"	f	file:
global_exec_ctx	query_ctx.h	/^	QueryCtx_GlobalExecCtx global_exec_ctx;     \/\/ The data rlated to global redis execution.$/;"	m	struct:__anon155
graph	execution_plan/ops/op_conditional_traverse.h	/^	Graph *graph;$/;"	m	struct:__anon40
graph	execution_plan/ops/op_expand_into.h	/^	Graph *graph;$/;"	m	struct:__anon54
graph_ctx	commands/cmd_context.h	/^	GraphContext *graph_ctx;        \/\/ Graph context.$/;"	m	struct:__anon148
graph_ctx	commands/cmd_query.c	/^	GraphContext *graph_ctx;  \/\/ graph context$/;"	m	struct:__anon146	file:
graph_keys_count	serializers/decode_context.h	/^	uint64_t graph_keys_count;  \/\/ The number of keys representing the graph.$/;"	m	struct:__anon103
graph_name	graph/graphcontext.h	/^	char *graph_name;                       \/\/ String associated with graph$/;"	m	struct:__anon91
graph_name	serializers/encode_context.h	/^	const char *graph_name;          \/\/ name of graph$/;"	m	struct:__anon106
graphs_in_keyspace	module.c	/^GraphContext **graphs_in_keyspace;  \/\/ Global array tracking all extant GraphContexts.$/;"	v
grb_matrix	graph/graph.h	/^	GrB_Matrix grb_matrix;              \/\/ Underlying GrB_Matrix.$/;"	m	struct:__anon84
group	execution_plan/ops/op_aggregate.h	/^	Group *group;                       \/* Last accessed group. *\/$/;"	m	struct:__anon64
group_iter	execution_plan/ops/op_aggregate.h	/^	CacheGroupIterator *group_iter;     \/* Iterator for walking all groups. *\/$/;"	m	struct:__anon64
group_keys	execution_plan/ops/op_aggregate.h	/^	SIValue *group_keys;                \/* Array of values that represent a key associated with a Group of aggregations. *\/$/;"	m	struct:__anon64
groups	execution_plan/ops/op_aggregate.h	/^	rax *groups;                        \/* Map of all groups built by this operation. *\/$/;"	m	struct:__anon64
handoff_mode	execution_plan/ops/op_merge_create.h	/^	bool handoff_mode;         \/\/ Flag denoting whether the op is in Record creation or handoff mode.$/;"	m	struct:__anon62
has_jobs	util/thpool/thpool.c	/^	bsem *has_jobs;          		\/* flag as binary semaphore  *\/$/;"	m	struct:jobqueue	file:
hashCallback	util/dict.c	/^uint64_t hashCallback(const void *key) {$/;"	f
hashFunction	util/dict.h	/^    uint64_t (*hashFunction)(const void *key);$/;"	m	struct:dictType
hashSet	arithmetic/aggregate_funcs/agg_funcs.h	/^	set *hashSet;$/;"	m	struct:__anon124
hash_state	execution_plan/ops/op_merge_create.h	/^	XXH64_state_t *hash_state; \/\/ Reusable hash state for determining creation uniqueness.$/;"	m	struct:__anon62
head	util/cache/cache_list.h	/^	CacheListNode *head;            \/\/ Linked list head.$/;"	m	struct:__anon20
header	serializers/encode_context.h	/^	GraphEncodeHeader header;                   \/\/ Header replied for each vkey$/;"	m	struct:__anon107
heap	execution_plan/ops/op_sort.h	/^	heap_t *heap;               \/\/ Holds top n records.$/;"	m	struct:__anon49
heap_s	util/heap.c	/^struct heap_s$/;"	s	file:
heap_t	util/heap.h	/^typedef struct heap_s heap_t;$/;"	t	typeref:struct:heap_s
hex_digit_to_int	util/sds/sds.c	/^int hex_digit_to_int(char c) {$/;"	f
highly_connected	graph/entities/qg_node.h	/^	bool highly_connected;     \/\/ Node degree > 2$/;"	m	struct:__anon85
ht	util/dict.h	/^    dictht ht[2];$/;"	m	struct:dict
hz	redismodule.h	/^    int32_t hz;             \/* Approximate number of events per second. *\/$/;"	m	struct:RedisModuleCronLoopInfo
hz	redismodule.h	/^    int32_t hz;             \/* Approximate number of events per second. *\/$/;"	m	struct:RedisModuleLoadingProgressInfo
i	procedures/proc_pagerank.c	/^	int i;                          \/\/ Current node to return.$/;"	m	struct:__anon2	file:
id	ast/ast_shared.h	/^	Attribute_ID id;$/;"	m	struct:__anon135
id	graph/entities/edge.h	/^	EntityID id;                \/\/ Unique id, MUST be the second member$/;"	m	struct:Edge
id	graph/entities/graph_entity.h	/^	Attribute_ID id;$/;"	m	struct:__anon87
id	graph/entities/graph_entity.h	/^	EntityID id;$/;"	m	struct:__anon89
id	graph/entities/node.h	/^	EntityID id;        \/\/ Unique id, MUST be the second member$/;"	m	struct:__anon90
id	redismodule.h	/^    uint64_t id;            \/* Client ID. *\/$/;"	m	struct:RedisModuleClientInfo
id	redismodule.h	/^    uint64_t id;        \/* REDISMODULE_EVENT_... defines. *\/$/;"	m	struct:RedisModuleEvent
id	schema/schema.h	/^	int id;               \/\/ Internal ID to a matrix within the graph.$/;"	m	struct:__anon101
id	util/thpool/thpool.c	/^	int id;                   \/* friendly id               *\/$/;"	m	struct:thread	file:
id_range	execution_plan/ops/op_node_by_label_scan.h	/^	UnsignedRange *id_range;    \/* ID range to iterate over. *\/$/;"	m	struct:__anon61
idx	execution_plan/ops/op_index_scan.h	/^	RSIndex *idx;                       \/\/ index to query$/;"	m	struct:__anon48
idx	index/index.h	/^	RSIndex *idx;               \/\/ RediSearch index.$/;"	m	struct:__anon142
idx	procedures/proc_fulltext_query.c	/^	Index *idx;$/;"	m	struct:__anon5	file:
include_max	util/range/numeric_range.h	/^    bool include_max;$/;"	m	struct:__anon30
include_max	util/range/string_range.h	/^    bool include_max;$/;"	m	struct:__anon29
include_max	util/range/unsigned_range.h	/^	bool include_max;$/;"	m	struct:__anon31
include_min	util/range/numeric_range.h	/^    bool include_min;$/;"	m	struct:__anon30
include_min	util/range/string_range.h	/^    bool include_min;$/;"	m	struct:__anon29
include_min	util/range/unsigned_range.h	/^	bool include_min;$/;"	m	struct:__anon31
incoming_edges	graph/entities/qg_node.h	/^	struct QGEdge **incoming_edges;   \/\/ Array of outgoing edges (ME)->(DEST)$/;"	m	struct:__anon85	typeref:struct:__anon85::QGEdge
index	schema/schema.h	/^	Index *index;         \/\/ Exact match index.$/;"	m	struct:__anon101
index	util/dict.h	/^    long index;$/;"	m	struct:dictIterator
index_count	graph/graphcontext.h	/^	unsigned short index_count;             \/\/ Number of indicies.$/;"	m	struct:__anon91
indices_created	resultset/resultset_statistics.h	/^	int indices_created;        \/\/ number of indices created$/;"	m	struct:__anon19
indices_deleted	resultset/resultset_statistics.h	/^	int indices_deleted;        \/\/ number of indices deleted$/;"	m	struct:__anon19
init	execution_plan/ops/op.h	/^	fpInit init;                \/\/ Called once before execution.$/;"	m	struct:OpBase
init	execution_plan/ops/op_cartesian_product.h	/^	bool init;$/;"	m	struct:__anon72
input_records	execution_plan/ops/op_merge.h	/^	Record *input_records;              \/\/ Records generated by the bound variable stream.$/;"	m	struct:__anon71
internal_exec_ctx	query_ctx.h	/^	QueryCtx_InternalExecCtx internal_exec_ctx; \/\/ The data related to internal query execution.$/;"	m	struct:__anon155
intersect_idx	execution_plan/ops/op_value_hash_join.h	/^	int64_t intersect_idx;              \/\/ Current intersection, < number_of_intersections$/;"	m	struct:__anon41
isDistanceFilter	filter_tree/filter_tree_utils.c	/^bool isDistanceFilter(FT_FilterNode *filter) {$/;"	f
isInFilter	filter_tree/filter_tree_utils.c	/^bool isInFilter(const FT_FilterNode *filter) {$/;"	f
is_edge_lt	graph/graph.c	/^#define is_edge_lt(/;"	d	file:
is_hex_digit	util/sds/sds.c	/^int is_hex_digit(char c) {$/;"	f
it	execution_plan/ops/op_update.h	/^	raxIterator it;                 \/\/ Iterator for traversing update contexts$/;"	m	struct:__anon66
itemCap	util/datablock/datablock.h	/^	uint64_t itemCap;           \/\/ Number of items datablock can hold.$/;"	m	struct:__anon23
itemCap	util/object_pool/object_pool.h	/^	uint64_t itemCap;           \/\/ Number of items ObjectPool can hold.$/;"	m	struct:__anon22
itemCount	util/datablock/datablock.h	/^	uint64_t itemCount;         \/\/ Number of items stored in datablock.$/;"	m	struct:__anon23
itemCount	util/object_pool/object_pool.h	/^	uint64_t itemCount;         \/\/ Number of items stored in ObjectPool.$/;"	m	struct:__anon22
itemSize	util/block.h	/^	size_t itemSize;        \/\/ Size of a single item in bytes.$/;"	m	struct:Block
itemSize	util/datablock/datablock.h	/^	uint itemSize;              \/\/ Size of a single item in bytes.$/;"	m	struct:__anon23
itemSize	util/object_pool/object_pool.h	/^	uint itemSize;              \/\/ Size of a single item in bytes.$/;"	m	struct:__anon22
iter	execution_plan/ops/op_all_node_scan.h	/^	DataBlockIterator *iter;$/;"	m	struct:__anon50
iter	execution_plan/ops/op_conditional_traverse.h	/^	GxB_MatrixTupleIter *iter;  \/\/ Iterator over M.$/;"	m	struct:__anon40
iter	execution_plan/ops/op_index_scan.h	/^	RSResultsIterator *iter;            \/\/ rediSearch iterator over an index with the appropriate filters$/;"	m	struct:__anon48
iter	execution_plan/ops/op_node_by_label_scan.h	/^	GxB_MatrixTupleIter *iter;$/;"	m	struct:__anon61
iter	procedures/proc_fulltext_query.c	/^	RSResultsIterator *iter;$/;"	m	struct:__anon5	file:
iter	procedures/proc_procedures.c	/^	raxIterator iter;     \/\/ Procedures iterator.$/;"	m	struct:__anon10	file:
iterators	util/dict.h	/^    unsigned long iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict
job	util/thpool/thpool.c	/^typedef struct job {$/;"	s	file:
job	util/thpool/thpool.c	/^} job;$/;"	t	typeref:struct:job	file:
jobqueue	util/thpool/thpool.c	/^	jobqueue jobqueue;                \/* job queue                 *\/$/;"	m	struct:thpool_	file:
jobqueue	util/thpool/thpool.c	/^typedef struct jobqueue {$/;"	s	file:
jobqueue	util/thpool/thpool.c	/^} jobqueue;$/;"	t	typeref:struct:jobqueue	file:
jobqueue_clear	util/thpool/thpool.c	/^static void jobqueue_clear(jobqueue *jobqueue_p) {$/;"	f	file:
jobqueue_destroy	util/thpool/thpool.c	/^static void jobqueue_destroy(jobqueue *jobqueue_p) {$/;"	f	file:
jobqueue_init	util/thpool/thpool.c	/^static int jobqueue_init(jobqueue *jobqueue_p) {$/;"	f	file:
jobqueue_pull	util/thpool/thpool.c	/^static struct job *jobqueue_pull(jobqueue *jobqueue_p) {$/;"	f	file:
jobqueue_push	util/thpool/thpool.c	/^static void jobqueue_push(jobqueue *jobqueue_p, struct job *newjob) {$/;"	f	file:
join_value_rec_idx	execution_plan/ops/op_value_hash_join.h	/^	uint join_value_rec_idx;            \/\/ position on joined expression within record.$/;"	m	struct:__anon41
key	datatypes/map.h	/^	SIValue key;  \/\/ key associated with value$/;"	m	struct:Pair
key	query_ctx.h	/^	RedisModuleKey *key;        \/\/ Saves an open key value, for later extraction and closing.$/;"	m	struct:__anon153
key	util/cache/cache_array.h	/^	char *key;      \/\/ Entry key.$/;"	m	struct:CacheEntry_t
key	util/cache/cache_list.h	/^	char *key;                      \/\/ Key$/;"	m	struct:CacheListNode_t
key	util/dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	util/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	util/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	util/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
key_count	execution_plan/ops/op_aggregate.h	/^	uint key_count;                     \/* Number of key expressions. *\/$/;"	m	struct:__anon64
key_count	grouping/group.h	/^	uint key_count;                      \/* Number of SIValues in the key. *\/$/;"	m	struct:__anon76
key_count	serializers/encode_context.h	/^	uint64_t key_count;              \/\/ number of virtual keys + primary key$/;"	m	struct:__anon106
key_exps	execution_plan/ops/op_aggregate.h	/^	AR_ExpNode **key_exps;              \/* Array of expressions used to calculate the group key. *\/$/;"	m	struct:__anon64
keys	ast/ast_shared.h	/^	Attribute_ID *keys;$/;"	m	struct:__anon133
keys	grouping/group.h	/^	SIValue *keys;                       \/* SIValues that form the key associated with each group. *\/$/;"	m	struct:__anon76
keys_processed	serializers/decode_context.h	/^	uint64_t keys_processed;    \/\/ Count the number of procssed graph keys.$/;"	m	struct:__anon103
keys_processed	serializers/encode_context.h	/^	uint64_t keys_processed;                    \/\/ Count the number of procssed graph keys.$/;"	m	struct:__anon107
keywords	arithmetic/algebraic_expression/algebraic_expression_debug.c	/^static char keywords[5] = {'+', '*', '(', ')', 'T'};$/;"	v	file:
label	arithmetic/algebraic_expression.h	/^			const char *label;      \/\/ Label attached to matrix.$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
label	ast/ast_shared.h	/^	const char *label;          \/\/ node label$/;"	m	struct:__anon138
label	execution_plan/ops/shared/scan_functions.h	/^	const char *label;   \/\/ Label of the node being traversed.$/;"	m	struct:__anon56
label	graph/entities/node.h	/^	const char *label;  \/\/ Label attached to Node$/;"	m	struct:__anon90
label	graph/entities/qg_node.h	/^	const char *label;         \/\/ Label string$/;"	m	struct:__anon85
label	index/index.h	/^	char *label;                \/\/ Indexed label.$/;"	m	struct:__anon142
labelID	graph/entities/node.h	/^	int labelID;        \/\/ Label ID$/;"	m	struct:__anon90
labelID	graph/entities/qg_node.h	/^	int labelID;               \/\/ Label ID$/;"	m	struct:__anon85
labelId	ast/ast_shared.h	/^	int labelId;                \/\/ node label id$/;"	m	struct:__anon138
label_id	execution_plan/ops/shared/scan_functions.h	/^	int label_id;        \/\/ Label ID of the node being traversed.$/;"	m	struct:__anon56
label_id	execution_plan/ops/shared/update_functions.h	/^	int label_id;          \/\/ label ID if the updated entity is a node$/;"	m	struct:__anon57
label_matrix_count	serializers/encode_context.h	/^	uint label_matrix_count;         \/\/ number of label matrices$/;"	m	struct:__anon106
labels	graph/graph.h	/^	RG_Matrix *labels;                  \/\/ Label matrices.$/;"	m	struct:Graph
labels_added	resultset/resultset_statistics.h	/^	int labels_added;           \/\/ number of labels added as part of a create query$/;"	m	struct:__anon19
last_writer	query_ctx.h	/^	OpBase *last_writer;        \/\/ The last writer operation which indicates the need for commit.$/;"	m	struct:__anon153
latency	slow_log/slow_log.h	/^	double latency;     \/\/ How much time query was processed.$/;"	m	struct:__anon77
latitude	value.h	/^			float latitude;   \/\/ 32 bit$/;"	m	struct:SIValue::__anon98::__anon99
left	filter_tree/filter_tree.h	/^	struct FT_FilterNode *left;$/;"	m	struct:__anon159	typeref:struct:__anon159::FT_FilterNode
len	util/arr.h	/^	uint32_t len;$/;"	m	struct:__anon21
len	util/sds/sds.h	/^  uint16_t len;        \/* used *\/$/;"	m	struct:sdshdr16
len	util/sds/sds.h	/^  uint32_t len;        \/* used *\/$/;"	m	struct:sdshdr32
len	util/sds/sds.h	/^  uint64_t len;        \/* used *\/$/;"	m	struct:sdshdr64
len	util/sds/sds.h	/^  uint8_t len;         \/* used *\/$/;"	m	struct:sdshdr8
len	util/thpool/thpool.c	/^	int len;                 		\/* number of jobs in queue   *\/$/;"	m	struct:jobqueue	file:
levels	algorithms/all_paths.h	/^	LevelConnection **levels;   \/\/ Nodes reached at depth i, and edges leading to them.$/;"	m	struct:__anon93
lhs	filter_tree/filter_tree.h	/^	AR_ExpNode *lhs;$/;"	m	struct:__anon158
lhs_exp	execution_plan/ops/op_value_hash_join.h	/^	AR_ExpNode *lhs_exp;                \/\/ Left hand side expression to join on.$/;"	m	struct:__anon41
likely	util/branch_pred.h	/^#define likely(/;"	d
limit	execution_plan/ops/op_limit.h	/^	unsigned int limit;     \/\/ Max number of records to consume.$/;"	m	struct:__anon53
limit	execution_plan/ops/op_sort.h	/^	uint limit;                 \/\/ Total number of records to produce$/;"	m	struct:__anon49
limit_exp	execution_plan/ops/op_limit.h	/^	AR_ExpNode *limit_exp;  \/\/ Expression evaluated to limit.$/;"	m	struct:__anon53
list	execution_plan/ops/op_unwind.h	/^	SIValue list;         \/\/ List which the unwind operation is performed on.$/;"	m	struct:__anon46
listIdx	execution_plan/ops/op_unwind.h	/^	uint listIdx;         \/\/ Current list index.$/;"	m	struct:__anon46
local_record	arithmetic/comprehension_funcs/comprehension_funcs.h	/^	Record local_record;       \/\/ Record to populate with the input record's values and the list element.$/;"	m	struct:__anon122
locked_for_commit	query_ctx.h	/^	bool locked_for_commit;     \/\/ Indicates if a call for QueryCtx_LockForCommit issued before.$/;"	m	struct:__anon153
locks	slow_log/slow_log.h	/^     pthread_mutex_t *locks;    \/\/ Array of locks.$/;"	m	struct:__anon78
logCommands	debug.c	/^static void logCommands(void) {$/;"	f	file:
longitude	value.h	/^			float longitude;  \/\/ 32 bit$/;"	m	struct:SIValue::__anon98::__anon99
longval	value.h	/^		int64_t longval;$/;"	m	union:SIValue::__anon98
lookup	slow_log/slow_log.h	/^     rax **lookup;              \/\/ Array of item lookup table.$/;"	m	struct:__anon78
lookup	util/cache/cache.h	/^	rax *lookup;                       \/\/ Mapping between keys to entries, for fast lookups.$/;"	m	struct:Cache
main	util/dict.c	/^int main(int argc, char **argv) {$/;"	f
main	util/sds/sds.c	/^int main(void) {$/;"	f
main	util/siphash.c	/^int main(void) {$/;"	f
maintain_transposed_matrices	configuration/config.c	/^	bool maintain_transposed_matrices; \/\/ If true, maintain a transposed version of each relationship matrix.$/;"	m	struct:__anon13	file:
major	util/redis_version.h	/^	uint major;$/;"	m	struct:__anon32
map	value.h	/^		struct Pair *map;$/;"	m	union:SIValue::__anon98	typeref:struct:SIValue::__anon98::Pair
mapping	execution_plan/ops/op_distinct.h	/^	rax *mapping;          \/\/ record mapping$/;"	m	struct:__anon51
mapping	execution_plan/record.h	/^	rax *mapping;       \/\/ Mapping between alias to record entry.$/;"	m	struct:__anon36
mapping	procedures/proc_pagerank.c	/^	GrB_Index *mapping;             \/\/ Mapping between extracted matrix rows and node ids.$/;"	m	struct:__anon2	file:
master	redismodule.h	/^    int master;             \/* true if master, false if replica *\/$/;"	m	struct:RedisModuleReplicationInfo
masterhost	redismodule.h	/^    char *masterhost;       \/* master instance hostname for NOW_REPLICA *\/$/;"	m	struct:RedisModuleReplicationInfo
masterport	redismodule.h	/^    int masterport;         \/* master instance port for NOW_REPLICA *\/$/;"	m	struct:RedisModuleReplicationInfo
mat	graph/entities/edge.h	/^	GrB_Matrix mat;             \/\/ Adjacency matrix, associated with edge$/;"	m	struct:Edge
match_argument_tap	execution_plan/ops/op_merge.h	/^	Argument *match_argument_tap;       \/\/ Argument tap to populate Match stream with bound variables.$/;"	m	struct:__anon71
match_branch	execution_plan/ops/op_semi_apply.h	/^	OpBase *match_branch;           \/\/ Match branch root;$/;"	m	struct:OpSemiApply
match_stream	execution_plan/ops/op_merge.h	/^	OpBase *match_stream;               \/\/ Child stream that attempts to resolve the pattern.$/;"	m	struct:__anon71
matrix	arithmetic/algebraic_expression.h	/^			GrB_Matrix matrix;      \/\/ Matrix operand.$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
matrix_dims	graph/graph.h	/^	size_t matrix_dims;                 \/\/ The dimensions all matrices should be sized to NxN.$/;"	m	struct:Graph
matrix_tuple_iterator	serializers/encode_context.h	/^	GxB_MatrixTupleIter *matrix_tuple_iterator; \/\/ Matrix tuple iterator to be saved in the context.$/;"	m	struct:__anon107
max	util/range/numeric_range.h	/^    double max;$/;"	m	struct:__anon30
max	util/range/string_range.h	/^    char *max;$/;"	m	struct:__anon29
max	util/range/unsigned_range.h	/^	uint64_t max;$/;"	m	struct:__anon31
maxHops	arithmetic/path_funcs/path_funcs.h	/^	uint maxHops;                \/* Maximum number of edges traversed by this path *\/$/;"	m	struct:__anon121
maxHops	execution_plan/ops/op_cond_var_len_traverse.h	/^	unsigned int maxHops;           \/* Maximum number of hops to perform. *\/$/;"	m	struct:__anon47
maxHops	graph/entities/qg_edge.h	/^	uint maxHops;           \/* Maximum number of hops this edge represents. *\/$/;"	m	struct:QGEdge
maxId	execution_plan/ops/op_node_by_id_seek.h	/^	NodeID maxId;           \/\/ Max ID to fetch.$/;"	m	struct:__anon39
maxLen	algorithms/all_paths.h	/^	uint maxLen;                \/\/ Path max length.$/;"	m	struct:__anon93
max_argc	arithmetic/func_desc.h	/^	uint max_argc;             \/\/ Maximal number of arguments function expects$/;"	m	struct:__anon123
max_queued_queries	configuration/config.c	/^	uint64_t max_queued_queries;       \/\/ max number of queued queries$/;"	m	struct:__anon13	file:
mem_capacity	util/rmalloc.c	/^static int64_t mem_capacity;  \/\/ maximum memory consumption for thread$/;"	v	file:
mem_usage	redismodule.h	/^    RedisModuleTypeMemUsageFunc mem_usage;$/;"	m	struct:RedisModuleTypeMethods
meta_keys	serializers/decode_context.h	/^	rax *meta_keys;             \/\/ The meta keys encountered so far in the decode process.$/;"	m	struct:__anon103
meta_keys	serializers/encode_context.h	/^	rax *meta_keys;                             \/\/ The holds the names of meta keys representing the graph.$/;"	m	struct:__anon107
min	util/range/numeric_range.h	/^    double min;$/;"	m	struct:__anon30
min	util/range/string_range.h	/^    char *min;$/;"	m	struct:__anon29
min	util/range/unsigned_range.h	/^	uint64_t min;$/;"	m	struct:__anon31
minHops	arithmetic/path_funcs/path_funcs.h	/^	uint minHops;                \/* Minimum number of edges traversed by this path *\/$/;"	m	struct:__anon121
minHops	execution_plan/ops/op_cond_var_len_traverse.h	/^	unsigned int minHops;           \/* Maximum number of hops to perform. *\/$/;"	m	struct:__anon47
minHops	graph/entities/qg_edge.h	/^	uint minHops;           \/* Minimum number of hops this edge represents. *\/$/;"	m	struct:QGEdge
minId	execution_plan/ops/op_node_by_id_seek.h	/^	NodeID minId;           \/\/ Min ID to fetch.$/;"	m	struct:__anon39
minLen	algorithms/all_paths.h	/^	uint minLen;                \/\/ Path minimum length.$/;"	m	struct:__anon93
min_argc	arithmetic/func_desc.h	/^	uint min_argc;             \/\/ Minimal number of arguments function expects$/;"	m	struct:__anon123
min_heap	slow_log/slow_log.h	/^     heap_t **min_heap;         \/\/ Array of minimum heap of items.$/;"	m	struct:__anon78
minor	util/redis_version.h	/^	uint minor;$/;"	m	struct:__anon32
mode	ast/ast_shared.h	/^	UPDATE_MODE mode;           \/\/ Whether the entity's property map should be updated or replaced$/;"	m	struct:__anon136
modifies	execution_plan/ops/op.h	/^	const char **modifies;      \/\/ List of entities this op modifies.$/;"	m	struct:OpBase
module_name	redismodule.h	/^    const char* module_name;\/* Name of module loaded or unloaded. *\/$/;"	m	struct:RedisModuleModuleChange
module_version	redismodule.h	/^    int32_t module_version; \/* Module version. *\/$/;"	m	struct:RedisModuleModuleChange
mstime_t	redismodule.h	/^typedef long long mstime_t;$/;"	t
multi_edge	serializers/encode_context.h	/^	bool *multi_edge;                \/\/ true if R[i] contain a multi edge entry$/;"	m	struct:__anon106
multiple_edges_array	serializers/encode_context.h	/^	EdgeID *multiple_edges_array;               \/\/ Multiple edges array, save in the context.$/;"	m	struct:__anon107
multiple_edges_current_index	serializers/encode_context.h	/^	uint multiple_edges_current_index;          \/\/ The current index of the encoded edges array.$/;"	m	struct:__anon107
multiple_edges_dest_id	serializers/encode_context.h	/^	NodeID multiple_edges_dest_id;              \/\/ The current edges array destination node id.$/;"	m	struct:__anon107
multiple_edges_src_id	serializers/encode_context.h	/^	NodeID multiple_edges_src_id;               \/\/ The current edges array sourc node id.$/;"	m	struct:__anon107
mutex	graph/graph.h	/^	pthread_mutex_t mutex;              \/\/ Lock.$/;"	m	struct:__anon84
mutex	util/cron.c	/^	pthread_mutex_t mutex;        \/\/ mutex control access to tasks$/;"	m	struct:__anon28	file:
mutex	util/datablock/datablock.h	/^	pthread_mutex_t mutex;      \/\/ Mutex guarding from concurent updates.$/;"	m	struct:__anon23
mutex	util/thpool/thpool.c	/^	pthread_mutex_t mutex;$/;"	m	struct:bsem	file:
n	execution_plan/ops/op_index_scan.h	/^	NodeScanCtx n;                      \/\/ label data of node being scanned$/;"	m	struct:__anon48
n	execution_plan/ops/op_node_by_label_scan.h	/^	NodeScanCtx n;           \/* Label data of node being scanned. *\/$/;"	m	struct:__anon61
n	execution_plan/record.h	/^		Node n;$/;"	m	union:__anon34::__anon35
n	procedures/proc_bfs.c	/^	GrB_Index n;                    \/\/ Total number of results.$/;"	m	struct:__anon11	file:
n	procedures/proc_fulltext_query.c	/^	Node n;$/;"	m	struct:__anon5	file:
n	procedures/proc_pagerank.c	/^	int n;                          \/\/ Number of nodes to rank.$/;"	m	struct:__anon2	file:
n_alloced	util/rmalloc.c	/^static __thread int64_t n_alloced; $/;"	v	file:
name	arithmetic/func_desc.h	/^	const char *name;          \/\/ Function name.$/;"	m	struct:__anon123
name	execution_plan/ops/op.h	/^	const char *name;           \/\/ Operation name.$/;"	m	struct:OpBase
name	procedures/proc_ctx.h	/^	char *name;     \/\/ Name of output.$/;"	m	struct:__anon9
name	procedures/proc_ctx.h	/^	const char *name;           \/\/ Procedure name.$/;"	m	struct:ProcedureCtx
name	schema/schema.h	/^	char *name;           \/\/ Schema name.$/;"	m	struct:__anon101
name	util/thpool/thpool.c	/^	const char *name;                 \/* name associated with pool *\/$/;"	m	struct:thpool_	file:
name_ctx	ast/ast_annotations_ctx_collection.h	/^	AnnotationCtx *name_ctx;        \/\/ Annotation context for naming graph entities and ORDER items.	$/;"	m	struct:__anon131
named_paths_ctx	ast/ast_annotations_ctx_collection.h	/^	AnnotationCtx *named_paths_ctx; \/\/ Annotation context for named paths projections.$/;"	m	struct:__anon131
neighbors	algorithms/all_paths.h	/^	Edge *neighbors;            \/\/ Reusable buffer of edges along the current path.$/;"	m	struct:__anon93
new_value	execution_plan/ops/shared/update_functions.h	/^	SIValue new_value;     \/\/ constant value to set$/;"	m	struct:__anon57
next	util/block.h	/^	struct Block *next;     \/\/ Pointer to next block.$/;"	m	struct:Block	typeref:struct:Block::Block
next	util/cache/cache_list.h	/^	struct CacheListNode_t *next;   \/\/ Next node in the linked list.$/;"	m	struct:CacheListNode_t	typeref:struct:CacheListNode_t::CacheListNode_t
next	util/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextEntry	util/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
node	algorithms/all_paths.h	/^	Node node;$/;"	m	struct:__anon92
node	procedures/proc_pagerank.c	/^	Node node;                      \/\/ Node.$/;"	m	struct:__anon2	file:
nodeRecIdx	execution_plan/ops/op_all_node_scan.h	/^	uint nodeRecIdx;$/;"	m	struct:__anon50
nodeRecIdx	execution_plan/ops/op_index_scan.h	/^	uint nodeRecIdx;                    \/\/ index of the node being scanned in the Record$/;"	m	struct:__anon48
nodeRecIdx	execution_plan/ops/op_node_by_id_seek.h	/^	int nodeRecIdx;         \/\/ Position of entity within record.$/;"	m	struct:__anon39
nodeRecIdx	execution_plan/ops/op_node_by_label_scan.h	/^	unsigned int nodeRecIdx;    \/* Node position within record. *\/$/;"	m	struct:__anon61
node_count	serializers/encode_context.h	/^	uint64_t node_count;             \/\/ number of nodes$/;"	m	struct:__anon106
node_creation_buffer	configuration/config.c	/^	bool node_creation_buffer;         \/\/ If true, size matrices to accommodate future node creations.$/;"	m	struct:__anon13	file:
node_idx	ast/ast_shared.h	/^	int node_idx;               \/\/ node record index$/;"	m	struct:__anon138
node_properties	execution_plan/ops/shared/create_functions.h	/^	PendingProperties **node_properties;$/;"	m	struct:__anon60
node_schemas	graph/graphcontext.h	/^	Schema **node_schemas;                  \/\/ Array of schemas for each node label$/;"	m	struct:__anon91
nodes	datatypes/path/path.h	/^	Node *nodes;    \/\/ Nodes in paths.$/;"	m	struct:__anon79
nodes	graph/graph.h	/^	DataBlock *nodes;                   \/\/ Graph nodes stored in blocks.$/;"	m	struct:Graph
nodes	graph/query_graph.h	/^	QGNode **nodes;             \/\/ Nodes contained in QueryGraph$/;"	m	struct:__anon80
nodes	procedures/proc_bfs.c	/^	GrB_Vector nodes;               \/\/ Vector of reachable nodes.$/;"	m	struct:__anon11	file:
nodes_created	resultset/resultset_statistics.h	/^	int nodes_created;          \/\/ number of nodes created as part of a create query$/;"	m	struct:__anon19
nodes_deleted	resultset/resultset_statistics.h	/^	int nodes_deleted;          \/\/ number of nodes removed as part of a delete query$/;"	m	struct:__anon19
nodes_output_idx	procedures/proc_bfs.c	/^	int nodes_output_idx;           \/\/ Offset of nodes array in outputs$/;"	m	struct:__anon11	file:
nodes_to_create	ast/ast_build_op_contexts.h	/^	NodeCreateCtx *nodes_to_create;$/;"	m	struct:__anon130
nodes_to_create	execution_plan/ops/shared/create_functions.h	/^	NodeCreateCtx *nodes_to_create;$/;"	m	struct:__anon60
nodes_to_merge	ast/ast_build_op_contexts.h	/^	NodeCreateCtx *nodes_to_merge;   \/\/ blueprints of nodes in MERGE pattern$/;"	m	struct:__anon129
notify_limit	execution_plan/optimizations/apply_limit.c	/^static void notify_limit(OpBase *op, uint limit) {$/;"	f	file:
notify_skip	execution_plan/optimizations/apply_skip.c	/^static void notify_skip(OpBase *op, uint skip) {$/;"	f	file:
num_threads_alive	util/thpool/thpool.c	/^	volatile int num_threads_alive;   \/* threads currently alive   *\/$/;"	m	struct:thpool_	file:
num_threads_working	util/thpool/thpool.c	/^	volatile int num_threads_working; \/* threads currently working *\/$/;"	m	struct:thpool_	file:
number_of_intersections	execution_plan/ops/op_value_hash_join.h	/^	int64_t number_of_intersections;    \/\/ Number of intersections located.$/;"	m	struct:__anon41
offset	serializers/encode_context.h	/^	uint64_t offset;                            \/\/ Number of encoded entities in the current state.$/;"	m	struct:__anon107
offset_count	execution_plan/ops/op_distinct.h	/^	uint offset_count;     \/\/ number of offsets$/;"	m	struct:__anon51
offsets	execution_plan/ops/op_distinct.h	/^	uint *offsets;         \/\/ offsets to expression values$/;"	m	struct:__anon51
old_act	debug.c	/^static struct sigaction old_act;$/;"	v	typeref:struct:sigaction	file:
omp_thread_count	configuration/config.c	/^	uint omp_thread_count;             \/\/ Maximum number of OpenMP threads.$/;"	m	struct:__anon13	file:
on_create	ast/ast_build_op_contexts.h	/^	rax *on_create;                  \/\/ rax of updates to make for ON CREATE directives$/;"	m	struct:__anon129
on_create	execution_plan/ops/op_merge.h	/^	rax *on_create;                     \/\/ Updates to be performed on creation.$/;"	m	struct:__anon71
on_create_it	execution_plan/ops/op_merge.h	/^	raxIterator on_create_it;           \/\/ Iterator for traversing ON CREATE update contexts.$/;"	m	struct:__anon71
on_match	ast/ast_build_op_contexts.h	/^	rax *on_match;                   \/\/ rax of updates to make for ON MATCH directives$/;"	m	struct:__anon129
on_match	execution_plan/ops/op_merge.h	/^	rax *on_match;                      \/\/ Updates to be performed on a successful match.$/;"	m	struct:__anon71
on_match_it	execution_plan/ops/op_merge.h	/^	raxIterator on_match_it;            \/\/ Iterator for traversing ON MATCH update contexts.$/;"	m	struct:__anon71
op	arithmetic/algebraic_expression.h	/^			AL_EXP_OP op;                   \/\/ Operation: `*`,`+`,`transpose`$/;"	m	struct:AlgebraicExpression::__anon118::__anon120
op	arithmetic/arithmetic_expression.h	/^		AR_OpNode op;$/;"	m	union:AR_ExpNode::__anon115
op	execution_plan/ops/op_aggregate.h	/^	OpBase op;$/;"	m	struct:__anon64
op	execution_plan/ops/op_all_node_scan.h	/^	OpBase op;$/;"	m	struct:__anon50
op	execution_plan/ops/op_apply.h	/^	OpBase op;$/;"	m	struct:__anon52
op	execution_plan/ops/op_apply_multiplexer.h	/^	OpBase op;$/;"	m	struct:OpApplyMultiplexer
op	execution_plan/ops/op_argument.h	/^	OpBase op;$/;"	m	struct:__anon65
op	execution_plan/ops/op_cartesian_product.h	/^	OpBase op;$/;"	m	struct:__anon72
op	execution_plan/ops/op_cond_var_len_traverse.h	/^	OpBase op;$/;"	m	struct:__anon47
op	execution_plan/ops/op_conditional_traverse.h	/^	OpBase op;$/;"	m	struct:__anon40
op	execution_plan/ops/op_create.h	/^	OpBase op;                 \/\/ The base operation.$/;"	m	struct:__anon68
op	execution_plan/ops/op_delete.h	/^	OpBase op;$/;"	m	struct:__anon55
op	execution_plan/ops/op_distinct.h	/^	OpBase op;$/;"	m	struct:__anon51
op	execution_plan/ops/op_expand_into.h	/^	OpBase op;$/;"	m	struct:__anon54
op	execution_plan/ops/op_filter.h	/^	OpBase op;$/;"	m	struct:__anon67
op	execution_plan/ops/op_index_scan.h	/^	OpBase op;$/;"	m	struct:__anon48
op	execution_plan/ops/op_join.h	/^	OpBase op;$/;"	m	struct:__anon42
op	execution_plan/ops/op_limit.h	/^	OpBase op;$/;"	m	struct:__anon53
op	execution_plan/ops/op_merge.h	/^	OpBase op;                          \/\/ Base op.$/;"	m	struct:__anon71
op	execution_plan/ops/op_merge_create.h	/^	OpBase op;                 \/\/ The base operation.$/;"	m	struct:__anon62
op	execution_plan/ops/op_node_by_id_seek.h	/^	OpBase op;$/;"	m	struct:__anon39
op	execution_plan/ops/op_node_by_label_scan.h	/^	OpBase op;$/;"	m	struct:__anon61
op	execution_plan/ops/op_optional.h	/^	OpBase op;$/;"	m	struct:__anon74
op	execution_plan/ops/op_procedure_call.h	/^	OpBase op;                  \/\/ Base op.$/;"	m	struct:__anon70
op	execution_plan/ops/op_project.h	/^	OpBase op;$/;"	m	struct:__anon73
op	execution_plan/ops/op_results.h	/^	OpBase op;$/;"	m	struct:__anon75
op	execution_plan/ops/op_semi_apply.h	/^	OpBase op;$/;"	m	struct:OpSemiApply
op	execution_plan/ops/op_skip.h	/^	OpBase op;$/;"	m	struct:__anon63
op	execution_plan/ops/op_sort.h	/^	OpBase op;$/;"	m	struct:__anon49
op	execution_plan/ops/op_unwind.h	/^	OpBase op;$/;"	m	struct:__anon46
op	execution_plan/ops/op_update.h	/^	OpBase op;$/;"	m	struct:__anon66
op	execution_plan/ops/op_value_hash_join.h	/^	OpBase op;$/;"	m	struct:__anon41
op	filter_tree/filter_tree.h	/^	AST_Operator op;	\/* Can validly be OR, AND (and later, XOR and maybe NOT) *\/$/;"	m	struct:__anon159
op	filter_tree/filter_tree.h	/^	AST_Operator op;	\/* Can validly be an operation (<, <=, =, =>, >, <>, maybe NOT). *\/$/;"	m	struct:__anon158
op_arg	execution_plan/ops/op_apply.h	/^	Argument *op_arg;               \/\/ Right-hand branch tap.$/;"	m	struct:__anon52
op_arg	execution_plan/ops/op_semi_apply.h	/^	Argument *op_arg;               \/\/ Match branch tap.$/;"	m	struct:OpSemiApply
op_initialized	execution_plan/ops/op.h	/^	bool op_initialized;        \/\/ True if the operation has already been initialized.$/;"	m	struct:OpBase
operand	arithmetic/algebraic_expression.h	/^		} operand;$/;"	m	union:AlgebraicExpression::__anon118	typeref:struct:AlgebraicExpression::__anon118::__anon119
operand	arithmetic/arithmetic_expression.h	/^		AR_OperandNode operand;$/;"	m	union:AR_ExpNode::__anon115
operation	arithmetic/algebraic_expression.h	/^		} operation;$/;"	m	union:AlgebraicExpression::__anon118	typeref:struct:AlgebraicExpression::__anon118::__anon120
optimizePlan	execution_plan/optimizations/optimizer.c	/^void optimizePlan(ExecutionPlan *plan) {$/;"	f
orderExpressions	execution_plan/optimizations/traverse_order.c	/^void orderExpressions$/;"	f
out	procedures/proc_list_indexes.c	/^	SIValue *out;               \/\/ outputs$/;"	m	struct:__anon1	file:
outgoing_edges	graph/entities/qg_node.h	/^	struct QGEdge **outgoing_edges;   \/\/ Array of incoming edges (ME)<-(SRC)$/;"	m	struct:__anon85	typeref:struct:__anon85::QGEdge
output	execution_plan/ops/op_procedure_call.h	/^	const char **output;        \/\/ Procedure output.$/;"	m	struct:__anon70
output	procedures/proc_bfs.c	/^	SIValue *output;                \/\/ Array with a maximum of 4 entries: ["nodes", nodes, "edges", edges].$/;"	m	struct:__anon11	file:
output	procedures/proc_ctx.h	/^	ProcedureOutput *output;    \/\/ Procedure possible output(s).$/;"	m	struct:ProcedureCtx
output	procedures/proc_fulltext_query.c	/^	SIValue *output;$/;"	m	struct:__anon5	file:
output	procedures/proc_labels.c	/^	SIValue *output;    \/\/ Output label.$/;"	m	struct:__anon6	file:
output	procedures/proc_pagerank.c	/^	SIValue *output;                \/\/ Array with 4 entries ["node", node, "score", score].$/;"	m	struct:__anon2	file:
output	procedures/proc_procedures.c	/^	SIValue *output;      \/\/ Array with a maximum of 4 entries: ["name", name, "mode", mode].$/;"	m	struct:__anon10	file:
output	procedures/proc_property_keys.c	/^	SIValue *output;    \/\/ Output label.$/;"	m	struct:__anon3	file:
output	procedures/proc_relations.c	/^	SIValue *output;    \/\/ Output label.$/;"	m	struct:__anon4	file:
output_records	execution_plan/ops/op_merge.h	/^	Record *output_records;             \/\/ Records to be emitted by this operation.$/;"	m	struct:__anon71
owner	execution_plan/record.h	/^	void *owner;        \/\/ Owner of record.$/;"	m	struct:__anon36
page	algorithms/pagerank.h	/^	GrB_Index page ;    \/\/ the node number itself$/;"	m	struct:__anon94
pagerank	algorithms/pagerank.h	/^	double pagerank ;   \/\/ the pagerank of a node$/;"	m	struct:__anon94
param_name	arithmetic/arithmetic_expression.h	/^		const char *param_name;$/;"	m	union:__anon112::__anon113
params	query_ctx.h	/^	rax *params;    \/\/ Query parameters.$/;"	m	struct:__anon152
params_parse_result	ast/ast.h	/^	cypher_parse_result_t *params_parse_result;         \/\/ Parameters parsing output.$/;"	m	struct:__anon140
parent	execution_plan/ops/op.h	/^	struct OpBase *parent;      \/\/ Parent operations.$/;"	m	struct:OpBase	typeref:struct:OpBase::OpBase
parents	procedures/proc_bfs.c	/^	GrB_Vector parents;             \/\/ Vector associating each node in the BFS tree with its parent.$/;"	m	struct:__anon11	file:
parse_params	ast/ast.c	/^cypher_parse_result_t *parse_params(const char *query, const char **query_body) {$/;"	f
parse_query	ast/ast.c	/^cypher_parse_result_t *parse_query(const char *query) {$/;"	f
parse_result	ast/ast.h	/^	cypher_parse_result_t *parse_result;                \/\/ Query parsing output.$/;"	m	struct:__anon140
parse_result_free	ast/ast.c	/^void parse_result_free(cypher_parse_result_t *parse_result) {$/;"	f
patch	util/redis_version.h	/^	uint patch;$/;"	m	struct:__anon32
path	algorithms/all_paths.h	/^	Path *path;                 \/\/ Current path.$/;"	m	struct:__anon93
pdata	util/cron.c	/^	void *pdata;            \/\/ [optional] private data passed to callback$/;"	m	struct:__anon27	file:
pending	execution_plan/ops/op_create.h	/^	PendingCreations pending;  \/\/ Container struct for all graph changes to be committed.$/;"	m	struct:__anon68
pending	execution_plan/ops/op_merge_create.h	/^	PendingCreations pending;  \/\/ Container struct for all graph changes to be committed.$/;"	m	struct:__anon62
pending_updates	execution_plan/ops/op_merge.h	/^	PendingUpdateCtx *pending_updates;  \/\/ Pending updates to apply, generated $/;"	m	struct:__anon71
percentile	arithmetic/aggregate_funcs/agg_funcs.c	/^	double percentile;$/;"	m	struct:__anon126	file:
plan	commands/execution_ctx.h	/^	ExecutionPlan *plan;        \/\/ execution plan$/;"	m	struct:__anon150
plan	execution_plan/ops/op.h	/^	const struct ExecutionPlan *plan; \/\/ ExecutionPlan this operation is part of.$/;"	m	struct:OpBase	typeref:struct:OpBase::ExecutionPlan
point	value.h	/^		} point;$/;"	m	union:SIValue::__anon98	typeref:struct:SIValue::__anon98::__anon99
port	redismodule.h	/^    uint16_t port;          \/* TCP port. *\/$/;"	m	struct:RedisModuleClientInfo
pred	filter_tree/filter_tree.h	/^		FT_PredicateNode pred;$/;"	m	union:FT_FilterNode::__anon160
prepared	execution_plan/execution_plan.h	/^	bool prepared;                      \/\/ Indicates if the execution plan is ready for execute.$/;"	m	struct:ExecutionPlan
prev	util/cache/cache_list.h	/^	struct CacheListNode_t *prev;   \/\/ Previous node in the linked list.$/;"	m	struct:CacheListNode_t	typeref:struct:CacheListNode_t::CacheListNode_t
prev	util/thpool/thpool.c	/^	struct job *prev;            \/* pointer to previous job   *\/$/;"	m	struct:job	typeref:struct:job::job	file:
privateData	procedures/proc_ctx.h	/^	void *privateData;          \/\/$/;"	m	struct:ProcedureCtx
private_ctx	arithmetic/aggregate_funcs/agg_funcs.h	/^	void *private_ctx;$/;"	m	struct:__anon124
privdata	arithmetic/func_desc.h	/^	void *privdata;            \/\/ [optional] Private data used in evaluating this function.$/;"	m	struct:__anon123
privdata	util/dict.h	/^    void *privdata;$/;"	m	struct:dict
proc_name	execution_plan/ops/op_procedure_call.h	/^	const char *proc_name;      \/\/ Procedure name.$/;"	m	struct:__anon70
proc_out_idx	execution_plan/ops/op_procedure_call.h	/^	uint proc_out_idx;  \/\/ Index into procedure output.$/;"	m	struct:__anon69
procedure	execution_plan/ops/op_procedure_call.h	/^	ProcedureCtx *procedure;    \/\/ Procedure to call.$/;"	m	struct:__anon70
process_is_child	module.c	/^bool process_is_child;              \/\/ Flag indicating whether the running process is a child.$/;"	v
profile	execution_plan/ops/op.h	/^	fpConsume profile;          \/\/ Profiled version of consume.$/;"	m	struct:OpBase
profileExecTime	execution_plan/ops/op.h	/^	double profileExecTime;     \/\/ Operation total execution time in ms.$/;"	m	struct:__anon45
profileRecordCount	execution_plan/ops/op.h	/^	int profileRecordCount;     \/\/ Number of records generated.$/;"	m	struct:__anon45
progress	redismodule.h	/^    int32_t progress;       \/* Approximate progress between 0 and 1024, or -1$/;"	m	struct:RedisModuleLoadingProgressInfo
project_all_ctx	ast/ast_annotations_ctx_collection.h	/^	AnnotationCtx *project_all_ctx; \/\/ Context containing aliases for WITH\/RETURN * projections.$/;"	m	struct:__anon131
projection	execution_plan/ops/op_project.h	/^	Record projection;              \/\/ Record projected by this operation (stored to free if we encounter an error).$/;"	m	struct:__anon73
prop_count	graph/entities/graph_entity.h	/^	int prop_count;             \/\/ Number of properties.$/;"	m	struct:__anon88
prop_id	procedures/proc_property_keys.c	/^	uint prop_id;       \/\/ Current property ID.$/;"	m	struct:__anon3	file:
properties	ast/ast_shared.h	/^	PropertyMap *properties;    \/\/ edge properties set$/;"	m	struct:__anon137
properties	ast/ast_shared.h	/^	PropertyMap *properties;    \/\/ node properties set$/;"	m	struct:__anon138
properties	ast/ast_shared.h	/^	PropertySetCtx *properties; \/\/ properties to set$/;"	m	struct:__anon136
properties	graph/entities/graph_entity.h	/^	EntityProperty *properties; \/\/ Key value pair of attributes.$/;"	m	struct:__anon88
properties_set	resultset/resultset_statistics.h	/^	int properties_set;         \/\/ number of properties created as part of a create query$/;"	m	struct:__anon19
property_count	ast/ast_shared.h	/^	int property_count;$/;"	m	struct:__anon133
property_count	execution_plan/ops/shared/create_functions.h	/^	int property_count;            \/\/ Number of properties to be added.$/;"	m	struct:__anon59
pthread	util/thpool/thpool.c	/^	pthread_t pthread;        \/* pointer to actual thread  *\/$/;"	m	struct:thread	file:
ptrval	value.h	/^		void *ptrval;$/;"	m	union:SIValue::__anon98
query	commands/cmd_context.h	/^	char *query;                    \/\/ Query string.$/;"	m	struct:__anon148
query	query_ctx.h	/^	const char *query;    \/\/ Query string.$/;"	m	struct:__anon152
query	slow_log/slow_log.h	/^	char *query;        \/\/ Query.$/;"	m	struct:__anon77
query_ctx	commands/cmd_query.c	/^	QueryCtx *query_ctx;      \/\/ query context$/;"	m	struct:__anon146	file:
query_data	query_ctx.h	/^	QueryCtx_QueryData query_data;              \/\/ The data related to the query syntax.$/;"	m	struct:__anon155
query_graph	execution_plan/execution_plan.h	/^	QueryGraph *query_graph;            \/\/ QueryGraph representing all graph entities in this segment.$/;"	m	struct:ExecutionPlan
query_mem_capacity	configuration/config.c	/^	int64_t query_mem_capacity;        \/\/ Max mem(bytes) that query\/thread can utilize at any given time$/;"	m	struct:__anon13	file:
r	algorithms/all_paths.h	/^	Record r;                   \/\/ Record the traversal is being performed upon, only used for edge filtering.$/;"	m	struct:__anon93
r	execution_plan/ops/op_apply.h	/^	Record r;                       \/\/ Bound branch record.$/;"	m	struct:__anon52
r	execution_plan/ops/op_apply_multiplexer.h	/^	Record r;                       \/\/ Bound branch record.$/;"	m	struct:OpApplyMultiplexer
r	execution_plan/ops/op_argument.h	/^	Record r;$/;"	m	struct:__anon65
r	execution_plan/ops/op_cartesian_product.h	/^	Record r;$/;"	m	struct:__anon72
r	execution_plan/ops/op_cond_var_len_traverse.h	/^	Record r;$/;"	m	struct:__anon47
r	execution_plan/ops/op_conditional_traverse.h	/^	Record r;                   \/\/ Currently selected record.$/;"	m	struct:__anon40
r	execution_plan/ops/op_expand_into.h	/^	Record r;                   \/\/ Currently selected record.$/;"	m	struct:__anon54
r	execution_plan/ops/op_procedure_call.h	/^    Record r;                   \/\/ Current record.$/;"	m	struct:__anon70
r	execution_plan/ops/op_project.h	/^	Record r;                       \/\/ Input Record being read from (stored to free if we encounter an error).$/;"	m	struct:__anon73
r	execution_plan/ops/op_semi_apply.h	/^	Record r;                       \/\/ Bound branch record.$/;"	m	struct:OpSemiApply
r	grouping/group.h	/^	Record r;   \/* Representative record for all aggregated records in group. *\/$/;"	m	struct:__anon76
ranking	procedures/proc_pagerank.c	/^	LAGraph_PageRank *ranking;      \/\/ Nodes ranking.$/;"	m	struct:__anon2	file:
raxClone	util/rax_extensions.c	/^rax *raxClone(rax *orig) {$/;"	f
raxCloneWithCallback	util/rax_extensions.c	/^rax *raxCloneWithCallback(rax *orig, void *(*clone_callback)(void *)) {$/;"	f
raxIsSubset	util/rax_extensions.c	/^bool raxIsSubset(rax *a, rax *b) {$/;"	f
raxKeys	util/rax_extensions.c	/^unsigned char **raxKeys(rax *rax) {$/;"	f
raxValues	util/rax_extensions.c	/^void **raxValues(rax *rax) {$/;"	f
rdb_load	redismodule.h	/^    RedisModuleTypeLoadFunc rdb_load;$/;"	m	struct:RedisModuleTypeMethods
rdb_save	redismodule.h	/^    RedisModuleTypeSaveFunc rdb_save;$/;"	m	struct:RedisModuleTypeMethods
readOnly	procedures/proc_ctx.h	/^	bool readOnly;              \/\/ Indicates if the procedure is able to mutate the graph.$/;"	m	struct:ProcedureCtx
readonly_query	commands/cmd_query.c	/^	bool readonly_query;      \/\/ read only query$/;"	m	struct:__anon146	file:
rear	util/thpool/thpool.c	/^	job *rear;               		\/* pointer to rear  of queue *\/$/;"	m	struct:jobqueue	file:
rebuild_index_query	execution_plan/ops/op_index_scan.h	/^	bool rebuild_index_query;           \/\/ should we rebuild RediSearch index query for each input record$/;"	m	struct:__anon48
rec_idx	execution_plan/ops/op_procedure_call.h	/^	uint rec_idx;       \/\/ Index into record.$/;"	m	struct:__anon69
reconf_handler	configuration/reconf_handler.c	/^void reconf_handler(Config_Option_Field type) {$/;"	f
record_cap	execution_plan/ops/op_conditional_traverse.h	/^	uint record_cap;            \/\/ Max number of records to process.$/;"	m	struct:__anon40
record_cap	execution_plan/ops/op_expand_into.h	/^	uint record_cap;            \/\/ Max number of records to process.$/;"	m	struct:__anon54
record_count	execution_plan/ops/op_conditional_traverse.h	/^	uint record_count;          \/\/ Number of held records.$/;"	m	struct:__anon40
record_count	execution_plan/ops/op_expand_into.h	/^	uint record_count;          \/\/ Number of held records.$/;"	m	struct:__anon54
record_idx	ast/ast_shared.h	/^	int record_idx;             \/\/ record offset this entity is stored at$/;"	m	struct:__anon136
record_map	execution_plan/execution_plan.h	/^	rax *record_map;                    \/\/ Mapping between identifiers and record indices.$/;"	m	struct:ExecutionPlan
record_offsets	execution_plan/ops/op_aggregate.h	/^	uint *record_offsets;               \/* Record IDs for key and aggregate exps. *\/$/;"	m	struct:__anon64
record_offsets	execution_plan/ops/op_project.h	/^	uint *record_offsets;           \/\/ Record IDs corresponding to each projection (including order exps).$/;"	m	struct:__anon73
record_offsets	execution_plan/ops/op_sort.h	/^	uint *record_offsets;       \/\/ All Record offsets containing values to sort by.$/;"	m	struct:__anon49
record_pool	execution_plan/execution_plan.h	/^	ObjectPool *record_pool;$/;"	m	struct:ExecutionPlan
records	execution_plan/ops/op_conditional_traverse.h	/^	Record *records;            \/\/ Array of records.$/;"	m	struct:__anon40
records	execution_plan/ops/op_create.h	/^	Record *records;           \/\/ Array of Records created by this operation.$/;"	m	struct:__anon68
records	execution_plan/ops/op_expand_into.h	/^	Record *records;            \/\/ Array of records.$/;"	m	struct:__anon54
records	execution_plan/ops/op_merge_create.h	/^	Record *records;           \/\/ Array of Records created by this operation.$/;"	m	struct:__anon62
records	execution_plan/ops/op_update.h	/^	Record *records;                \/\/ Updated records$/;"	m	struct:__anon66
redis_ctx	query_ctx.h	/^	RedisModuleCtx *redis_ctx;      \/\/ The Redis module context.$/;"	m	struct:__anon154
redis_main_thread_id	module_event_handlers.c	/^static pthread_t redis_main_thread_id;$/;"	v	file:
reduceCartesianProductStreamCount	execution_plan/optimizations/optimize_cartesian_product.c	/^void reduceCartesianProductStreamCount(ExecutionPlan *plan) {$/;"	f
reduceCount	execution_plan/optimizations/reduce_count.c	/^void reduceCount(ExecutionPlan *plan) {$/;"	f
reduceDistinct	execution_plan/optimizations/reduce_distinct.c	/^void reduceDistinct(ExecutionPlan *plan) {$/;"	f
reduceFilters	execution_plan/optimizations/reduce_filters.c	/^void reduceFilters(ExecutionPlan *plan) {$/;"	f
reduceScans	execution_plan/optimizations/reduce_scans.c	/^void reduceScans(ExecutionPlan *plan) {$/;"	f
reduceTraversal	execution_plan/optimizations/reduce_traversal.c	/^void reduceTraversal(ExecutionPlan *plan) {$/;"	f
reduce_scan_op	execution_plan/optimizations/utilize_indices.c	/^void reduce_scan_op(ExecutionPlan *plan, NodeByLabelScan *scan) {$/;"	f
reducible	arithmetic/func_desc.h	/^	bool reducible;            \/\/ Can be reduced using static evaluation.$/;"	m	struct:__anon123
ref_count	ast/ast.h	/^	uint *ref_count;                                    \/\/ A pointer to reference counter (for deletion).$/;"	m	struct:__anon140
ref_count	execution_plan/execution_plan.h	/^	int ref_count;                      \/\/ Number of active references.$/;"	m	struct:ExecutionPlan
ref_count	graph/graphcontext.h	/^	int ref_count;                          \/\/ Number of active references.$/;"	m	struct:__anon91
referenced_entities	ast/ast.h	/^	rax *referenced_entities;                           \/\/ Mapping of the referenced entities.$/;"	m	struct:__anon140
rehashidx	util/dict.h	/^    long rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
relation	ast/ast_shared.h	/^	const char *relation;       \/\/ edge relationship type$/;"	m	struct:__anon137
relationCount	algorithms/all_paths.h	/^	int relationCount;          \/\/ length of relationIDs.$/;"	m	struct:__anon93
relationID	graph/entities/edge.h	/^	int relationID;             \/\/ Relation ID$/;"	m	struct:Edge
relationIDs	algorithms/all_paths.h	/^	int *relationIDs;           \/\/ edge type(s) to traverse.$/;"	m	struct:__anon93
relation_schemas	graph/graphcontext.h	/^	Schema **relation_schemas;              \/\/ Array of schemas for each relation type$/;"	m	struct:__anon91
relations	graph/graph.h	/^	RG_Matrix *relations;               \/\/ Relation matrices.$/;"	m	struct:Graph
relationship	graph/entities/edge.h	/^	const char *relationship;   \/\/ Label attached to edge$/;"	m	struct:Edge
relationship_matrix_count	serializers/encode_context.h	/^	uint relationship_matrix_count;  \/\/ number of relation matrices$/;"	m	struct:__anon106
relationships_created	resultset/resultset_statistics.h	/^	int relationships_created;  \/\/ number of edges created as part of a create query$/;"	m	struct:__anon19
relationships_deleted	resultset/resultset_statistics.h	/^	int relationships_deleted;  \/\/ number of edges removed as part of a delete query$/;"	m	struct:__anon19
reltypeIDs	graph/entities/qg_edge.h	/^	int *reltypeIDs;        \/* Relationship type IDs *\/ \/\/ TODO can be uint save for GRAPH_NO_RELATION$/;"	m	struct:QGEdge
reltypeId	ast/ast_shared.h	/^	int reltypeId;              \/\/ edge relationship type id$/;"	m	struct:__anon137
reltype_count	arithmetic/path_funcs/path_funcs.h	/^	uint reltype_count;          \/* Number of traversed relationship types *\/$/;"	m	struct:__anon121
reltype_id	procedures/proc_bfs.c	/^	int reltype_id;                 \/\/ ID of relationship matrix to traverse.$/;"	m	struct:__anon11	file:
reltype_names	arithmetic/path_funcs/path_funcs.h	/^	const char **reltype_names;  \/* Relationship type names *\/$/;"	m	struct:__anon121
reltypes	arithmetic/path_funcs/path_funcs.h	/^	int *reltypes;               \/* Relationship type IDs *\/$/;"	m	struct:__anon121
reltypes	graph/entities/qg_edge.h	/^	const char **reltypes;  \/* Relationship type strings *\/$/;"	m	struct:QGEdge
repl1_offset	redismodule.h	/^    uint64_t repl1_offset;  \/* Main replication offset *\/$/;"	m	struct:RedisModuleReplicationInfo
repl2_offset	redismodule.h	/^    uint64_t repl2_offset;  \/* Offset of replid2 validity *\/$/;"	m	struct:RedisModuleReplicationInfo
replicated_command	commands/cmd_context.h	/^	bool replicated_command;        \/\/ Whether this instance was spawned by a replication command.$/;"	m	struct:__anon148
replid1	redismodule.h	/^    char *replid1;          \/* Main replication ID *\/$/;"	m	struct:RedisModuleReplicationInfo
replid2	redismodule.h	/^    char *replid2;          \/* Secondary replication ID *\/$/;"	m	struct:RedisModuleReplicationInfo
reset	execution_plan/ops/op.h	/^	fpReset reset;              \/\/ Reset operation state.$/;"	m	struct:OpBase
resolved_name	arithmetic/arithmetic_expression.h	/^	const char *resolved_name;$/;"	m	struct:AR_ExpNode
result	arithmetic/aggregate_funcs/agg_funcs.h	/^	SIValue result;$/;"	m	struct:__anon124
result_set	execution_plan/ops/op_results.h	/^	ResultSet *result_set;$/;"	m	struct:__anon75
result_set	query_ctx.h	/^	ResultSet *result_set;      \/\/ Save the execution result set.$/;"	m	struct:__anon153
result_set_size_limit	execution_plan/ops/op_results.h	/^	uint64_t result_set_size_limit;$/;"	m	struct:__anon75
resultset_size	configuration/config.c	/^	uint64_t resultset_size;           \/\/ resultset maximum size, (-1) unlimited$/;"	m	struct:__anon13	file:
rev	util/dict.c	/^static unsigned long rev(unsigned long v) {$/;"	f	file:
rhs	filter_tree/filter_tree.h	/^	AR_ExpNode *rhs;$/;"	m	struct:__anon158
rhs_branch	execution_plan/ops/op_apply.h	/^	OpBase *rhs_branch;             \/\/ Right-hand branch.$/;"	m	struct:__anon52
rhs_exp	execution_plan/ops/op_value_hash_join.h	/^	AR_ExpNode *rhs_exp;                \/\/ Right hand side expression to join on.$/;"	m	struct:__anon41
rhs_rec	execution_plan/ops/op_value_hash_join.h	/^	Record rhs_rec;                     \/\/ Right hand side record.$/;"	m	struct:__anon41
right	filter_tree/filter_tree.h	/^	struct FT_FilterNode *right;$/;"	m	struct:__anon159	typeref:struct:__anon159::FT_FilterNode
rm_alloc_with_capacity	util/rmalloc.c	/^void *rm_alloc_with_capacity(size_t n_bytes) {$/;"	f
rm_calloc	util/rmalloc.h	/^#define rm_calloc /;"	d
rm_calloc	util/rmalloc.h	/^static inline void *rm_calloc(size_t nelem, size_t elemsz) {$/;"	f
rm_calloc_with_capacity	util/rmalloc.c	/^void *rm_calloc_with_capacity(size_t n_elem, size_t size) {$/;"	f
rm_ctx	commands/cmd_query.c	/^	RedisModuleCtx *rm_ctx;   \/\/ redismodule context$/;"	m	struct:__anon146	file:
rm_free	util/rmalloc.h	/^#define rm_free /;"	d
rm_free	util/rmalloc.h	/^static inline void rm_free(void *p) {$/;"	f
rm_free_with_capacity	util/rmalloc.c	/^void rm_free_with_capacity(void *ptr) {$/;"	f
rm_malloc	util/rmalloc.h	/^#define rm_malloc /;"	d
rm_malloc	util/rmalloc.h	/^static inline void *rm_malloc(size_t n) {$/;"	f
rm_new	util/rmalloc.h	/^#define rm_new(/;"	d
rm_realloc	util/rmalloc.h	/^#define rm_realloc /;"	d
rm_realloc	util/rmalloc.h	/^static inline void *rm_realloc(void *p, size_t n) {$/;"	f
rm_realloc_with_capacity	util/rmalloc.c	/^void *rm_realloc_with_capacity(void *ptr, size_t n_bytes) {$/;"	f
rm_reset_n_alloced	util/rmalloc.c	/^void rm_reset_n_alloced() {$/;"	f
rm_set_mem_capacity	util/rmalloc.c	/^void rm_set_mem_capacity(int64_t cap) {$/;"	f
rm_strdup	util/rmalloc.h	/^#define rm_strdup /;"	d
rm_strdup	util/rmalloc.h	/^static inline char *rm_strdup(const char *s) {$/;"	f
rm_strdup_with_capacity	util/rmalloc.c	/^char *rm_strdup_with_capacity(const char *str) {$/;"	f
rm_strndup	util/rmalloc.h	/^#define rm_strndup /;"	d
rm_strndup	util/rmalloc.h	/^static inline char *rm_strndup(const char *s, size_t n) {$/;"	f
root	ast/ast.h	/^	const cypher_astnode_t *root;                       \/\/ Root element of libcypher-parser AST$/;"	m	struct:__anon140
root	execution_plan/execution_plan.h	/^	OpBase *root;                       \/\/ Root operation of overall ExecutionPlan.$/;"	m	struct:ExecutionPlan
rwmutex	util/thpool/thpool.c	/^	pthread_mutex_t rwmutex; 		\/* used for queue r\/w access *\/$/;"	m	struct:jobqueue	file:
s	execution_plan/record.h	/^		SIValue s;$/;"	m	union:__anon34::__anon35
s64	util/dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon26
s_free	util/sds/sdsalloc.h	/^#define s_free /;"	d
s_malloc	util/sds/sdsalloc.h	/^#define s_malloc /;"	d
s_realloc	util/sds/sdsalloc.h	/^#define s_realloc /;"	d
safe	util/dict.h	/^    int table, safe;$/;"	m	struct:dictIterator
schema_id	procedures/proc_labels.c	/^	uint schema_id;     \/\/ Current schema ID.$/;"	m	struct:__anon6	file:
schema_id	procedures/proc_list_indexes.c	/^	int schema_id;              \/\/ current schema ID$/;"	m	struct:__anon1	file:
schema_id	procedures/proc_relations.c	/^	uint schema_id;     \/\/ Current schema ID.$/;"	m	struct:__anon4	file:
score	execution_plan/optimizations/traverse_order_utils.h	/^	int score;                 \/\/ score given to expression$/;"	m	struct:__anon37
score_cmp	execution_plan/optimizations/traverse_order.c	/^#define score_cmp(/;"	d	file:
sds	util/sds/sds.h	/^typedef char *sds;$/;"	t
sdsAllocPtr	util/sds/sds.c	/^void *sdsAllocPtr(sds s) {$/;"	f
sdsAllocSize	util/sds/sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsHdrSize	util/sds/sds.c	/^static inline int sdsHdrSize(char type) {$/;"	f	file:
sdsIncrLen	util/sds/sds.c	/^void sdsIncrLen(sds s, ssize_t incr) {$/;"	f
sdsMakeRoomFor	util/sds/sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	util/sds/sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsReqType	util/sds/sds.c	/^static inline char sdsReqType(size_t string_size) {$/;"	f	file:
sdsTest	util/sds/sds.c	/^int sdsTest(void) {$/;"	f
sds_free	util/sds/sds.c	/^void sds_free(void *ptr) { s_free(ptr); }$/;"	f
sds_malloc	util/sds/sds.c	/^void *sds_malloc(size_t size) { return s_malloc(size); }$/;"	f
sds_realloc	util/sds/sds.c	/^void *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }$/;"	f
sdsalloc	util/sds/sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f
sdsavail	util/sds/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	util/sds/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatfmt	util/sds/sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatlen	util/sds/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	util/sds/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	util/sds/sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	util/sds/sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	util/sds/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	util/sds/sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	util/sds/sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	util/sds/sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	util/sds/sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	util/sds/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	util/sds/sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	util/sds/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	util/sds/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	util/sds/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	util/sds/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr16	util/sds/sds.h	/^struct __attribute__((__packed__)) sdshdr16 {$/;"	s
sdshdr32	util/sds/sds.h	/^struct __attribute__((__packed__)) sdshdr32 {$/;"	s
sdshdr5	util/sds/sds.h	/^struct __attribute__((__packed__)) sdshdr5 {$/;"	s
sdshdr64	util/sds/sds.h	/^struct __attribute__((__packed__)) sdshdr64 {$/;"	s
sdshdr8	util/sds/sds.h	/^struct __attribute__((__packed__)) sdshdr8 {$/;"	s
sdsinclen	util/sds/sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f
sdsjoin	util/sds/sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f
sdsjoinsds	util/sds/sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdslen	util/sds/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsll2str	util/sds/sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsmapchars	util/sds/sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	util/sds/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	util/sds/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	util/sds/sds.c	/^void sdsrange(sds s, ssize_t start, ssize_t end) {$/;"	f
sdssetalloc	util/sds/sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f
sdssetlen	util/sds/sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f
sdssplitargs	util/sds/sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	util/sds/sds.c	/^sds *sdssplitlen(const char *s, ssize_t len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	util/sds/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	util/sds/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	util/sds/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsull2str	util/sds/sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsupdatelen	util/sds/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
seekByID	execution_plan/optimizations/seek_by_id.c	/^void seekByID(ExecutionPlan *plan) {$/;"	f
set	datatypes/set.h	/^typedef rax set;$/;"	t
setupCrashHandlers	debug.c	/^void setupCrashHandlers(RedisModuleCtx *ctx) {$/;"	f
should_cache_records	execution_plan/ops/op_aggregate.h	/^	bool should_cache_records;          \/* Records should be cached if we're sorting after aggregation. *\/$/;"	m	struct:__anon64
simple_tic	util/simple_timer.c	/^void simple_tic         \/* returns current time in seconds and nanoseconds *\/$/;"	f
simple_toc	util/simple_timer.c	/^double simple_toc           \/* returns time since last simple_tic *\/$/;"	f
singleResponse	execution_plan/ops/op_project.h	/^	bool singleResponse;            \/\/ When no child operations, return NULL after a first response.$/;"	m	struct:__anon73
siphash	util/siphash.c	/^static uint64_t siphash(const uint8_t *in, const size_t inlen, const uint8_t *k) {$/;"	f	file:
siphash_nocase	util/siphash.c	/^static uint64_t siphash_nocase(const uint8_t *in, const size_t inlen, const uint8_t *k)$/;"	f	file:
siphash_test	util/siphash.c	/^int siphash_test(void) {$/;"	f
siptlw	util/siphash.c	/^static int siptlw(int c) {$/;"	f	file:
size	util/cache/cache.h	/^	uint size;                         \/\/ Cache current size.$/;"	m	struct:Cache
size	util/dict.h	/^    unsigned long size;$/;"	m	struct:dictht
size	util/heap.c	/^    unsigned int size;$/;"	m	struct:heap_s	file:
sizemask	util/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
skip	execution_plan/ops/op_skip.h	/^	unsigned int skip;    \/\/ number of records to skip$/;"	m	struct:__anon63
skip	execution_plan/ops/op_sort.h	/^	uint skip;                  \/\/ Total number of records to skip$/;"	m	struct:__anon49
skip_exp	execution_plan/ops/op_skip.h	/^	AR_ExpNode *skip_exp; \/\/ expression evaluated to 'skip'$/;"	m	struct:__anon63
skipped	execution_plan/ops/op_skip.h	/^	unsigned int skipped; \/\/ number of records already skipped$/;"	m	struct:__anon63
slowlog	graph/graphcontext.h	/^	SlowLog *slowlog;                       \/\/ Slowlog associated with graph.$/;"	m	struct:__anon91
src	arithmetic/algebraic_expression.h	/^			const char *src;        \/\/ Alias given to operand's rows (src node).$/;"	m	struct:AlgebraicExpression::__anon118::__anon119
src	ast/ast_shared.h	/^	const char *src;            \/\/ source node alias$/;"	m	struct:__anon137
src	graph/entities/edge.h	/^	Node *src;                  \/\/ Pointer to source node$/;"	m	struct:Edge
src	graph/entities/qg_edge.h	/^	QGNode *src;            \/* Pointer to source node. *\/$/;"	m	struct:QGEdge
srcNodeID	graph/entities/edge.h	/^	NodeID srcNodeID;           \/\/ Source node ID$/;"	m	struct:Edge
srcNodeIdx	execution_plan/ops/op_cond_var_len_traverse.h	/^	int srcNodeIdx;                 \/* Node set by operation. *\/$/;"	m	struct:__anon47
srcNodeIdx	execution_plan/ops/op_conditional_traverse.h	/^	int srcNodeIdx;             \/\/ Source node index into record.$/;"	m	struct:__anon40
srcNodeIdx	execution_plan/ops/op_expand_into.h	/^	int srcNodeIdx;             \/\/ Source node index into record.$/;"	m	struct:__anon54
src_idx	ast/ast_shared.h	/^	int src_idx;                \/\/ source node record index$/;"	m	struct:__anon137
startCrashReport	debug.c	/^static void startCrashReport(void) {$/;"	f	file:
start_benchmark	util/dict.c	/^#define start_benchmark(/;"	d	file:
state	procedures/proc_ctx.h	/^	ProcedureState state;       \/\/ State in which the procedure is in.$/;"	m	struct:ProcedureCtx
state	serializers/encode_context.h	/^	EncodeState state;                          \/\/ Represents the current encoding state.$/;"	m	struct:__anon107
state	serializers/serializers_include.h	/^	EncodeState state;        \/\/ Payload type.$/;"	m	struct:__anon102
stats	execution_plan/ops/op.h	/^	OpStats *stats;             \/\/ Profiling statistics.$/;"	m	struct:OpBase
stats	execution_plan/ops/op_delete.h	/^	ResultSetStatistics *stats;$/;"	m	struct:__anon55
stats	execution_plan/ops/op_merge.h	/^	ResultSetStatistics *stats;         \/\/ Required for tracking statistics updates in ON MATCH.$/;"	m	struct:__anon71
stats	execution_plan/ops/op_update.h	/^	ResultSetStatistics *stats;$/;"	m	struct:__anon66
stats	execution_plan/ops/shared/create_functions.h	/^	ResultSetStatistics *stats;$/;"	m	struct:__anon60
stats	resultset/resultset.h	/^	ResultSetStatistics stats;      \/* ResultSet statistics. *\/$/;"	m	struct:__anon14
str_ExtendBuffer	util/strutil.c	/^void str_ExtendBuffer($/;"	f
str_tolower	util/strutil.c	/^void str_tolower(const char *str, char *lower, size_t *lower_len) {$/;"	f
str_toupper	util/strutil.c	/^void str_toupper(const char *str, char *upper, size_t *upper_len) {$/;"	f
stream	execution_plan/ops/op_join.h	/^    OpBase *stream;     \/\/ Current stream to pull from.$/;"	m	struct:__anon42
streamIdx	execution_plan/ops/op_join.h	/^    int streamIdx;      \/\/ Current stream index.$/;"	m	struct:__anon42
string_mapping	graph/graphcontext.h	/^	char **string_mapping;                  \/\/ From attribute IDs to strings$/;"	m	struct:__anon91
stringval	value.h	/^		char *stringval;$/;"	m	union:SIValue::__anon98
sync	redismodule.h	/^    int32_t sync;           \/* Synchronous or threaded flush?. *\/$/;"	m	struct:RedisModuleFlushInfo
t	filter_tree/filter_tree.h	/^	FT_FilterNodeType t;	\/* Determines the actual type of this node. *\/$/;"	m	struct:FT_FilterNode
t_relations	graph/graph.h	/^	RG_Matrix *t_relations;             \/\/ Transposed relation matrices.$/;"	m	struct:Graph
table	util/dict.h	/^    dictEntry **table;$/;"	m	struct:dictht
table	util/dict.h	/^    int table, safe;$/;"	m	struct:dictIterator
tail	util/cache/cache_list.h	/^	CacheListNode *tail;            \/\/ Linked list tail.$/;"	m	struct:__anon20
tasks	util/cron.c	/^	heap_t *tasks;                \/\/ min heap of cron tasks$/;"	m	struct:__anon28	file:
thcount_lock	util/thpool/thpool.c	/^	pthread_mutex_t thcount_lock;     \/* used for thread count etc *\/$/;"	m	struct:thpool_	file:
thpool_	util/thpool/thpool.c	/^typedef struct thpool_ {$/;"	s	file:
thpool_	util/thpool/thpool.c	/^} thpool_;$/;"	t	typeref:struct:thpool_	file:
thpool_add_work	util/thpool/thpool.c	/^int thpool_add_work(thpool_* thpool_p, void (*function_p)(void *), void *arg_p) {$/;"	f
thpool_destroy	util/thpool/thpool.c	/^void thpool_destroy(thpool_* thpool_p) {$/;"	f
thpool_get_thread_id	util/thpool/thpool.c	/^int thpool_get_thread_id(thpool_* thpool_p, pthread_t pthread) {$/;"	f
thpool_init	util/thpool/thpool.c	/^struct thpool_ *thpool_init(int num_threads, const char *name) {$/;"	f
thpool_num_threads	util/thpool/thpool.c	/^int thpool_num_threads(thpool_* thpool_p) {$/;"	f
thpool_num_threads_working	util/thpool/thpool.c	/^int thpool_num_threads_working(thpool_* thpool_p) {$/;"	f
thpool_p	util/thpool/thpool.c	/^	struct thpool_ *thpool_p; \/* access to thpool          *\/$/;"	m	struct:thread	typeref:struct:thread::thpool_	file:
thpool_pause	util/thpool/thpool.c	/^void thpool_pause(thpool_* thpool_p) {$/;"	f
thpool_queue_full	util/thpool/thpool.c	/^bool thpool_queue_full(thpool_* thpool_p) {$/;"	f
thpool_resume	util/thpool/thpool.c	/^void thpool_resume(thpool_* thpool_p) {$/;"	f
thpool_set_jobqueue_cap	util/thpool/thpool.c	/^void thpool_set_jobqueue_cap(thpool_* thpool_p, uint64_t val) {$/;"	f
thpool_wait	util/thpool/thpool.c	/^void thpool_wait(thpool_* thpool_p) {$/;"	f
thread	commands/cmd_context.h	/^	ExecutorThread thread;          \/\/ Which thread executes this command$/;"	m	struct:__anon148
thread	util/cron.c	/^	pthread_t thread;             \/\/ thread running cron main loop$/;"	m	struct:__anon28	file:
thread	util/thpool/thpool.c	/^typedef struct thread {$/;"	s	file:
thread	util/thpool/thpool.c	/^} thread;$/;"	t	typeref:struct:thread	file:
thread_destroy	util/thpool/thpool.c	/^static void thread_destroy(thread *thread_p) {$/;"	f	file:
thread_do	util/thpool/thpool.c	/^static void *thread_do(struct thread *thread_p) {$/;"	f	file:
thread_hold	util/thpool/thpool.c	/^static void thread_hold(int sig_id) {$/;"	f	file:
thread_init	util/thpool/thpool.c	/^static int thread_init(thpool_* thpool_p, struct thread **thread_p, int id) {$/;"	f	file:
thread_pool_size	configuration/config.c	/^	uint thread_pool_size;             \/\/ Thread count for thread pool.$/;"	m	struct:__anon13	file:
threadpool	util/thpool/thpool.h	/^typedef struct thpool_* threadpool;$/;"	t	typeref:struct:thpool_
threads	util/thpool/thpool.c	/^	thread **threads;                 \/* pointer to threads        *\/$/;"	m	struct:thpool_	file:
threads_all_idle	util/thpool/thpool.c	/^	pthread_cond_t threads_all_idle;  \/* signal to thpool_wait     *\/$/;"	m	struct:thpool_	file:
threads_keepalive	util/thpool/thpool.c	/^static volatile int threads_keepalive;$/;"	v	file:
threads_on_hold	util/thpool/thpool.c	/^static volatile int threads_on_hold;$/;"	v	file:
time	slow_log/slow_log.h	/^    time_t time;        \/\/ Item creation time.$/;"	m	struct:__anon77
timeInMilliseconds	util/dict.c	/^static long long timeInMilliseconds(void) {$/;"	f	file:
timeout	commands/cmd_context.h	/^	long long timeout;              \/\/ The query timeout, if specified.$/;"	m	struct:__anon148
timeout	configuration/config.c	/^	uint64_t timeout;                  \/\/ The timeout for each query in milliseconds.$/;"	m	struct:__anon13	file:
timer	query_ctx.h	/^	double timer[2];            \/\/ Query execution time tracking.$/;"	m	struct:__anon153
timer	resultset/resultset.h	/^	double timer[2];                \/* Query runtime tracker. *\/$/;"	m	struct:__anon14
toString	execution_plan/ops/op.h	/^	fpToString toString;        \/\/ Operation string representation.$/;"	m	struct:OpBase
total	arithmetic/aggregate_funcs/agg_funcs.c	/^	double total;$/;"	m	struct:__anon125	file:
total	arithmetic/aggregate_funcs/agg_funcs.c	/^	double total;$/;"	m	struct:__anon127	file:
traverseDir	execution_plan/ops/op_cond_var_len_traverse.h	/^	GRAPH_EDGE_DIR traverseDir;     \/* Traverse direction. *\/$/;"	m	struct:__anon47
type	arithmetic/algebraic_expression.h	/^	AlgebraicExpressionType type;   \/\/ Type of node, either an operation or an operand.$/;"	m	struct:AlgebraicExpression
type	arithmetic/arithmetic_expression.h	/^	AR_ExpNodeType type;$/;"	m	struct:AR_ExpNode
type	arithmetic/arithmetic_expression.h	/^	AR_OperandNodeType type;$/;"	m	struct:__anon112
type	execution_plan/ops/op.h	/^	OPType type;                \/\/ Type of operation.$/;"	m	struct:OpBase
type	execution_plan/record.h	/^	RecordEntryType type;$/;"	m	struct:__anon34
type	index/index.h	/^	IndexType type;             \/\/ Index type exact-match \/ fulltext.$/;"	m	struct:__anon142
type	procedures/proc_ctx.h	/^	SIType type;    \/\/ Type of output.$/;"	m	struct:__anon9
type	procedures/proc_list_indexes.c	/^	IndexType type;             \/\/ current index type to retrieve$/;"	m	struct:__anon1	file:
type	util/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	value.h	/^	SIType type;$/;"	m	struct:SIValue
types	arithmetic/func_desc.h	/^	SIType *types;             \/\/ Types of arguments.$/;"	m	struct:__anon123
u64	util/dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon26
udata	util/heap.c	/^    const void *udata;$/;"	m	struct:heap_s	file:
uname_S	Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unique_entities	execution_plan/ops/op_merge_create.h	/^	rax *unique_entities;      \/\/ A map of each unique pending set of creations.$/;"	m	struct:__anon62
unknown_reltype_ids	graph/query_graph.h	/^	bool unknown_reltype_ids;   \/\/ Indicates if the query graph contains unknown relationship ids.$/;"	m	struct:__anon80
unlikely	util/branch_pred.h	/^#define unlikely(/;"	d
unresolved_filters	execution_plan/ops/op_index_scan.h	/^	FT_FilterNode *unresolved_filters;  \/\/ subset of filter, contains filters that couldn't be resolved by index$/;"	m	struct:__anon48
unwindRecIdx	execution_plan/ops/op_unwind.h	/^	int unwindRecIdx;     \/\/ Update record at this index.$/;"	m	struct:__anon46
update_ctxs	execution_plan/ops/op_update.h	/^	rax *update_ctxs;               \/\/ Entities to update and their expressions$/;"	m	struct:__anon66
update_index	execution_plan/ops/shared/update_functions.h	/^	bool update_index;     \/\/ whether an index is affected by update$/;"	m	struct:__anon57
updates	execution_plan/ops/op_update.h	/^	PendingUpdateCtx *updates;      \/\/ Enqueued updates$/;"	m	struct:__anon66
updates_committed	execution_plan/ops/op_update.h	/^	bool updates_committed;         \/\/ True if we've already committed updates and are now in handoff mode.$/;"	m	struct:__anon66
used	util/dict.h	/^    unsigned long used;$/;"	m	struct:dictht
utilizeIndices	execution_plan/optimizations/utilize_indices.c	/^void utilizeIndices(ExecutionPlan *plan) {$/;"	f
v	util/dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon26
v	util/thpool/thpool.c	/^	int v;$/;"	m	struct:bsem	file:
val	datatypes/map.h	/^	SIValue val;  \/\/ value stored under key$/;"	m	struct:Pair
val	util/dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon26
valDestructor	util/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	util/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
valid	util/range/numeric_range.h	/^    bool valid;$/;"	m	struct:__anon30
valid	util/range/string_range.h	/^    bool valid;$/;"	m	struct:__anon29
valid	util/range/unsigned_range.h	/^	bool valid;$/;"	m	struct:__anon31
value	execution_plan/record.h	/^	} value;$/;"	m	struct:__anon34	typeref:union:__anon34::__anon35
value	graph/entities/graph_entity.h	/^	SIValue value;$/;"	m	struct:__anon87
value	util/cache/cache_array.h	/^	void *value;    \/\/ Entry stored value.$/;"	m	struct:CacheEntry_t
value	util/cache/cache_list.h	/^	void *value;                    \/\/ Node stored value.$/;"	m	struct:CacheListNode_t
values	arithmetic/aggregate_funcs/agg_funcs.c	/^	double *values;$/;"	m	struct:__anon126	file:
values	arithmetic/aggregate_funcs/agg_funcs.c	/^	double *values;$/;"	m	struct:__anon127	file:
values	ast/ast_shared.h	/^	struct AR_ExpNode **values;$/;"	m	struct:__anon133	typeref:struct:__anon133::AR_ExpNode
values	execution_plan/ops/shared/create_functions.h	/^	SIValue *values;               \/\/ Property values associated with each ID.$/;"	m	struct:__anon59
variable_idx	arithmetic/comprehension_funcs/comprehension_funcs.h	/^	int variable_idx;          \/\/ Record index of the comprehension's local variable$/;"	m	struct:__anon122
variable_str	arithmetic/comprehension_funcs/comprehension_funcs.h	/^	const char *variable_str;  \/\/ String name of the comprehension's local variable$/;"	m	struct:__anon122
variadic	arithmetic/arithmetic_expression.h	/^		} variadic;$/;"	m	union:__anon112::__anon113	typeref:struct:__anon112::__anon113::__anon114
vectors_sip64	util/siphash.c	/^const uint8_t vectors_sip64[64][8] = {$/;"	v
version	graph/graphcontext.h	/^	XXH32_hash_t version;                   \/\/ Graph version.$/;"	m	struct:__anon91
version	redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleCronLoopInfo
version	redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleFlushInfo
version	redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleLoadingProgressInfo
version	redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleModuleChange
version	redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleReplicationInfo
version	redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleSwapDbInfo
version	redismodule.h	/^    uint64_t version;       \/* Version of this structure for ABI compat. *\/$/;"	m	struct:RedisModuleClientInfo
version	redismodule.h	/^    uint64_t version;$/;"	m	struct:RedisModuleTypeMethods
vkey_entity_count	configuration/config.c	/^	uint64_t vkey_entity_count;        \/\/ The limit of number of entities encoded at once for each RDB key.$/;"	m	struct:__anon13	file:
writer	execution_plan/ops/op.h	/^	bool writer;             \/\/ Indicates this is a writer operation.$/;"	m	struct:OpBase
yield_edges	procedures/proc_bfs.c	/^	bool yield_edges;               \/\/ Return edges traversed.$/;"	m	struct:__anon11	file:
yield_exps	execution_plan/ops/op_procedure_call.h	/^    AR_ExpNode **yield_exps;    \/\/ Yield expressions.$/;"	m	struct:__anon70
yield_label	procedures/proc_list_indexes.c	/^	SIValue *yield_label;       \/\/ yield index label$/;"	m	struct:__anon1	file:
yield_map	execution_plan/ops/op_procedure_call.h	/^	OutputMap *yield_map;       \/\/ Maps between yield to procedure output and record idx.$/;"	m	struct:__anon70
yield_nodes	procedures/proc_bfs.c	/^	bool yield_nodes;               \/\/ Return reachable nodes.$/;"	m	struct:__anon11	file:
yield_properties	procedures/proc_list_indexes.c	/^	SIValue *yield_properties;  \/\/ yield index properties$/;"	m	struct:__anon1	file:
yield_type	procedures/proc_list_indexes.c	/^	SIValue *yield_type;        \/\/ yield index type$/;"	m	struct:__anon1	file:
